     function doExecute() {
      function download(strData, strFileName, strMimeType) {
      		var D = document,
      			A = arguments,
      			a = D.createElement("a"),
      			d = A[0],
      			n = A[1],
      			t = A[2] || "text/plain";

      		//build download link:
      		a.href = "data:" + strMimeType + "," + escape(strData);

      		if ('download' in a) {
      			a.setAttribute("download", n);
      			a.innerHTML = "downloading...";
      			D.body.appendChild(a);
      			setTimeout(function() {
      				var e = D.createEvent("MouseEvents");
      				e.initMouseEvent(
      					"click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null
      				);
      				a.dispatchEvent(e);
      				D.body.removeChild(a);
      			}, 66);
      			return true;
      		}; //end if a[download]?

      		//do iframe dataURL download:
      		var f = D.createElement("iframe");
      		D.body.appendChild(f);
      		f.src = "data:" + strMimeType + ";base64," + escape(strData);
      		setTimeout(function() {
      			D.body.removeChild(f);
      		}, 333);
      		return true;
      	} //end download()


      //example usage:
      //download("hello world", "test.txt", "text/plain")
      //download( result.chars.join(""), report.pdf", "application/pdf");

      function ArrayBufferToString(buffer) {
      	return BinaryToString(String.fromCharCode.apply(null, Array.prototype.slice.apply(new Uint8Array(buffer))));
      }

      function StringToArrayBuffer(string) {
      	return StringToUint8Array(string).buffer;
      }

      function BinaryToString(binary) {
      	var error;

      	try {
      		return decodeURIComponent(escape(binary));
      	} catch (_error) {
      		error = _error;
      		if (error instanceof URIError) {
      			return binary;
      		} else {
      			throw error;
      		}
      	}
      }



      var Module = {
      	arguments: ['dummy.lua'],
      	postRun: function() {
      		var fileResult = FS.readFile('luac.out');
      		// zwei Arrays zusammentackern: a.push.apply(a, b);
      		download(ArrayBufferToString(fileResult), "OOBDWeb.lbc", "application/octet-stream");
      		console.log('postrun');
      	},
      	'preRun': function() {
      		FS.writeFile('dummy.lua', document.luaSource, { encoding: "utf8" });
      		console.log('prerun with source:' +document.luaSource);
      	},
      	'calledRun': false,
      	ABORT: false,

      	print: (function() {
      		var element = document.getElementById('importExport');
      		// element.value = ''; // clear browser cache
      		return function(text) {
      			text = Array.prototype.slice.call(arguments).join(' ');
      			// These replacements are necessary if you render to raw HTML
      			//text = text.replace(/&/g, "&amp;");
      			//text = text.replace(/</g, "&lt;");
      			//text = text.replace(/>/g, "&gt;");
      			//text = text.replace('\n', '<br>', 'g');
      			element.value += text + "\n";
      			element.scrollTop = element.scrollHeight; // focus on bottom
      		};
      	})(),
      	printErr: function(text) {
      		text = Array.prototype.slice.call(arguments).join(' ');
      		if (0) { // XXX disabled for safety typeof dump == 'function') {
      			dump(text + '\n'); // fast, straight to the real console
      		} else {
      			console.log(text);
      		}
      	},
//       	canvas: document.getElementById('canvas'),
//       	setStatus: function(text) {
//       		if (!Module.setStatus.last) Module.setStatus.last = {
//       			time: Date.now(),
//       			text: ''
//       		};
//       		if (text === Module.setStatus.text) return;
//       		var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
//       		var now = Date.now();
//       		if (m && now - Date.now() < 30) return; // if this is a progress update, skip it if too soon
//       		if (m) {
//       			text = m[1];
//       			progressElement.value = parseInt(m[2]) * 100;
//       			progressElement.max = parseInt(m[4]) * 100;
//       			progressElement.hidden = false;
//       			spinnerElement.hidden = false;
//       		} else {
//       			progressElement.value = null;
//       			progressElement.max = null;
//       			progressElement.hidden = true;
//       			if (!text) spinnerElement.hidden = true;
//       		}
//       		statusElement.innerHTML = text;
//       	},
      	totalDependencies: 0,
      	monitorRunDependencies: function(left) {
      		this.totalDependencies = Math.max(this.totalDependencies, left);
      		Module.setStatus(left ? 'Preparing... (' + (this.totalDependencies - left) + '/' + this.totalDependencies + ')' : 'All downloads complete.');
      	}
      };
      //Module.setStatus('Downloading...');

 	      // The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 6672;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([110,111,32,105,110,112,117,116,32,102,105,108,101,115,32,103,105,118,101,110,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,115,116,97,116,101,0,0,0,0,0,116,111,111,32,109,97,110,121,32,105,110,112,117,116,32,102,105,108,101,115,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,200,0,0,0,0,0,0,0,119,98,0,0,0,0,0,0,111,112,101,110,0,0,0,0,0,0,0,0,0,0,0,0,119,114,105,116,101,0,0,0,99,108,111,115,101,0,0,0,37,115,58,32,99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,10,0,0,0,192,0,0,0,0,0,0,0,108,117,97,99,0,0,0,0,108,117,97,99,46,111,117,116,0,0,0,0,0,0,0,0,61,40,108,117,97,99,41,0,37,115,58,32,37,115,10,0,37,115,58,32,117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,39,37,115,39,10,0,0,0,117,115,97,103,101,58,32,37,115,32,91,111,112,116,105,111,110,115,93,32,91,102,105,108,101,110,97,109,101,115,93,46,10,65,118,97,105,108,97,98,108,101,32,111,112,116,105,111,110,115,32,97,114,101,58,10,32,32,45,32,32,32,32,32,32,32,32,112,114,111,99,101,115,115,32,115,116,100,105,110,10,32,32,45,108,32,32,32,32,32,32,32,108,105,115,116,10,32,32,45,111,32,110,97,109,101,32,32,111,117,116,112,117,116,32,116,111,32,102,105,108,101,32,39,110,97,109,101,39,32,40,100,101,102,97,117,108,116,32,105,115,32,34,37,115,34,41,10,32,32,45,112,32,32,32,32,32,32,32,112,97,114,115,101,32,111,110,108,121,10,32,32,45,115,32,32,32,32,32,32,32,115,116,114,105,112,32,100,101,98,117,103,32,105,110,102,111,114,109,97,116,105,111,110,10,32,32,45,118,32,32,32,32,32,32,32,115,104,111,119,32,118,101,114,115,105,111,110,32,105,110,102,111,114,109,97,116,105,111,110,10,32,32,45,45,32,32,32,32,32,32,32,115,116,111,112,32,104,97,110,100,108,105,110,103,32,111,112,116,105,111,110,115,10,0,0,0,0,0,0,45,45,0,0,0,0,0,0,45,108,0,0,0,0,0,0,45,111,0,0,0,0,0,0,39,45,111,39,32,110,101,101,100,115,32,97,114,103,117,109,101,110,116,0,0,0,0,0,45,112,0,0,0,0,0,0,45,115,0,0,0,0,0,0,45,118,0,0,0,0,0,0,37,115,32,32,37,115,10,0,76,117,97,32,53,46,49,46,53,0,0,0,0,0,0,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,52,45,50,48,49,50,32,76,117,97,46,111,114,103,44,32,80,85,67,45,82,105,111,0,0,0,0,0,0,0,0,117,112,118,97,108,117,101,115,32,40,37,100,41,32,102,111,114,32,37,112,58,10,0,0,9,37,100,9,37,115,10,0,108,111,99,97,108,115,32,40,37,100,41,32,102,111,114,32,37,112,58,10,0,0,0,0,9,37,100,9,37,115,9,37,100,9,37,100,10,0,0,0,99,111,110,115,116,97,110,116,115,32,40,37,100,41,32,102,111,114,32,37,112,58,10,0,9,37,100,9,0,0,0,0,110,105,108,0,0,0,0,0,116,114,117,101,0,0,0,0,102,97,108,115,101,0,0,0,37,46,49,52,103,0,0,0,63,32,116,121,112,101,61,37,100,0,0,0,0,0,0,0,92,34,0,0,0,0,0,0,92,92,0,0,0,0,0,0,92,97,0,0,0,0,0,0,92,98,0,0,0,0,0,0,92,102,0,0,0,0,0,0,92,110,0,0,0,0,0,0,92,114,0,0,0,0,0,0,92,116,0,0,0,0,0,0,92,118,0,0,0,0,0,0,92,37,48,51,117,0,0,0,91,37,100,93,9,0,0,0,91,45,93,9,0,0,0,0,37,45,57,115,9,0,0,0,37,100,0,0,0,0,0,0,32,37,100,0,0,0,0,0,37,100,32,37,100,0,0,0,9,59,32,0,0,0,0,0,9,59,32,37,115,0,0,0,45,0,0,0,0,0,0,0,9,59,32,116,111,32,37,100,0,0,0,0,0,0,0,0,9,59,32,37,112,0,0,0,9,59,32,37,100,0,0,0,40,98,115,116,114,105,110,103,41,0,0,0,0,0,0,0,40,115,116,114,105,110,103,41,0,0,0,0,0,0,0,0,10,37,115,32,60,37,115,58,37,100,44,37,100,62,32,40,37,100,32,105,110,115,116,114,117,99,116,105,111,110,37,115,44,32,37,100,32,98,121,116,101,115,32,97,116,32,37,112,41,10,0,0,0,0,0,0,109,97,105,110,0,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,37,100,37,115,32,112,97,114,97,109,37,115,44,32,37,100,32,115,108,111,116,37,115,44,32,37,100,32,117,112,118,97,108,117,101,37,115,44,32,0,43,0,0,0,0,0,0,0,37,100,32,108,111,99,97,108,37,115,44,32,37,100,32,99,111,110,115,116,97,110,116,37,115,44,32,37,100,32,102,117,110,99,116,105,111,110,37,115,10,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0,0,0,0,0,0,0,0,99,111,110,99,97,116,101,110,97,116,101,0,0,0,0,0,112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0,0,0,37,115,58,37,100,58,32,37,115,0,0,0,0,0,0,0,108,111,99,97,108,0,0,0,103,108,111,98,97,108,0,0,102,105,101,108,100,0,0,0,63,0,0,0,0,0,0,0,117,112,118,97,108,117,101,0,109,101,116,104,111,100,0,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,0,0,0,0,0,0,101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0,67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,110,0,0,0,0,0,0,0,99,97,108,108,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,37,112,0,0,0,0,0,0,37,0,0,0,0,0,0,0,10,13,0,0,0,0,0,0,91,115,116,114,105,110,103,32,34,0,0,0,0,0,0,0,34,93,0,0,0,0,0,0,77,79,86,69,0,0,0,0,76,79,65,68,75,0,0,0,76,79,65,68,66,79,79,76,0,0,0,0,0,0,0,0,76,79,65,68,78,73,76,0,71,69,84,85,80,86,65,76,0,0,0,0,0,0,0,0,71,69,84,71,76,79,66,65,76,0,0,0,0,0,0,0,71,69,84,84,65,66,76,69,0,0,0,0,0,0,0,0,83,69,84,71,76,79,66,65,76,0,0,0,0,0,0,0,83,69,84,85,80,86,65,76,0,0,0,0,0,0,0,0,83,69,84,84,65,66,76,69,0,0,0,0,0,0,0,0,78,69,87,84,65,66,76,69,0,0,0,0,0,0,0,0,83,69,76,70,0,0,0,0,65,68,68,0,0,0,0,0,83,85,66,0,0,0,0,0,77,85,76,0,0,0,0,0,68,73,86,0,0,0,0,0,77,79,68,0,0,0,0,0,80,79,87,0,0,0,0,0,85,78,77,0,0,0,0,0,78,79,84,0,0,0,0,0,76,69,78,0,0,0,0,0,67,79,78,67,65,84,0,0,74,77,80,0,0,0,0,0,69,81,0,0,0,0,0,0,76,84,0,0,0,0,0,0,76,69,0,0,0,0,0,0,84,69,83,84,0,0,0,0,84,69,83,84,83,69,84,0,67,65,76,76,0,0,0,0,84,65,73,76,67,65,76,76,0,0,0,0,0,0,0,0,82,69,84,85,82,78,0,0,70,79,82,76,79,79,80,0,70,79,82,80,82,69,80,0,84,70,79,82,76,79,79,80,0,0,0,0,0,0,0,0,83,69,84,76,73,83,84,0,67,76,79,83,69,0,0,0,67,76,79,83,85,82,69,0,86,65,82,65,82,71,0,0,192,7,0,0,200,7,0,0,208,7,0,0,224,7,0,0,232,7,0,0,248,7,0,0,8,8,0,0,24,8,0,0,40,8,0,0,56,8,0,0,72,8,0,0,88,8,0,0,96,8,0,0,104,8,0,0,112,8,0,0,120,8,0,0,128,8,0,0,136,8,0,0,144,8,0,0,152,8,0,0,160,8,0,0,168,8,0,0,176,8,0,0,184,8,0,0,192,8,0,0,200,8,0,0,208,8,0,0,216,8,0,0,224,8,0,0,232,8,0,0,248,8,0,0,0,9,0,0,8,9,0,0,16,9,0,0,32,9,0,0,40,9,0,0,48,9,0,0,56,9,0,0,0,0,0,0,0,0,0,0,96,113,84,96,80,113,108,49,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,228,228,84,84,16,98,98,132,20,0,81,80,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,118,97,114,105,97,98,108,101,115,32,105,110,32,97,115,115,105,103,110,109,101,110,116,0,6,6,6,6,7,7,7,7,7,7,10,9,5,4,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,0,0,99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,115,101,108,102,0,0,0,0,99,111,110,115,116,97,110,116,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,97,114,103,0,0,0,0,0,60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,116,111,111,32,109,97,110,121,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0,0,0,0,105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0,0,109,97,105,110,32,102,117,110,99,116,105,111,110,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,37,100,32,37,115,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,37,100,32,37,115,0,97,109,98,105,103,117,111,117,115,32,115,121,110,116,97,120,32,40,102,117,110,99,116,105,111,110,32,99,97,108,108,32,120,32,110,101,119,32,115,116,97,116,101,109,101,110,116,41,0,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0,0,0,0,0,0,0,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,111,32,108,111,111,112,32,116,111,32,98,114,101,97,107,0,0,0,0,0,0,0,0,39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0,0,0,0,40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0,40,102,111,114,32,115,116,97,116,101,41,0,0,0,0,0,40,102,111,114,32,99,111,110,116,114,111,108,41,0,0,0,40,102,111,114,32,105,110,100,101,120,41,0,0,0,0,0,40,102,111,114,32,108,105,109,105,116,41,0,0,0,0,0,40,102,111,114,32,115,116,101,112,41,0,0,0,0,0,0,39,37,115,39,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,39,37,115,39,32,97,116,32,108,105,110,101,32,37,100,41,0,0,0,0,0,0,0,0,39,37,115,39,32,101,120,112,101,99,116,101,100,0,0,0,99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,115,121,110,116,97,120,32,108,101,118,101,108,115,0,0,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,0,0,0,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0,0,0,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0,0,0,0,0,0,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,105,108,0,0,0,0,0,98,111,111,108,101,97,110,0,117,115,101,114,100,97,116,97,0,0,0,0,0,0,0,0,110,117,109,98,101,114,0,0,115,116,114,105,110,103,0,0,116,97,98,108,101,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,116,104,114,101,97,100,0,0,112,114,111,116,111,0,0,0,117,112,118,97,108,0,0,0,88,13,0,0,96,13,0,0,104,13,0,0,120,13,0,0,128,13,0,0,136,13,0,0,144,13,0,0,104,13,0,0,160,13,0,0,168,13,0,0,176,13,0,0,0,0,0,0,48,14,0,0,56,14,0,0,72,14,0,0,80,14,0,0,88,14,0,0,96,14,0,0,104,14,0,0,112,14,0,0,120,14,0,0,128,14,0,0,136,14,0,0,144,14,0,0,152,14,0,0,160,14,0,0,168,14,0,0,176,14,0,0,192,14,0,0,0,0,0,0,95,95,105,110,100,101,120,0,95,95,110,101,119,105,110,100,101,120,0,0,0,0,0,0,95,95,103,99,0,0,0,0,95,95,109,111,100,101,0,0,95,95,101,113,0,0,0,0,95,95,97,100,100,0,0,0,95,95,115,117,98,0,0,0,95,95,109,117,108,0,0,0,95,95,100,105,118,0,0,0,95,95,109,111,100,0,0,0,95,95,112,111,119,0,0,0,95,95,117,110,109,0,0,0,95,95,108,101,110,0,0,0,95,95,108,116,0,0,0,0,95,95,108,101,0,0,0,0,95,95,99,111,110,99,97,116,0,0,0,0,0,0,0,0,95,95,99,97,108,108,0,0,98,105,110,97,114,121,32,115,116,114,105,110,103,0,0,0,61,63,0,0,0,0,0,0,99,111,100,101,32,116,111,111,32,100,101,101,112,0,0,0,98,97,100,32,99,111,100,101,0,0,0,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,0,0,98,97,100,32,99,111,110,115,116,97,110,116,0,0,0,0,98,97,100,32,105,110,116,101,103,101,114,0,0,0,0,0,37,115,58,32,37,115,32,105,110,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0,0,0,0,0,98,97,100,32,104,101,97,100,101,114,0,0,0,0,0,0,37,46,49,52,103,0,0,0,105,110,100,101,120,0,0,0,108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0,0,0,0,0,0,0,0,108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0,0,0,0,0,0,0,0,115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0,0,103,101,116,32,108,101,110,103,116,104,32,111,102,0,0,0,39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,0,61,115,116,100,105,110,0,0,64,37,115,0,0,0,0,0,114,0,0,0,0,0,0,0,111,112,101,110,0,0,0,0,114,98,0,0,0,0,0,0,114,101,111,112,101,110,0,0,114,101,97,100,0,0,0,0,80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0,0,0,0,0,0,99,111,100,101,32,115,105,122,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,99,111,110,115,116,97,110,116,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,97,110,100,0,0,0,0,0,98,114,101,97,107,0,0,0,100,111,0,0,0,0,0,0,101,108,115,101,0,0,0,0,101,108,115,101,105,102,0,0,101,110,100,0,0,0,0,0,102,97,108,115,101,0,0,0,102,111,114,0,0,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,105,102,0,0,0,0,0,0,105,110,0,0,0,0,0,0,108,111,99,97,108,0,0,0,110,105,108,0,0,0,0,0,110,111,116,0,0,0,0,0,111,114,0,0,0,0,0,0,114,101,112,101,97,116,0,0,114,101,116,117,114,110,0,0,116,104,101,110,0,0,0,0,116,114,117,101,0,0,0,0,117,110,116,105,108,0,0,0,119,104,105,108,101,0,0,0,46,46,0,0,0,0,0,0,46,46,46,0,0,0,0,0,61,61,0,0,0,0,0,0,62,61,0,0,0,0,0,0,60,61,0,0,0,0,0,0,126,61,0,0,0,0,0,0,60,110,117,109,98,101,114,62,0,0,0,0,0,0,0,0,60,110,97,109,101,62,0,0,60,115,116,114,105,110,103,62,0,0,0,0,0,0,0,0,60,101,111,102,62,0,0,0,56,17,0,0,64,17,0,0,72,17,0,0,80,17,0,0,88,17,0,0,96,17,0,0,104,17,0,0,112,17,0,0,120,17,0,0,136,17,0,0,144,17,0,0,152,17,0,0,160,17,0,0,168,17,0,0,176,17,0,0,184,17,0,0,192,17,0,0,200,17,0,0,208,17,0,0,216,17,0,0,224,17,0,0,232,17,0,0,240,17,0,0,248,17,0,0,0,18,0,0,8,18,0,0,16,18,0,0,24,18,0,0,40,18,0,0,48,18,0,0,64,18,0,0,0,0,0,0,99,104,97,114,40,37,100,41,0,0,0,0,0,0,0,0,37,99,0,0,0,0,0,0,37,115,58,37,100,58,32,37,115,0,0,0,0,0,0,0,37,115,32,110,101,97,114,32,39,37,115,39,0,0,0,0,105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0,0,0,46,0,0,0,0,0,0,0,69,101,0,0,0,0,0,0,43,45,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0,0,0,0,0,0,0,0,108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0,0,0,0,0,0,0,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0,110,101,115,116,105,110,103,32,111,102,32,91,91,46,46,46,93,93,32,105,115,32,100,101,112,114,101,99,97,116,101,100,0,0,0,0,0,0,0,0,99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  var _emscripten_prep_setjmp=true;

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  var _emscripten_check_longjmp=true;

   
  Module["_strncpy"] = _strncpy;

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;

  var _floor=Math_floor;


  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _emscripten_get_longjmp_result=true;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _BDtoILow=true;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  var _BDtoIHigh=true;

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  var _emscripten_setjmp=true;


  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
      // These are defaults from the "C" locale
        me.ret = allocate([
          allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL),0,0,0, // decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // int_curr_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // currency_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // positive_sign
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0 // negative_sign
        ], 'i8*', ALLOC_NORMAL); // Allocate strings in lconv, still don't allocate chars
      }
      return me.ret;
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (!streamObj) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(streamObj.path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }


  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiii": nullFunc_iiiii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vii": invoke_vii, "invoke_iiiii": invoke_iiiii, "_fabs": _fabs, "_freopen": _freopen, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_fread": _fread, "_fmod": _fmod, "__reallyNegative": __reallyNegative, "_ungetc": _ungetc, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_write": _write, "_floor": _floor, "_longjmp": _longjmp, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_open": _open, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_close": _close, "_ferror": _ferror, "_putchar": _putchar, "_pread": _pread, "_localeconv": _localeconv, "_mkport": _mkport, "_fclose": _fclose, "_getc": _getc, "_feof": _feof, "_fsync": _fsync, "___errno_location": ___errno_location, "_recv": _recv, "_fgetc": _fgetc, "_copysign": _copysign, "_printf": _printf, "__exit": __exit, "_read": _read, "_copysignl": _copysignl, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_fputc": _fputc, "_fopen": _fopen, "_exit": _exit, "___setErrNo": ___setErrNo, "_fmodl": _fmodl, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiii=env.invoke_iiiii;
  var _fabs=env._fabs;
  var _freopen=env._freopen;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _fread=env._fread;
  var _fmod=env._fmod;
  var __reallyNegative=env.__reallyNegative;
  var _ungetc=env._ungetc;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _write=env._write;
  var _floor=env._floor;
  var _longjmp=env._longjmp;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _ferror=env._ferror;
  var _putchar=env._putchar;
  var _pread=env._pread;
  var _localeconv=env._localeconv;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _getc=env._getc;
  var _feof=env._feof;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _copysign=env._copysign;
  var _printf=env._printf;
  var __exit=env.__exit;
  var _read=env._read;
  var _copysignl=env._copysignl;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var __formatString=env.__formatString;
  var _fputc=env._fputc;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var ___setErrNo=env.___setErrNo;
  var _fmodl=env._fmodl;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$010$i = 0;
 var $i$1$i = 0, $i$2$i = 0, $i$3$i = 0, $or$cond$i = 0, $s = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $version$0$$i = 0, $version$011$i = 0, $version$1$i = 0, $version$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $s = sp + 8|0;
 $0 = HEAP32[$argv>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP8[$0>>0]|0;
  $3 = ($2<<24>>24)==(0);
  if (!($3)) {
   HEAP32[184>>2] = $0;
  }
 }
 $4 = ($argc|0)>(1);
 L5: do {
  if ($4) {
   $i$010$i = 1;$version$011$i = 0;
   L6: while(1) {
    $5 = (($argv) + ($i$010$i<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(45);
    if (!($8)) {
     $i$2$i = $i$010$i;$version$2$i = $version$011$i;
     break L5;
    }
    $9 = (_strcmp($6,544)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     label = 7;
     break;
    }
    $14 = (_strcmp($6,88)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $i$2$i = $i$010$i;$version$2$i = $version$011$i;
     break L5;
    }
    $16 = (_strcmp($6,552)|0);
    $17 = ($16|0)==(0);
    do {
     if ($17) {
      $18 = HEAP32[96>>2]|0;
      $19 = (($18) + 1)|0;
      HEAP32[96>>2] = $19;
      $i$1$i = $i$010$i;$version$1$i = $version$011$i;
     } else {
      $20 = (_strcmp($6,560)|0);
      $21 = ($20|0)==(0);
      if ($21) {
       $22 = (($i$010$i) + 1)|0;
       $23 = (($argv) + ($22<<2)|0);
       $24 = HEAP32[$23>>2]|0;
       HEAP32[112>>2] = $24;
       $25 = ($24|0)==(0|0);
       if ($25) {
        label = 14;
        break L6;
       }
       $26 = HEAP8[$24>>0]|0;
       $27 = ($26<<24>>24)==(0);
       if ($27) {
        label = 14;
        break L6;
       }
       $28 = HEAP32[$23>>2]|0;
       $29 = (_strcmp($28,88)|0);
       $30 = ($29|0)==(0);
       if (!($30)) {
        $i$1$i = $22;$version$1$i = $version$011$i;
        break;
       }
       HEAP32[112>>2] = 0;
       $i$1$i = $22;$version$1$i = $version$011$i;
       break;
      }
      $31 = (_strcmp($6,592)|0);
      $32 = ($31|0)==(0);
      if ($32) {
       HEAP32[104>>2] = 0;
       $i$1$i = $i$010$i;$version$1$i = $version$011$i;
       break;
      }
      $33 = (_strcmp($6,600)|0);
      $34 = ($33|0)==(0);
      if ($34) {
       HEAP32[136>>2] = 1;
       $i$1$i = $i$010$i;$version$1$i = $version$011$i;
       break;
      }
      $35 = (_strcmp($6,608)|0);
      $36 = ($35|0)==(0);
      if (!($36)) {
       label = 23;
       break L6;
      }
      $37 = (($version$011$i) + 1)|0;
      $i$1$i = $i$010$i;$version$1$i = $37;
     }
    } while(0);
    $38 = (($i$1$i) + 1)|0;
    $39 = ($38|0)<($argc|0);
    if ($39) {
     $i$010$i = $38;$version$011$i = $version$1$i;
    } else {
     $i$2$i = $38;$version$2$i = $version$1$i;
     break L5;
    }
   }
   if ((label|0) == 7) {
    $11 = (($i$010$i) + 1)|0;
    $12 = ($version$011$i|0)==(0);
    $13 = (($version$011$i) + 1)|0;
    $version$0$$i = $12 ? 0 : $13;
    $i$2$i = $11;$version$2$i = $version$0$$i;
    break;
   }
   else if ((label|0) == 14) {
    _usage(568);
    // unreachable;
   }
   else if ((label|0) == 23) {
    _usage($6);
    // unreachable;
   }
  } else {
   $i$2$i = 1;$version$2$i = 0;
  }
 } while(0);
 $40 = ($i$2$i|0)==($argc|0);
 if ($40) {
  $41 = HEAP32[96>>2]|0;
  $42 = ($41|0)==(0);
  $43 = HEAP32[104>>2]|0;
  $44 = ($43|0)!=(0);
  $or$cond$i = $42 & $44;
  if ($or$cond$i) {
   $i$3$i = $argc;
  } else {
   HEAP32[104>>2] = 0;
   $45 = (($argc) + -1)|0;
   $46 = (($argv) + ($45<<2)|0);
   HEAP32[$46>>2] = 200;
   $i$3$i = $45;
  }
 } else {
  $i$3$i = $i$2$i;
 }
 $47 = ($version$2$i|0)==(0);
 if (!($47)) {
  HEAP32[$vararg_buffer>>2] = 624;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 640;
  (_printf((616|0),($vararg_buffer|0))|0);
  $48 = (($argc) + -1)|0;
  $49 = ($version$2$i|0)==($48|0);
  if ($49) {
   _exit(0);
   // unreachable;
  }
 }
 $50 = (($argc) - ($i$3$i))|0;
 $51 = (($argv) + ($i$3$i<<2)|0);
 $52 = ($50|0)<(1);
 if ($52) {
  _usage(8);
  // unreachable;
 }
 $53 = (_luaL_newstate()|0);
 $54 = ($53|0)==(0|0);
 if ($54) {
  _fatal(32);
  // unreachable;
 }
 HEAP32[$s>>2] = $50;
 $55 = (($s) + 4|0);
 HEAP32[$55>>2] = $51;
 $56 = (_lua_cpcall($53,2,$s)|0);
 $57 = ($56|0)==(0);
 if ($57) {
  _lua_close($53);
  STACKTOP = sp;return 0;
 } else {
  $58 = (_lua_tolstring($53,-1,0)|0);
  _fatal($58);
  // unreachable;
 }
 return 0|0;
}
function _usage($message) {
 $message = $message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$message>>0]|0;
 $1 = ($0<<24>>24)==(45);
 $2 = HEAP32[_stderr>>2]|0;
 $3 = HEAP32[184>>2]|0;
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $3;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $message;
  (_fprintf(($2|0),(232|0),($vararg_buffer|0))|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = $3;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $message;
  (_fprintf(($2|0),(224|0),($vararg_buffer2|0))|0);
 }
 $4 = HEAP32[184>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $4;
 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
 HEAP32[$vararg_ptr9>>2] = 200;
 (_fprintf(($2|0),(264|0),($vararg_buffer6|0))|0);
 _exit(1);
 // unreachable;
}
function _fatal($message) {
 $message = $message|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = HEAP32[184>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $message;
 (_fprintf(($0|0),(224|0),($vararg_buffer|0))|0);
 _exit(1);
 // unreachable;
}
function _pmain($L) {
 $L = $L|0;
 var $$ = 0, $$0$i = 0, $$pre$i = 0, $$pre4$i = 0, $$pre6$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $exitcond$i = 0, $i$01 = 0;
 var $i$02$i = 0, $pc$0$lcssa$i = 0, $pc$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_touserdata($L,1)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lua_checkstack($L,$1)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  _fatal(64);
  // unreachable;
 }
 $6 = ($1|0)>(0);
 if ($6) {
  $i$01 = 0;
  while(1) {
   $9 = (($3) + ($i$01<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_strcmp($10,88)|0);
   $12 = ($11|0)==(0);
   $$ = $12 ? 0 : $10;
   $13 = (_luaL_loadfile($L,$$)|0);
   $14 = ($13|0)==(0);
   $7 = (($i$01) + 1)|0;
   if (!($14)) {
    label = 6;
    break;
   }
   $8 = ($7|0)<($1|0);
   if ($8) {
    $i$01 = $7;
   } else {
    break;
   }
  }
  if ((label|0) == 6) {
   $15 = (_lua_tolstring($L,-1,0)|0);
   _fatal($15);
   // unreachable;
  }
  $16 = ($1|0)==(1);
  if ($16) {
   $17 = (($L) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + -16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $$0$i = $22;
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $23 = (_luaF_newproto($L)|0);
  $24 = (($L) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$25>>2] = $23;
  $26 = (($25) + 8|0);
  HEAP32[$26>>2] = 9;
  $27 = (($L) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$24>>2]|0;
  $30 = $28;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = ($32|0)<(17);
  if ($33) {
   _luaD_growstack($L,1);
   $$pre$i = HEAP32[$24>>2]|0;
   $35 = $$pre$i;
  } else {
   $35 = $29;
  }
  $34 = (($35) + 16|0);
  HEAP32[$24>>2] = $34;
  $36 = (_luaS_newlstr($L,216,7)|0);
  $37 = (($23) + 32|0);
  HEAP32[$37>>2] = $36;
  $38 = (($23) + 75|0);
  HEAP8[$38>>0] = 1;
  $39 = $1 << 1;
  $40 = $39 | 1;
  $41 = (($40) + 1)|0;
  $42 = ($41>>>0)<(1073741824);
  if ($42) {
   $43 = $40 << 2;
   $44 = (_luaM_realloc_($L,0,0,$43)|0);
   $47 = $44;
  } else {
   $45 = (_luaM_toobig($L)|0);
   $47 = $45;
  }
  $46 = (($23) + 12|0);
  HEAP32[$46>>2] = $47;
  $48 = (($23) + 44|0);
  HEAP32[$48>>2] = $40;
  $49 = (($1) + 1)|0;
  $50 = ($49>>>0)<(1073741824);
  if ($50) {
   $51 = $1 << 2;
   $52 = (_luaM_realloc_($L,0,0,$51)|0);
   $55 = $52;
  } else {
   $53 = (_luaM_toobig($L)|0);
   $55 = $53;
  }
  $54 = (($23) + 16|0);
  HEAP32[$54>>2] = $55;
  $56 = (($23) + 52|0);
  HEAP32[$56>>2] = $1;
  L25: do {
   if ($6) {
    $57 = $1 ^ -1;
    $65 = $55;$i$02$i = 0;$pc$01$i = 0;
    while(1) {
     $58 = HEAP32[$24>>2]|0;
     $59 = (($i$02$i) + ($57))|0;
     $60 = (($58) + ($59<<4)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($65) + ($i$02$i<<2)|0);
     HEAP32[$64>>2] = $63;
     $66 = $i$02$i << 14;
     $67 = $66 | 36;
     $68 = $pc$01$i | 1;
     $69 = HEAP32[$46>>2]|0;
     $70 = (($69) + ($pc$01$i<<2)|0);
     HEAP32[$70>>2] = $67;
     $71 = (($69) + ($68<<2)|0);
     HEAP32[$71>>2] = 8405020;
     $72 = (($i$02$i) + 1)|0;
     $exitcond$i = ($72|0)==($1|0);
     if ($exitcond$i) {
      $75 = $69;$pc$0$lcssa$i = $39;
      break L25;
     }
     $73 = (($pc$01$i) + 2)|0;
     $$pre6$i = HEAP32[$54>>2]|0;
     $65 = $$pre6$i;$i$02$i = $72;$pc$01$i = $73;
    }
   } else {
    $$pre4$i = HEAP32[$46>>2]|0;
    $75 = $$pre4$i;$pc$0$lcssa$i = 0;
   }
  } while(0);
  $74 = (($75) + ($pc$0$lcssa$i<<2)|0);
  HEAP32[$74>>2] = 8388638;
  $$0$i = $23;
 }
 $76 = HEAP32[96>>2]|0;
 $77 = ($76|0)==(0);
 if (!($77)) {
  $78 = ($76|0)>(1);
  $79 = $78&1;
  _luaU_print($$0$i,$79);
 }
 $80 = HEAP32[104>>2]|0;
 $81 = ($80|0)==(0);
 if ($81) {
  STACKTOP = sp;return 0;
 }
 $82 = HEAP32[112>>2]|0;
 $83 = ($82|0)==(0|0);
 if ($83) {
  $84 = HEAP32[_stdout>>2]|0;
  $86 = $84;
 } else {
  $85 = (_fopen(($82|0),(120|0))|0);
  $86 = $85;
 }
 $87 = ($86|0)==(0|0);
 if ($87) {
  _cannot(128);
  // unreachable;
 }
 $88 = HEAP32[136>>2]|0;
 (_luaU_dump($L,$$0$i,3,$86,$88)|0);
 $89 = (_ferror(($86|0))|0);
 $90 = ($89|0)==(0);
 if (!($90)) {
  _cannot(144);
  // unreachable;
 }
 $91 = (_fclose(($86|0))|0);
 $92 = ($91|0)==(0);
 if ($92) {
  STACKTOP = sp;return 0;
 } else {
  _cannot(152);
  // unreachable;
 }
 return 0|0;
}
function _cannot($what) {
 $what = $what|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = HEAP32[184>>2]|0;
 $2 = HEAP32[112>>2]|0;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_strerror(($4|0))|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $what;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $5;
 (_fprintf(($0|0),(160|0),($vararg_buffer|0))|0);
 _exit(1);
 // unreachable;
}
function _writer($L,$p,$size,$u) {
 $L = $L|0;
 $p = $p|0;
 $size = $size|0;
 $u = $u|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fwrite(($p|0),($size|0),1,($u|0))|0);
 $1 = ($size|0)!=(0);
 $not$ = ($0|0)!=(1);
 $$ = $1 & $not$;
 $2 = $$&1;
 STACKTOP = sp;return ($2|0);
}
function _luaU_print($f,$full) {
 $f = $f|0;
 $full = $full|0;
 var $$not$i = 0, $$not4$i = 0, $$not5$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i6 = 0, $exitcond$i9 = 0, $exitcond$i912 = 0, $f$idx$i = 0, $f$idx$val$i = 0, $f$idx$val$i2 = 0, $f$idx7$val$i = 0, $f$idx8$val$i = 0, $f$idx9$i = 0, $f$idx9$val$i = 0, $i$01$i = 0;
 var $i$01$i5 = 0, $i$011 = 0, $or$cond$i = 0, $or$cond$i7 = 0, $pc$011$i = 0, $pc$1$i = 0, $s$0$i = 0, $vararg_buffer = 0, $vararg_buffer104 = 0, $vararg_buffer108 = 0, $vararg_buffer112 = 0, $vararg_buffer17 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0;
 var $vararg_buffer48 = 0, $vararg_buffer52 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer78 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer98 = 0, $vararg_ptr1 = 0, $vararg_ptr101 = 0;
 var $vararg_ptr102 = 0, $vararg_ptr103 = 0, $vararg_ptr107 = 0, $vararg_ptr11 = 0, $vararg_ptr111 = 0, $vararg_ptr115 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr51 = 0, $vararg_ptr55 = 0, $vararg_ptr6 = 0, $vararg_ptr62 = 0, $vararg_ptr7 = 0, $vararg_ptr90 = 0, $vararg_ptr97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer112 = sp + 312|0;
 $vararg_buffer108 = sp + 304|0;
 $vararg_buffer104 = sp + 296|0;
 $vararg_buffer98 = sp + 280|0;
 $vararg_buffer94 = sp + 272|0;
 $vararg_buffer91 = sp + 264|0;
 $vararg_buffer87 = sp + 256|0;
 $vararg_buffer84 = sp + 248|0;
 $vararg_buffer81 = sp + 240|0;
 $vararg_buffer78 = sp + 232|0;
 $vararg_buffer75 = sp + 224|0;
 $vararg_buffer73 = sp + 216|0;
 $vararg_buffer71 = sp + 208|0;
 $vararg_buffer68 = sp + 200|0;
 $vararg_buffer65 = sp + 192|0;
 $vararg_buffer63 = sp + 184|0;
 $vararg_buffer59 = sp + 176|0;
 $vararg_buffer56 = sp + 168|0;
 $vararg_buffer52 = sp + 160|0;
 $vararg_buffer48 = sp + 152|0;
 $vararg_buffer45 = sp + 144|0;
 $vararg_buffer42 = sp + 136|0;
 $vararg_buffer39 = sp + 128|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer34 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer = sp;
 $0 = (($f) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 if ((($5<<24>>24) == 61) | (($5<<24>>24) == 64)) {
  $6 = (($4) + 1|0);
  $s$0$i = $6;
 } else if ((($5<<24>>24) == 27)) {
  $s$0$i = 1024;
 } else {
  $s$0$i = 1040;
 }
 $7 = (($f) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $10 = $9 ? 1112 : 1120;
 $11 = (($f) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($f) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(1);
 $16 = $15 ? 1136 : 1144;
 $17 = $14 << 2;
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $s$0$i;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $12;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $14;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $16;
 $vararg_ptr6 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $17;
 $vararg_ptr7 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $f;
 (_printf((1056|0),($vararg_buffer|0))|0);
 $18 = (($f) + 73|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($f) + 74|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)!=(0);
 $24 = $23 ? 1192 : 1136;
 $25 = ($19<<24>>24)==(1);
 $26 = $25 ? 1136 : 1144;
 $27 = (($f) + 75|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = ($28<<24>>24)==(1);
 $31 = $30 ? 1136 : 1144;
 $32 = (($f) + 72|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = ($33<<24>>24)==(1);
 $36 = $35 ? 1136 : 1144;
 HEAP32[$vararg_buffer8>>2] = $20;
 $vararg_ptr11 = (($vararg_buffer8) + 4|0);
 HEAP32[$vararg_ptr11>>2] = $24;
 $vararg_ptr12 = (($vararg_buffer8) + 8|0);
 HEAP32[$vararg_ptr12>>2] = $26;
 $vararg_ptr13 = (($vararg_buffer8) + 12|0);
 HEAP32[$vararg_ptr13>>2] = $29;
 $vararg_ptr14 = (($vararg_buffer8) + 16|0);
 HEAP32[$vararg_ptr14>>2] = $31;
 $vararg_ptr15 = (($vararg_buffer8) + 20|0);
 HEAP32[$vararg_ptr15>>2] = $34;
 $vararg_ptr16 = (($vararg_buffer8) + 24|0);
 HEAP32[$vararg_ptr16>>2] = $36;
 (_printf((1152|0),($vararg_buffer8|0))|0);
 $37 = (($f) + 56|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(1);
 $40 = $39 ? 1136 : 1144;
 $41 = (($f) + 40|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(1);
 $44 = $43 ? 1136 : 1144;
 $45 = HEAP32[$0>>2]|0;
 $46 = ($45|0)==(1);
 $47 = $46 ? 1136 : 1144;
 HEAP32[$vararg_buffer17>>2] = $38;
 $vararg_ptr20 = (($vararg_buffer17) + 4|0);
 HEAP32[$vararg_ptr20>>2] = $40;
 $vararg_ptr21 = (($vararg_buffer17) + 8|0);
 HEAP32[$vararg_ptr21>>2] = $42;
 $vararg_ptr22 = (($vararg_buffer17) + 12|0);
 HEAP32[$vararg_ptr22>>2] = $44;
 $vararg_ptr23 = (($vararg_buffer17) + 16|0);
 HEAP32[$vararg_ptr23>>2] = $45;
 $vararg_ptr24 = (($vararg_buffer17) + 20|0);
 HEAP32[$vararg_ptr24>>2] = $47;
 (_printf((1200|0),($vararg_buffer17|0))|0);
 $48 = (($f) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$13>>2]|0;
 $51 = ($50|0)>(0);
 if ($51) {
  $52 = (($f) + 20|0);
  $f$idx9$i = (($f) + 8|0);
  $53 = (($f) + 36|0);
  $54 = (($f) + 28|0);
  $55 = (($f) + 16|0);
  $pc$011$i = 0;
  while(1) {
   $56 = (($49) + ($pc$011$i<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & 63;
   $59 = $57 >>> 6;
   $60 = $59 & 255;
   $61 = $57 >>> 23;
   $62 = $57 >>> 14;
   $63 = $62 & 511;
   $64 = (($62) + -131071)|0;
   $65 = HEAP32[$52>>2]|0;
   $66 = ($65|0)==(0|0);
   if ($66) {
    $67 = (($pc$011$i) + 1)|0;
    HEAP32[$vararg_buffer25>>2] = $67;
    (_printf((784|0),($vararg_buffer25|0))|0);
    $162 = $67;
    label = 10;
   } else {
    $68 = (($65) + ($pc$011$i<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($pc$011$i) + 1)|0;
    HEAP32[$vararg_buffer28>>2] = $70;
    (_printf((784|0),($vararg_buffer28|0))|0);
    $71 = ($69|0)>(0);
    if ($71) {
     HEAP32[$vararg_buffer31>>2] = $69;
     (_printf((920|0),($vararg_buffer31|0))|0);
     $121 = $70;
    } else {
     $162 = $70;
     label = 10;
    }
   }
   if ((label|0) == 10) {
    label = 0;
    (_printf((928|0),($vararg_buffer34|0))|0);
    $121 = $162;
   }
   $72 = (2368 + ($58<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   HEAP32[$vararg_buffer36>>2] = $73;
   (_printf((936|0),($vararg_buffer36|0))|0);
   $74 = (2528 + ($58)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $76 & 3;
   do {
    if ((($77|0) == 0)) {
     HEAP32[$vararg_buffer39>>2] = $60;
     (_printf((944|0),($vararg_buffer39|0))|0);
     $78 = $75 & 48;
     $79 = ($78<<24>>24)==(0);
     if (!($79)) {
      $80 = $61 & 256;
      $81 = ($80|0)==(0);
      if ($81) {
       $83 = $61;
      } else {
       $$not4$i = $61 | -256;
       $82 = $$not4$i ^ 255;
       $83 = $82;
      }
      HEAP32[$vararg_buffer42>>2] = $83;
      (_printf((952|0),($vararg_buffer42|0))|0);
     }
     $84 = $75 & 12;
     $85 = ($84<<24>>24)==(0);
     if ($85) {
      label = 26;
     } else {
      $86 = $62 & 256;
      $87 = ($86|0)==(0);
      if ($87) {
       $89 = $63;
      } else {
       $$not$i = $62 | -256;
       $88 = $$not$i ^ 255;
       $89 = $88;
      }
      HEAP32[$vararg_buffer45>>2] = $89;
      (_printf((952|0),($vararg_buffer45|0))|0);
      label = 26;
     }
    } else if ((($77|0) == 1)) {
     $90 = $76 & 48;
     $91 = ($90|0)==(48);
     if ($91) {
      $92 = $62 ^ -1;
      HEAP32[$vararg_buffer48>>2] = $60;
      $vararg_ptr51 = (($vararg_buffer48) + 4|0);
      HEAP32[$vararg_ptr51>>2] = $92;
      (_printf((960|0),($vararg_buffer48|0))|0);
      label = 26;
      break;
     } else {
      HEAP32[$vararg_buffer52>>2] = $60;
      $vararg_ptr55 = (($vararg_buffer52) + 4|0);
      HEAP32[$vararg_ptr55>>2] = $62;
      (_printf((960|0),($vararg_buffer52|0))|0);
      label = 26;
      break;
     }
    } else if ((($77|0) == 2)) {
     $93 = ($58|0)==(22);
     if ($93) {
      HEAP32[$vararg_buffer56>>2] = $64;
      (_printf((944|0),($vararg_buffer56|0))|0);
      label = 41;
      break;
     } else {
      HEAP32[$vararg_buffer59>>2] = $60;
      $vararg_ptr62 = (($vararg_buffer59) + 4|0);
      HEAP32[$vararg_ptr62>>2] = $64;
      (_printf((960|0),($vararg_buffer59|0))|0);
      label = 26;
      break;
     }
    } else {
     label = 26;
    }
   } while(0);
   L36: do {
    if ((label|0) == 26) {
     label = 0;
     switch ($58|0) {
     case 1:  {
      (_printf((968|0),($vararg_buffer63|0))|0);
      $f$idx9$val$i = HEAP32[$f$idx9$i>>2]|0;
      _PrintConstant($f$idx9$val$i,$62);
      $pc$1$i = $pc$011$i;
      break L36;
      break;
     }
     case 8: case 4:  {
      $94 = HEAP32[$53>>2]|0;
      $95 = ($94|0)>(0);
      if ($95) {
       $96 = HEAP32[$54>>2]|0;
       $97 = (($96) + ($61<<2)|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($98) + 16|0);
       $100 = $99;
      } else {
       $100 = 984;
      }
      HEAP32[$vararg_buffer65>>2] = $100;
      (_printf((976|0),($vararg_buffer65|0))|0);
      $pc$1$i = $pc$011$i;
      break L36;
      break;
     }
     case 11: case 6:  {
      $105 = $62 & 256;
      $106 = ($105|0)==(0);
      if ($106) {
       $pc$1$i = $pc$011$i;
       break L36;
      }
      (_printf((968|0),($vararg_buffer71|0))|0);
      $107 = $62 & 255;
      $f$idx8$val$i = HEAP32[$f$idx9$i>>2]|0;
      _PrintConstant($f$idx8$val$i,$107);
      $pc$1$i = $pc$011$i;
      break L36;
      break;
     }
     case 7: case 5:  {
      $101 = HEAP32[$f$idx9$i>>2]|0;
      $102 = (($101) + ($62<<4)|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($103) + 16|0);
      HEAP32[$vararg_buffer68>>2] = $104;
      (_printf((976|0),($vararg_buffer68|0))|0);
      $pc$1$i = $pc$011$i;
      break L36;
      break;
     }
     case 25: case 24: case 23: case 17: case 15: case 14: case 13: case 12: case 9:  {
      $108 = $61 & 256;
      $109 = ($108|0)!=(0);
      $$not5$i = $109 ^ 1;
      $110 = $62 & 256;
      $111 = ($110|0)==(0);
      $or$cond$i = $111 & $$not5$i;
      if ($or$cond$i) {
       $pc$1$i = $pc$011$i;
       break L36;
      }
      (_printf((968|0),($vararg_buffer73|0))|0);
      if ($109) {
       $112 = $61 & 255;
       $f$idx7$val$i = HEAP32[$f$idx9$i>>2]|0;
       _PrintConstant($f$idx7$val$i,$112);
      } else {
       (_putchar(45)|0);
      }
      (_putchar(32)|0);
      if ($111) {
       (_putchar(45)|0);
       $pc$1$i = $pc$011$i;
       break L36;
      } else {
       $113 = $62 & 255;
       $f$idx$val$i = HEAP32[$f$idx9$i>>2]|0;
       _PrintConstant($f$idx$val$i,$113);
       $pc$1$i = $pc$011$i;
       break L36;
      }
      break;
     }
     case 32: case 31: case 22:  {
      label = 41;
      break L36;
      break;
     }
     case 34:  {
      $119 = ($63|0)==(0);
      if ($119) {
       $120 = (($49) + ($121<<2)|0);
       $122 = HEAP32[$120>>2]|0;
       HEAP32[$vararg_buffer81>>2] = $122;
       (_printf((1016|0),($vararg_buffer81|0))|0);
       $pc$1$i = $121;
       break L36;
      } else {
       HEAP32[$vararg_buffer84>>2] = $63;
       (_printf((1016|0),($vararg_buffer84|0))|0);
       $pc$1$i = $pc$011$i;
       break L36;
      }
      break;
     }
     case 36:  {
      $116 = HEAP32[$55>>2]|0;
      $117 = (($116) + ($62<<2)|0);
      $118 = HEAP32[$117>>2]|0;
      HEAP32[$vararg_buffer78>>2] = $118;
      (_printf((1008|0),($vararg_buffer78|0))|0);
      $pc$1$i = $pc$011$i;
      break L36;
      break;
     }
     default: {
      $pc$1$i = $pc$011$i;
      break L36;
     }
     }
    }
   } while(0);
   if ((label|0) == 41) {
    label = 0;
    $114 = (($pc$011$i) + 2)|0;
    $115 = (($114) + ($64))|0;
    HEAP32[$vararg_buffer75>>2] = $115;
    (_printf((992|0),($vararg_buffer75|0))|0);
    $pc$1$i = $pc$011$i;
   }
   (_putchar(10)|0);
   $123 = (($pc$1$i) + 1)|0;
   $124 = ($123|0)<($50|0);
   if ($124) {
    $pc$011$i = $123;
   } else {
    break;
   }
  }
 }
 $125 = ($full|0)==(0);
 if (!($125)) {
  $126 = HEAP32[$41>>2]|0;
  HEAP32[$vararg_buffer87>>2] = $126;
  $vararg_ptr90 = (($vararg_buffer87) + 4|0);
  HEAP32[$vararg_ptr90>>2] = $f;
  (_printf((760|0),($vararg_buffer87|0))|0);
  $127 = ($126|0)>(0);
  if ($127) {
   $f$idx$i = (($f) + 8|0);
   $i$01$i = 0;
   while(1) {
    $128 = (($i$01$i) + 1)|0;
    HEAP32[$vararg_buffer91>>2] = $128;
    (_printf((784|0),($vararg_buffer91|0))|0);
    $f$idx$val$i2 = HEAP32[$f$idx$i>>2]|0;
    _PrintConstant($f$idx$val$i2,$i$01$i);
    (_putchar(10)|0);
    $exitcond$i = ($128|0)==($126|0);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i = $128;
    }
   }
  }
  $129 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer94>>2] = $129;
  $vararg_ptr97 = (($vararg_buffer94) + 4|0);
  HEAP32[$vararg_ptr97>>2] = $f;
  (_printf((720|0),($vararg_buffer94|0))|0);
  $130 = ($129|0)>(0);
  if ($130) {
   $131 = (($f) + 24|0);
   $i$01$i5 = 0;
   while(1) {
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + (($i$01$i5*12)|0)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + 16|0);
    $136 = ((($132) + (($i$01$i5*12)|0)|0) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + 1)|0;
    $139 = ((($132) + (($i$01$i5*12)|0)|0) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($140) + 1)|0;
    HEAP32[$vararg_buffer98>>2] = $i$01$i5;
    $vararg_ptr101 = (($vararg_buffer98) + 4|0);
    HEAP32[$vararg_ptr101>>2] = $135;
    $vararg_ptr102 = (($vararg_buffer98) + 8|0);
    HEAP32[$vararg_ptr102>>2] = $138;
    $vararg_ptr103 = (($vararg_buffer98) + 12|0);
    HEAP32[$vararg_ptr103>>2] = $141;
    (_printf((744|0),($vararg_buffer98|0))|0);
    $142 = (($i$01$i5) + 1)|0;
    $exitcond$i6 = ($142|0)==($129|0);
    if ($exitcond$i6) {
     break;
    } else {
     $i$01$i5 = $142;
    }
   }
  }
  $143 = (($f) + 36|0);
  $144 = HEAP32[$143>>2]|0;
  HEAP32[$vararg_buffer104>>2] = $144;
  $vararg_ptr107 = (($vararg_buffer104) + 4|0);
  HEAP32[$vararg_ptr107>>2] = $f;
  (_printf((688|0),($vararg_buffer104|0))|0);
  $145 = (($f) + 28|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($146|0)!=(0|0);
  $148 = ($144|0)>(0);
  $or$cond$i7 = $147 & $148;
  if ($or$cond$i7) {
   $149 = HEAP32[$146>>2]|0;
   $150 = (($149) + 16|0);
   HEAP32[$vararg_buffer108>>2] = 0;
   $vararg_ptr111 = (($vararg_buffer108) + 4|0);
   HEAP32[$vararg_ptr111>>2] = $150;
   (_printf((712|0),($vararg_buffer108|0))|0);
   $exitcond$i912 = ($144|0)==(1);
   if (!($exitcond$i912)) {
    $154 = 1;
    while(1) {
     $$pre$i = HEAP32[$145>>2]|0;
     $153 = (($$pre$i) + ($154<<2)|0);
     $155 = HEAP32[$153>>2]|0;
     $156 = (($155) + 16|0);
     HEAP32[$vararg_buffer112>>2] = $154;
     $vararg_ptr115 = (($vararg_buffer112) + 4|0);
     HEAP32[$vararg_ptr115>>2] = $156;
     (_printf((712|0),($vararg_buffer112|0))|0);
     $157 = (($154) + 1)|0;
     $exitcond$i9 = ($157|0)==($144|0);
     if ($exitcond$i9) {
      break;
     } else {
      $154 = $157;
     }
    }
   }
  }
 }
 $151 = ($1|0)>(0);
 if (!($151)) {
  STACKTOP = sp;return;
 }
 $152 = (($f) + 16|0);
 $i$011 = 0;
 while(1) {
  $158 = HEAP32[$152>>2]|0;
  $159 = (($158) + ($i$011<<2)|0);
  $160 = HEAP32[$159>>2]|0;
  _luaU_print($160,$full);
  $161 = (($i$011) + 1)|0;
  $exitcond = ($161|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $i$011 = $161;
  }
 }
 STACKTOP = sp;return;
}
function _PrintConstant($f$0$3$val,$i) {
 $f$0$3$val = $f$0$3$val|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0;
 var $i$01$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($f$0$3$val) + ($i<<4)|0);
 $1 = ((($f$0$3$val) + ($i<<4)|0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 4)) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 16|0);
  $9 = (($7) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  (_putchar(34)|0);
  $11 = ($10|0)==(0);
  L3: do {
   if (!($11)) {
    $i$01$i = 0;
    while(1) {
     $12 = (($8) + ($i$01$i)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13 << 24 >> 24;
     L6: do {
      switch ($14|0) {
      case 34:  {
       (_printf((840|0),($vararg_buffer5|0))|0);
       break;
      }
      case 92:  {
       (_printf((848|0),($vararg_buffer7|0))|0);
       break;
      }
      case 7:  {
       (_printf((856|0),($vararg_buffer9|0))|0);
       break;
      }
      case 8:  {
       (_printf((864|0),($vararg_buffer11|0))|0);
       break;
      }
      case 12:  {
       (_printf((872|0),($vararg_buffer13|0))|0);
       break;
      }
      case 10:  {
       (_printf((880|0),($vararg_buffer15|0))|0);
       break;
      }
      case 13:  {
       (_printf((888|0),($vararg_buffer17|0))|0);
       break;
      }
      case 9:  {
       (_printf((896|0),($vararg_buffer19|0))|0);
       break;
      }
      case 11:  {
       (_printf((904|0),($vararg_buffer21|0))|0);
       break;
      }
      default: {
       $15 = $13&255;
       $16 = (_isprint($15)|0);
       $17 = ($16|0)==(0);
       if ($17) {
        HEAP32[$vararg_buffer23>>2] = $15;
        (_printf((912|0),($vararg_buffer23|0))|0);
        break L6;
       } else {
        (_putchar(($14|0))|0);
        break L6;
       }
      }
      }
     } while(0);
     $18 = (($i$01$i) + 1)|0;
     $exitcond$i = ($18|0)==($10|0);
     if ($exitcond$i) {
      break L3;
     } else {
      $i$01$i = $18;
     }
    }
   }
  } while(0);
  (_putchar(34)|0);
  STACKTOP = sp;return;
 } else if ((($2|0) == 1)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)!=(0);
  $5 = $4 ? 800 : 808;
  (_printf(($5|0),($vararg_buffer1|0))|0);
  STACKTOP = sp;return;
 } else if ((($2|0) == 3)) {
  $6 = +HEAPF64[$0>>3];
  HEAPF64[tempDoublePtr>>3]=$6;HEAP32[$vararg_buffer3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer3+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((816|0),($vararg_buffer3|0))|0);
  STACKTOP = sp;return;
 } else if ((($2|0) == 0)) {
  (_printf((792|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer26>>2] = $2;
  (_printf((824|0),($vararg_buffer26|0))|0);
  STACKTOP = sp;return;
 }
}
function _lua_checkstack($L,$size) {
 $L = $L|0;
 $size = $size|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)>(8000);
 if ($0) {
  $res$0 = 0;
 } else {
  $1 = (($L) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($L) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($5) - ($6))|0;
  $8 = $7 >> 4;
  $9 = (($8) + ($size))|0;
  $10 = ($9|0)>(8000);
  if ($10) {
   $res$0 = 0;
  } else {
   $11 = ($size|0)>(0);
   if ($11) {
    $12 = (($L) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($14) - ($5))|0;
    $16 = $size << 4;
    $17 = ($15|0)>($16|0);
    if ($17) {
     $23 = $2;
    } else {
     _luaD_growstack($L,$size);
     $$pre = HEAP32[$1>>2]|0;
     $23 = $$pre;
    }
    $18 = (($L) + 20|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($23) + ($size<<4)|0);
    $24 = ($21>>>0)<($22>>>0);
    if ($24) {
     HEAP32[$20>>2] = $22;
     $res$0 = 1;
    } else {
     $res$0 = 1;
    }
   } else {
    $res$0 = 1;
   }
  }
 }
 STACKTOP = sp;return ($res$0|0);
}
function _lua_atpanic($L,$panicf) {
 $L = $L|0;
 $panicf = $panicf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = $panicf;
 STACKTOP = sp;return ($3|0);
}
function _lua_gettop($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 STACKTOP = sp;return ($7|0);
}
function _lua_settop($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $scevgep4 = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)>(-1);
 if (!($0)) {
  $16 = (($idx) + 1)|0;
  $17 = (($L) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<4)|0);
  HEAP32[$17>>2] = $19;
  STACKTOP = sp;return;
 }
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($L) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($idx<<4)|0);
 $6 = ($2>>>0)<($5>>>0);
 if ($6) {
  $7 = $2;
  $scevgep4 = (($2) + 16|0);
  $8 = ($5>>>0)>($scevgep4>>>0);
  $umax = $8 ? $5 : $scevgep4;
  $9 = $7 ^ -1;
  $uglygep = (($umax) + ($9)|0);
  $uglygep6 = $uglygep;
  $10 = $uglygep6 >>> 4;
  $11 = (($10) + 1)|0;
  $13 = $2;
  while(1) {
   $12 = (($13) + 16|0);
   $14 = (($13) + 8|0);
   HEAP32[$14>>2] = 0;
   $15 = ($12>>>0)<($5>>>0);
   if ($15) {
    $13 = $12;
   } else {
    break;
   }
  }
  $scevgep7 = (($2) + ($11<<4)|0);
  HEAP32[$1>>2] = $scevgep7;
 }
 HEAP32[$1>>2] = $5;
 STACKTOP = sp;return;
}
function _lua_remove($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$lcssa1 = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p$0$ph = 0, $p$02 = 0, $p$02$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)>(0);
 do {
  if ($0) {
   $1 = (($L) + 12|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($idx) + -1)|0;
   $4 = (($2) + ($3<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 1648;
   $p$0$ph = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)>(-10000);
   if ($8) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $p$0$ph = $11;
    break;
   }
   if ((($idx|0) == -10002)) {
    $24 = (($L) + 72|0);
    $p$0$ph = $24;
    break;
   } else if ((($idx|0) == -10001)) {
    $15 = (($L) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($L) + 88|0);
    $21 = (($19) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$20>>2] = $22;
    $23 = (($L) + 96|0);
    HEAP32[$23>>2] = 5;
    $p$0$ph = $20;
    break;
   } else if ((($idx|0) == -10000)) {
    $12 = (($L) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 96|0);
    $p$0$ph = $14;
    break;
   } else {
    $25 = (($L) + 20|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = (-10002 - ($idx))|0;
    $31 = (($29) + 7|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($30|0)>($33|0);
    if ($34) {
     $p$0$ph = 1648;
     break;
    }
    $35 = (($30) + -1)|0;
    $36 = (($29) + 24|0);
    $37 = (($36) + ($35<<4)|0);
    $p$0$ph = $37;
    break;
   }
  }
 } while(0);
 $38 = (($p$0$ph) + 16|0);
 $39 = (($L) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($38>>>0)<($40>>>0);
 if ($41) {
  $42 = $38;$p$02 = $p$0$ph;
 } else {
  $$lcssa1 = $40;
  $59 = (($$lcssa1) + -16|0);
  HEAP32[$39>>2] = $59;
  STACKTOP = sp;return;
 }
 while(1) {
  $43 = $42;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + 4)|0;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = $p$02;
  $50 = $49;
  HEAP32[$50>>2] = $45;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
  $53 = (($p$02) + 24|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($p$02) + 8|0);
  HEAP32[$55>>2] = $54;
  $56 = (($42) + 16|0);
  $57 = HEAP32[$39>>2]|0;
  $58 = ($56>>>0)<($57>>>0);
  if ($58) {
   $p$02$phi = $42;$42 = $56;$p$02 = $p$02$phi;
  } else {
   $$lcssa1 = $57;
   break;
  }
 }
 $59 = (($$lcssa1) + -16|0);
 HEAP32[$39>>2] = $59;
 STACKTOP = sp;return;
}
function _lua_tolstring($L,$idx,$len) {
 $L = $L|0;
 $idx = $idx|0;
 $len = $len|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $o$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)>(0);
 do {
  if ($0) {
   $1 = (($L) + 12|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($idx) + -1)|0;
   $4 = (($2) + ($3<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 1648;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)>(-10000);
   if ($8) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   if ((($idx|0) == -10002)) {
    $24 = (($L) + 72|0);
    $$0$i = $24;
    break;
   } else if ((($idx|0) == -10001)) {
    $15 = (($L) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($L) + 88|0);
    $21 = (($19) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$20>>2] = $22;
    $23 = (($L) + 96|0);
    HEAP32[$23>>2] = 5;
    $$0$i = $20;
    break;
   } else if ((($idx|0) == -10000)) {
    $12 = (($L) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 96|0);
    $$0$i = $14;
    break;
   } else {
    $25 = (($L) + 20|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = (-10002 - ($idx))|0;
    $31 = (($29) + 7|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($30|0)>($33|0);
    if ($34) {
     $$0$i = 1648;
     break;
    }
    $35 = (($30) + -1)|0;
    $36 = (($29) + 24|0);
    $37 = (($36) + ($35<<4)|0);
    $$0$i = $37;
    break;
   }
  }
 } while(0);
 $38 = (($$0$i) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(4);
 do {
  if ($40) {
   $o$0 = $$0$i;
  } else {
   $41 = (_luaV_tostring($L,$$0$i)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = ($len|0)==(0|0);
    if ($43) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    HEAP32[$len>>2] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $44 = (($L) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 68|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 64|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($47>>>0)<($49>>>0);
   if (!($50)) {
    _luaC_step($L);
   }
   if ($0) {
    $51 = (($L) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($idx) + -1)|0;
    $54 = (($52) + ($53<<4)|0);
    $55 = (($L) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($54>>>0)<($56>>>0);
    $$luaO_nilobject_$i1 = $57 ? $54 : 1648;
    $o$0 = $$luaO_nilobject_$i1;
    break;
   }
   $58 = ($idx|0)>(-10000);
   if ($58) {
    $59 = (($L) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($idx<<4)|0);
    $o$0 = $61;
    break;
   }
   if ((($idx|0) == -10000)) {
    $62 = HEAP32[$44>>2]|0;
    $63 = (($62) + 96|0);
    $o$0 = $63;
    break;
   } else if ((($idx|0) == -10002)) {
    $73 = (($L) + 72|0);
    $o$0 = $73;
    break;
   } else if ((($idx|0) == -10001)) {
    $64 = (($L) + 20|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($L) + 88|0);
    $70 = (($68) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    HEAP32[$69>>2] = $71;
    $72 = (($L) + 96|0);
    HEAP32[$72>>2] = 5;
    $o$0 = $69;
    break;
   } else {
    $74 = (($L) + 20|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP32[$77>>2]|0;
    $79 = (-10002 - ($idx))|0;
    $80 = (($78) + 7|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = ($79|0)>($82|0);
    if ($83) {
     $o$0 = 1648;
     break;
    }
    $84 = (($79) + -1)|0;
    $85 = (($78) + 24|0);
    $86 = (($85) + ($84<<4)|0);
    $o$0 = $86;
    break;
   }
  }
 } while(0);
 $87 = ($len|0)==(0|0);
 $$pre = HEAP32[$o$0>>2]|0;
 if (!($87)) {
  $88 = (($$pre) + 12|0);
  $89 = HEAP32[$88>>2]|0;
  HEAP32[$len>>2] = $89;
 }
 $90 = (($$pre) + 16|0);
 $$0 = $90;
 STACKTOP = sp;return ($$0|0);
}
function _lua_touserdata($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)>(0);
 do {
  if ($0) {
   $1 = (($L) + 12|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($idx) + -1)|0;
   $4 = (($2) + ($3<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 1648;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)>(-10000);
   if ($8) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   if ((($idx|0) == -10000)) {
    $12 = (($L) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 96|0);
    $$0$i = $14;
    break;
   } else if ((($idx|0) == -10002)) {
    $24 = (($L) + 72|0);
    $$0$i = $24;
    break;
   } else if ((($idx|0) == -10001)) {
    $15 = (($L) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($L) + 88|0);
    $21 = (($19) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$20>>2] = $22;
    $23 = (($L) + 96|0);
    HEAP32[$23>>2] = 5;
    $$0$i = $20;
    break;
   } else {
    $25 = (($L) + 20|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = (-10002 - ($idx))|0;
    $31 = (($29) + 7|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($30|0)>($33|0);
    if ($34) {
     $$0$i = 1648;
     break;
    }
    $35 = (($30) + -1)|0;
    $36 = (($29) + 24|0);
    $37 = (($36) + ($35<<4)|0);
    $$0$i = $37;
    break;
   }
  }
 } while(0);
 $38 = (($$0$i) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 if ((($39|0) == 7)) {
  $40 = HEAP32[$$0$i>>2]|0;
  $41 = (($40) + 24|0);
  $$0 = $41;
  STACKTOP = sp;return ($$0|0);
 } else if ((($39|0) == 2)) {
  $42 = HEAP32[$$0$i>>2]|0;
  $$0 = $42;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _lua_pushlstring($L,$s,$len) {
 $L = $L|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if (!($6)) {
  _luaC_step($L);
 }
 $7 = (($L) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_luaS_newlstr($L,$s,$len)|0);
 HEAP32[$8>>2] = $9;
 $10 = (($8) + 8|0);
 HEAP32[$10>>2] = 4;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + 16|0);
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return;
}
function _lua_pushfstring($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argp = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if (!($6)) {
  _luaC_step($L);
 }
 HEAP32[$argp>>2] = $varargs;
 $7 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($7|0);
}
function _lua_cpcall($L,$func,$ud) {
 $L = $L|0;
 $func = $func|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 HEAP32[$c>>2] = $func;
 $0 = (($c) + 4|0);
 HEAP32[$0>>2] = $ud;
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($L) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (_luaD_pcall($L,4,$c,$7,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _lua_load($L,$reader,$data,$chunkname) {
 $L = $L|0;
 $reader = $reader|0;
 $data = $data|0;
 $chunkname = $chunkname|0;
 var $0 = 0, $1 = 0, $chunkname$ = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $z = sp;
 $0 = ($chunkname|0)!=(0|0);
 $chunkname$ = $0 ? $chunkname : 1248;
 _luaZ_init($L,$z,$reader,$data);
 $1 = (_luaD_protectedparser($L,$z,$chunkname$)|0);
 STACKTOP = sp;return ($1|0);
}
function _f_Ccall($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $5 = (($L) + 72|0);
  $6 = HEAP32[$5>>2]|0;
  $$0$i = $6;
 } else {
  $7 = (($1) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $$0$i = $11;
 }
 $12 = (_luaF_newCclosure($L,0,$$0$i)|0);
 $13 = HEAP32[$ud>>2]|0;
 $14 = (($12) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = (($L) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$16>>2] = $12;
 $17 = (($16) + 8|0);
 HEAP32[$17>>2] = 6;
 $18 = HEAP32[$15>>2]|0;
 $19 = (($18) + 16|0);
 HEAP32[$15>>2] = $19;
 $20 = (($ud) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $21;
 $22 = (($18) + 24|0);
 HEAP32[$22>>2] = 2;
 $23 = HEAP32[$15>>2]|0;
 $24 = (($23) + 16|0);
 HEAP32[$15>>2] = $24;
 $25 = (($23) + -16|0);
 _luaD_call($L,$25,0);
 STACKTOP = sp;return;
}
function _luaG_checkcode($pt) {
 $pt = $pt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pt) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_symbexec($pt,$1,255)|0);
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _luaG_typeerror($L,$o,$op) {
 $L = $L|0;
 $o = $o|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $name = 0, $p$01$i = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $name = sp + 24|0;
 HEAP32[$name>>2] = 0;
 $0 = (($o) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (3512 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($L) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($5) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 L1: do {
  if ($9) {
   $p$01$i = $6;
   while(1) {
    $12 = ($p$01$i|0)==($o|0);
    $10 = (($p$01$i) + 16|0);
    if ($12) {
     break;
    }
    $11 = ($10>>>0)<($8>>>0);
    if ($11) {
     $p$01$i = $10;
    } else {
     break L1;
    }
   }
   $13 = (($L) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $o;
   $16 = $14;
   $17 = (($15) - ($16))|0;
   $18 = $17 >> 4;
   $19 = (_getobjname($L,$5,$18,$name)|0);
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = HEAP32[$name>>2]|0;
    HEAP32[$vararg_buffer>>2] = $op;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $19;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $21;
    $vararg_ptr3 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $3;
    _luaG_runerror($L,1256,$vararg_buffer);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer4>>2] = $op;
 $vararg_ptr7 = (($vararg_buffer4) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $3;
 _luaG_runerror($L,1296,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _luaG_runerror($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $$0$i$i = 0, $$pre1$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argp = 0, $buff$i = 0, $phitmp$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buff$i = sp + 32|0;
 $argp = sp + 16|0;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 $1 = (($L) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(6);
 if (!($7)) {
  _luaG_errormsg($L);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$4>>2]|0;
 $9 = (($8) + 6|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  _luaG_errormsg($L);
  STACKTOP = sp;return;
 }
 $12 = (($L) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($2) + 12|0);
 HEAP32[$14>>2] = $13;
 $$pre1$i$i$i = HEAP32[$4>>2]|0;
 $phitmp$i = $13;
 $15 = (($$pre1$i$i$i) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = (($phitmp$i) - ($19))|0;
 $21 = $20 >> 2;
 $22 = (($21) + -1)|0;
 $23 = ($20|0)<(4);
 if ($23) {
  $$0$i$i = -1;
 } else {
  $24 = (($16) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   $$0$i$i = 0;
  } else {
   $27 = (($25) + ($22<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $$0$i$i = $28;
  }
 }
 $29 = (($16) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 16|0);
 _luaO_chunkid($buff$i,$31,60);
 HEAP32[$vararg_buffer>>2] = $buff$i;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$0$i$i;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 (_luaO_pushfstring($L,1440,$vararg_buffer)|0);
 _luaG_errormsg($L);
 STACKTOP = sp;return;
}
function _luaG_concaterror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name$i = 0, $p$01$i$i = 0, $p2$p1 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $name$i = sp + 24|0;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -3)|0;
 $switch = ($$off>>>0)<(2);
 $p2$p1 = $switch ? $p2 : $p1;
 HEAP32[$name$i>>2] = 0;
 $2 = (($p2$p1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (3512 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($L) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($7) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 L1: do {
  if ($11) {
   $p$01$i$i = $8;
   while(1) {
    $14 = ($p$01$i$i|0)==($p2$p1|0);
    $12 = (($p$01$i$i) + 16|0);
    if ($14) {
     break;
    }
    $13 = ($12>>>0)<($10>>>0);
    if ($13) {
     $p$01$i$i = $12;
    } else {
     break L1;
    }
   }
   $15 = (($L) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $p2$p1;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 4;
   $21 = (_getobjname($L,$7,$20,$name$i)|0);
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $23 = HEAP32[$name$i>>2]|0;
    HEAP32[$vararg_buffer>>2] = 1328;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $21;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $23;
    $vararg_ptr3 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $5;
    _luaG_runerror($L,1256,$vararg_buffer);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer4>>2] = 1328;
 $vararg_ptr7 = (($vararg_buffer4) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $5;
 _luaG_runerror($L,1296,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _luaG_aritherror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name$i = 0, $p$01$i$i = 0, $p1$p2 = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $name$i = sp + 40|0;
 $temp = sp;
 $0 = (_luaV_tonumber($p1,$temp)|0);
 $1 = ($0|0)==(0|0);
 $p1$p2 = $1 ? $p1 : $p2;
 HEAP32[$name$i>>2] = 0;
 $2 = (($p1$p2) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (3512 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($L) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($7) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 L1: do {
  if ($11) {
   $p$01$i$i = $8;
   while(1) {
    $14 = ($p$01$i$i|0)==($p1$p2|0);
    $12 = (($p$01$i$i) + 16|0);
    if ($14) {
     break;
    }
    $13 = ($12>>>0)<($10>>>0);
    if ($13) {
     $p$01$i$i = $12;
    } else {
     break L1;
    }
   }
   $15 = (($L) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $p1$p2;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 4;
   $21 = (_getobjname($L,$7,$20,$name$i)|0);
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $23 = HEAP32[$name$i>>2]|0;
    HEAP32[$vararg_buffer>>2] = 1344;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $21;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $23;
    $vararg_ptr3 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $5;
    _luaG_runerror($L,1256,$vararg_buffer);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer4>>2] = 1344;
 $vararg_ptr7 = (($vararg_buffer4) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $5;
 _luaG_runerror($L,1296,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _luaG_ordererror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (3512 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($p2) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (3512 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($3) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($7) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($9<<24>>24)==($11<<24>>24);
 if ($12) {
  HEAP32[$vararg_buffer>>2] = $3;
  _luaG_runerror($L,1368,$vararg_buffer);
  STACKTOP = sp;return 0;
 } else {
  HEAP32[$vararg_buffer1>>2] = $3;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $7;
  _luaG_runerror($L,1408,$vararg_buffer1);
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _luaG_errormsg($L) {
 $L = $L|0;
 var $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 116|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _luaD_throw($L,2);
  // unreachable;
 }
 $3 = (($L) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1)|0);
 $$sum = (($1) + 8)|0;
 $6 = (($4) + ($$sum)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(6);
 if (!($8)) {
  _luaD_throw($L,5);
  // unreachable;
 }
 $9 = (($L) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -16|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $10;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 $22 = (($10) + -8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($10) + 8|0);
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[$9>>2]|0;
 $26 = (($25) + -16|0);
 $27 = $5;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $26;
 $34 = $33;
 HEAP32[$34>>2] = $29;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $32;
 $37 = HEAP32[$6>>2]|0;
 $38 = (($25) + -8|0);
 HEAP32[$38>>2] = $37;
 $39 = (($L) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$9>>2]|0;
 $42 = $40;
 $43 = $41;
 $44 = (($42) - ($43))|0;
 $45 = ($44|0)<(17);
 if ($45) {
  _luaD_growstack($L,1);
  $$pre = HEAP32[$9>>2]|0;
  $47 = $$pre;
 } else {
  $47 = $41;
 }
 $46 = (($47) + 16|0);
 HEAP32[$9>>2] = $46;
 $48 = (($47) + -16|0);
 _luaD_call($L,$48,1);
 _luaD_throw($L,2);
 // unreachable;
}
function _getobjname($L,$ci,$stackpos,$name) {
 $L = $L|0;
 $ci = $ci|0;
 $stackpos = $stackpos|0;
 $name = $name|0;
 var $$0 = 0, $$0$i1 = 0, $$0$i2 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0;
 var $stackpos$tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ci) + 4|0);
 $1 = (($L) + 20|0);
 $2 = (($L) + 24|0);
 $3 = (($ci) + 12|0);
 $stackpos$tr = $stackpos;
 L1: while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(6);
  if (!($7)) {
   $$0 = 0;
   label = 22;
   break;
  }
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + 6|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   $$0 = 0;
   label = 22;
   break;
  }
  $12 = (($8) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = ($14|0)==($ci|0);
  if ($15) {
   $16 = HEAP32[$2>>2]|0;
   HEAP32[$3>>2] = $16;
   $$pre1$i = HEAP32[$4>>2]|0;
   $$phi$trans$insert = (($$pre1$i) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $18 = $$pre;$20 = $16;
  } else {
   $$pre$i = HEAP32[$3>>2]|0;
   $18 = $13;$20 = $$pre$i;
  }
  $17 = (($18) + 12|0);
  $19 = HEAP32[$17>>2]|0;
  $21 = $20;
  $22 = $19;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = (($24) + -1)|0;
  $26 = (($stackpos$tr) + 1)|0;
  $27 = (_luaF_getlocalname($13,$26,$25)|0);
  HEAP32[$name>>2] = $27;
  $28 = ($27|0)==(0|0);
  if (!($28)) {
   $$0 = 1456;
   label = 22;
   break;
  }
  $29 = (_symbexec($13,$25,$stackpos$tr)|0);
  $30 = $29 & 63;
  switch ($30|0) {
  case 5:  {
   label = 9;
   break L1;
   break;
  }
  case 11:  {
   label = 18;
   break L1;
   break;
  }
  case 0:  {
   break;
  }
  case 4:  {
   label = 15;
   break L1;
   break;
  }
  case 6:  {
   label = 11;
   break L1;
   break;
  }
  default: {
   $$0 = 0;
   label = 22;
   break L1;
  }
  }
  $37 = $29 >>> 6;
  $38 = $37 & 255;
  $39 = $29 >>> 23;
  $40 = ($39>>>0)<($38>>>0);
  if ($40) {
   $stackpos$tr = $39;
  } else {
   $$0 = 0;
   label = 22;
   break;
  }
 }
 if ((label|0) == 9) {
  $31 = $29 >>> 14;
  $32 = (($13) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($31<<4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 16|0);
  HEAP32[$name>>2] = $36;
  $$0 = 1464;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 11) {
  $41 = $29 >>> 14;
  $42 = $41 & 256;
  $43 = ($42|0)==(0);
  if ($43) {
   $$0$i2 = 1480;
  } else {
   $44 = $41 & 255;
   $45 = (($13) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46) + ($44<<4)|0) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(4);
   if ($49) {
    $50 = (($46) + ($44<<4)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + 16|0);
    $$0$i2 = $52;
   } else {
    $$0$i2 = 1480;
   }
  }
  HEAP32[$name>>2] = $$0$i2;
  $$0 = 1472;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 15) {
  $53 = (($13) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $60 = 1480;
  } else {
   $56 = $29 >>> 23;
   $57 = (($54) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 16|0);
   $60 = $59;
  }
  HEAP32[$name>>2] = $60;
  $$0 = 1488;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 18) {
  $61 = $29 >>> 14;
  $62 = $61 & 256;
  $63 = ($62|0)==(0);
  if ($63) {
   $$0$i1 = 1480;
  } else {
   $64 = $61 & 255;
   $65 = (($13) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($66) + ($64<<4)|0) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(4);
   if ($69) {
    $70 = (($66) + ($64<<4)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + 16|0);
    $$0$i1 = $72;
   } else {
    $$0$i1 = 1480;
   }
  }
  HEAP32[$name>>2] = $$0$i1;
  $$0 = 1496;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _symbexec($pt,$lastpc,$reg) {
 $pt = $pt|0;
 $lastpc = $lastpc|0;
 $reg = $reg|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$0 = 0, $c$0 = 0, $j$0$lcssa = 0, $j$021 = 0, $j2$024 = 0, $last$032 = 0, $last$1 = 0, $last$1$pc$0 = 0, $last$1$pc$012 = 0, $last$1$pc$09 = 0, $last$2 = 0, $notlhs = 0, $notrhs = 0;
 var $or$cond = 0, $or$cond$i = 0, $or$cond1$i = 0, $or$cond2$i = 0, $or$cond3 = 0, $or$cond6 = 0, $or$cond7$not = 0, $or$cond8 = 0, $pc$0$ = 0, $pc$0$13 = 0, $pc$0$last$1 = 0, $pc$033 = 0, $pc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pt) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pt) + 75|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255)<(251);
 L1: do {
  if ($4) {
   $5 = $3&255;
   $6 = (($pt) + 73|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = (($pt) + 74|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 & 1;
   $13 = (($12) + ($8))|0;
   $14 = ($13|0)>($5|0);
   $15 = $11 & 5;
   $16 = ($15|0)==(4);
   $or$cond$i = $14 | $16;
   if ($or$cond$i) {
    $$0 = 0;
   } else {
    $17 = (($pt) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($pt) + 72|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = ($18|0)>($21|0);
    if ($22) {
     $$0 = 0;
    } else {
     $23 = (($pt) + 48|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==($1|0);
     $26 = ($24|0)==(0);
     $or$cond1$i = $25 | $26;
     $27 = ($1|0)>(0);
     $or$cond2$i = $or$cond1$i & $27;
     if ($or$cond2$i) {
      $28 = (($1) + -1)|0;
      $29 = (($pt) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + ($28<<2)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = $32 & 63;
      $34 = ($33|0)==(30);
      if ($34) {
       $35 = ($lastpc|0)>(0);
       if ($35) {
        $36 = (($pt) + 8|0);
        $notlhs = ($reg|0)==(255);
        $37 = (($pt) + 52|0);
        $38 = (($pt) + 16|0);
        $39 = (($pt) + 40|0);
        $last$032 = $28;$pc$033 = 0;
        while(1) {
         $40 = (($30) + ($pc$033<<2)|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = $41 & 63;
         $43 = $41 >>> 6;
         $44 = $43 & 255;
         $45 = ($42>>>0)<(38);
         if (!($45)) {
          $$0 = 0;
          break L1;
         }
         $46 = $3&255;
         $47 = ($44>>>0)<($46>>>0);
         if (!($47)) {
          $$0 = 0;
          break L1;
         }
         $48 = (2528 + ($42)|0);
         $49 = HEAP8[$48>>0]|0;
         $50 = $49&255;
         $51 = $50 & 3;
         do {
          if ((($51|0) == 1)) {
           $75 = $41 >>> 14;
           $76 = $50 & 48;
           $77 = ($76|0)==(48);
           if ($77) {
            $78 = HEAP32[$39>>2]|0;
            $79 = ($75|0)<($78|0);
            if ($79) {
             $b$0 = $75;$c$0 = 0;
            } else {
             $$0 = 0;
             break L1;
            }
           } else {
            $b$0 = $75;$c$0 = 0;
           }
          } else if ((($51|0) == 2)) {
           $80 = $41 >>> 14;
           $81 = (($80) + -131071)|0;
           $82 = $50 & 48;
           $83 = ($82|0)==(32);
           if ($83) {
            $84 = (($pc$033) + 1)|0;
            $85 = (($84) + ($81))|0;
            $86 = ($85|0)>(-1);
            $87 = ($85|0)<($1|0);
            $or$cond = $86 & $87;
            if (!($or$cond)) {
             $$0 = 0;
             break L1;
            }
            $88 = ($85|0)>(0);
            if ($88) {
             $89 = (($81) + ($pc$033))|0;
             $j$021 = 0;
             while(1) {
              $92 = (($89) - ($j$021))|0;
              $93 = (($30) + ($92<<2)|0);
              $94 = HEAP32[$93>>2]|0;
              $95 = $94 & 8372287;
              $96 = ($95|0)==(34);
              $90 = (($j$021) + 1)|0;
              if (!($96)) {
               $j$0$lcssa = $j$021;
               break;
              }
              $91 = ($90|0)<($85|0);
              if ($91) {
               $j$021 = $90;
              } else {
               $j$0$lcssa = $90;
               break;
              }
             }
             $97 = $j$0$lcssa & 1;
             $98 = ($97|0)==(0);
             if ($98) {
              $b$0 = $81;$c$0 = 0;
             } else {
              $$0 = 0;
              break L1;
             }
            } else {
             $b$0 = $81;$c$0 = 0;
            }
           } else {
            $b$0 = $81;$c$0 = 0;
           }
          } else if ((($51|0) == 0)) {
           $52 = $41 >>> 23;
           $53 = $41 >>> 14;
           $54 = $53 & 511;
           $55 = $50 >>> 4;
           $56 = $55 & 3;
           do {
            if ((($56|0) == 0)) {
             $57 = ($52|0)==(0);
             if (!($57)) {
              $$0 = 0;
              break L1;
             }
            } else if ((($56|0) == 2)) {
             $58 = ($46>>>0)>($52>>>0);
             if (!($58)) {
              $$0 = 0;
              break L1;
             }
            } else if ((($56|0) == 3)) {
             $59 = $52 & 256;
             $60 = ($59|0)==(0);
             if ($60) {
              $64 = ($46>>>0)>($52>>>0);
              if ($64) {
               break;
              } else {
               $$0 = 0;
               break L1;
              }
             } else {
              $61 = $52 & 255;
              $62 = HEAP32[$39>>2]|0;
              $63 = ($61|0)<($62|0);
              if ($63) {
               break;
              } else {
               $$0 = 0;
               break L1;
              }
             }
            }
           } while(0);
           $65 = $50 >>> 2;
           $66 = $65 & 3;
           if ((($66|0) == 3)) {
            $69 = $53 & 256;
            $70 = ($69|0)==(0);
            if ($70) {
             $74 = ($5>>>0)>($54>>>0);
             if ($74) {
              $b$0 = $52;$c$0 = $54;
              break;
             } else {
              $$0 = 0;
              break L1;
             }
            } else {
             $71 = $53 & 255;
             $72 = HEAP32[$39>>2]|0;
             $73 = ($71|0)<($72|0);
             if ($73) {
              $b$0 = $52;$c$0 = $54;
              break;
             } else {
              $$0 = 0;
              break L1;
             }
            }
           } else if ((($66|0) == 0)) {
            $67 = ($54|0)==(0);
            if ($67) {
             $b$0 = $52;$c$0 = 0;
             break;
            } else {
             $$0 = 0;
             break L1;
            }
           } else if ((($66|0) == 2)) {
            $68 = ($5>>>0)>($54>>>0);
            if ($68) {
             $b$0 = $52;$c$0 = $54;
             break;
            } else {
             $$0 = 0;
             break L1;
            }
           } else {
            $b$0 = $52;$c$0 = $54;
            break;
           }
          } else {
           $b$0 = 0;$c$0 = 0;
          }
         } while(0);
         $99 = $49 & 64;
         $100 = ($99<<24>>24)!=(0);
         $101 = ($44|0)==($reg|0);
         $or$cond3 = $100 & $101;
         $last$1 = $or$cond3 ? $pc$033 : $last$032;
         $102 = ($49<<24>>24)<(0);
         if ($102) {
          $103 = (($pc$033) + 2)|0;
          $104 = ($103|0)<($1|0);
          if (!($104)) {
           $$0 = 0;
           break L1;
          }
          $105 = (($pc$033) + 1)|0;
          $106 = (($30) + ($105<<2)|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = $107 & 63;
          $109 = ($108|0)==(22);
          if (!($109)) {
           $$0 = 0;
           break L1;
          }
         }
         do {
          switch ($42|0) {
          case 2:  {
           $110 = ($c$0|0)==(1);
           if ($110) {
            $111 = (($pc$033) + 2)|0;
            $112 = ($111|0)<($1|0);
            if (!($112)) {
             $$0 = 0;
             break L1;
            }
            $113 = (($pc$033) + 1)|0;
            $114 = (($30) + ($113<<2)|0);
            $115 = HEAP32[$114>>2]|0;
            $116 = $115 & 8372287;
            $117 = ($116|0)==(34);
            if ($117) {
             $$0 = 0;
             break L1;
            } else {
             $last$2 = $last$1;$pc$1 = $pc$033;
            }
           } else {
            $last$2 = $last$1;$pc$1 = $pc$033;
           }
           break;
          }
          case 3:  {
           $118 = ($44|0)>($reg|0);
           $119 = ($b$0|0)<($reg|0);
           $or$cond6 = $118 | $119;
           $last$1$pc$012 = $or$cond6 ? $last$1 : $pc$033;
           $last$2 = $last$1$pc$012;$pc$1 = $pc$033;
           break;
          }
          case 8: case 4:  {
           $120 = ($b$0|0)<($21|0);
           if ($120) {
            $last$2 = $last$1;$pc$1 = $pc$033;
           } else {
            $$0 = 0;
            break L1;
           }
           break;
          }
          case 7: case 5:  {
           $121 = HEAP32[$36>>2]|0;
           $122 = ((($121) + ($b$0<<4)|0) + 8|0);
           $123 = HEAP32[$122>>2]|0;
           $124 = ($123|0)==(4);
           if ($124) {
            $last$2 = $last$1;$pc$1 = $pc$033;
           } else {
            $$0 = 0;
            break L1;
           }
           break;
          }
          case 11:  {
           $125 = (($44) + 1)|0;
           $126 = $3&255;
           $127 = ($125>>>0)<($126>>>0);
           if (!($127)) {
            $$0 = 0;
            break L1;
           }
           $128 = ($125|0)==($reg|0);
           $pc$0$last$1 = $128 ? $pc$033 : $last$1;
           $last$2 = $pc$0$last$1;$pc$1 = $pc$033;
           break;
          }
          case 21:  {
           $129 = ($b$0|0)<($c$0|0);
           if ($129) {
            $last$2 = $last$1;$pc$1 = $pc$033;
           } else {
            $$0 = 0;
            break L1;
           }
           break;
          }
          case 33:  {
           $130 = ($c$0|0)==(0);
           if ($130) {
            $$0 = 0;
            break L1;
           }
           $131 = (($44) + 2)|0;
           $132 = (($c$0) + ($131))|0;
           $133 = $3&255;
           $134 = ($132|0)<($133|0);
           if (!($134)) {
            $$0 = 0;
            break L1;
           }
           $135 = ($131|0)>($reg|0);
           $last$1$pc$0 = $135 ? $last$1 : $pc$033;
           $last$2 = $last$1$pc$0;$pc$1 = $pc$033;
           break;
          }
          case 32: case 31:  {
           $136 = (($44) + 3)|0;
           $137 = $3&255;
           $138 = ($136>>>0)<($137>>>0);
           if ($138) {
            label = 49;
           } else {
            $$0 = 0;
            break L1;
           }
           break;
          }
          case 29: case 28:  {
           $143 = ($b$0|0)==(0);
           if (!($143)) {
            $144 = (($b$0) + ($44))|0;
            $145 = $3&255;
            $146 = ($144|0)>($145|0);
            if ($146) {
             $$0 = 0;
             break L1;
            }
           }
           $147 = (($c$0) + -1)|0;
           $148 = ($c$0|0)==(0);
           if ($148) {
            $149 = (($pc$033) + 1)|0;
            $150 = (($30) + ($149<<2)|0);
            $151 = HEAP32[$150>>2]|0;
            $152 = $151 & 63;
            if (!((($152|0) == 34) | (($152|0) == 30) | (($152|0) == 29) | (($152|0) == 28))) {
             $$0 = 0;
             break L1;
            }
            $153 = ($151>>>0)<(8388608);
            if (!($153)) {
             $$0 = 0;
             break L1;
            }
           } else {
            $154 = ($147|0)==(0);
            if (!($154)) {
             $155 = (($147) + ($44))|0;
             $156 = $3&255;
             $157 = ($155|0)>($156|0);
             if ($157) {
              $$0 = 0;
              break L1;
             }
            }
           }
           $158 = ($44|0)>($reg|0);
           $last$1$pc$09 = $158 ? $last$1 : $pc$033;
           $last$2 = $last$1$pc$09;$pc$1 = $pc$033;
           break;
          }
          case 22:  {
           label = 49;
           break;
          }
          case 30:  {
           $159 = (($b$0) + -1)|0;
           $160 = ($159|0)>(0);
           if ($160) {
            $161 = (($159) + ($44))|0;
            $162 = $3&255;
            $163 = ($161|0)>($162|0);
            if ($163) {
             $$0 = 0;
             break L1;
            } else {
             $last$2 = $last$1;$pc$1 = $pc$033;
            }
           } else {
            $last$2 = $last$1;$pc$1 = $pc$033;
           }
           break;
          }
          case 34:  {
           $164 = ($b$0|0)>(0);
           if ($164) {
            $165 = (($b$0) + ($44))|0;
            $166 = $3&255;
            $167 = ($165|0)<($166|0);
            if (!($167)) {
             $$0 = 0;
             break L1;
            }
           }
           $168 = ($c$0|0)==(0);
           if ($168) {
            $169 = (($pc$033) + 1)|0;
            $170 = (($1) + -1)|0;
            $171 = ($169|0)<($170|0);
            if ($171) {
             $last$2 = $last$1;$pc$1 = $169;
            } else {
             $$0 = 0;
             break L1;
            }
           } else {
            $last$2 = $last$1;$pc$1 = $pc$033;
           }
           break;
          }
          case 37:  {
           $190 = $10 & 6;
           $191 = ($190<<24>>24)==(2);
           if (!($191)) {
            $$0 = 0;
            break L1;
           }
           $192 = ($b$0|0)==(0);
           if ($192) {
            $193 = (($pc$033) + 1)|0;
            $194 = (($30) + ($193<<2)|0);
            $195 = HEAP32[$194>>2]|0;
            $196 = $195 & 63;
            if (!((($196|0) == 34) | (($196|0) == 30) | (($196|0) == 29) | (($196|0) == 28))) {
             $$0 = 0;
             break L1;
            }
            $197 = ($195>>>0)<(8388608);
            if (!($197)) {
             $$0 = 0;
             break L1;
            }
           }
           $198 = (($44) + -1)|0;
           $199 = (($198) + ($b$0))|0;
           $200 = $3&255;
           $201 = ($199|0)>($200|0);
           if ($201) {
            $$0 = 0;
            break L1;
           } else {
            $last$2 = $last$1;$pc$1 = $pc$033;
           }
           break;
          }
          case 36:  {
           $172 = HEAP32[$37>>2]|0;
           $173 = ($b$0|0)<($172|0);
           if (!($173)) {
            $$0 = 0;
            break L1;
           }
           $174 = HEAP32[$38>>2]|0;
           $175 = (($174) + ($b$0<<2)|0);
           $176 = HEAP32[$175>>2]|0;
           $177 = (($176) + 72|0);
           $178 = HEAP8[$177>>0]|0;
           $179 = $178&255;
           $180 = (($179) + ($pc$033))|0;
           $181 = ($180|0)<($1|0);
           if (!($181)) {
            $$0 = 0;
            break L1;
           }
           $182 = ($178<<24>>24)==(0);
           if (!($182)) {
            $j2$024 = 1;
            while(1) {
             $185 = (($j2$024) + ($pc$033))|0;
             $186 = (($30) + ($185<<2)|0);
             $187 = HEAP32[$186>>2]|0;
             $188 = $187 & 59;
             $189 = ($188|0)==(0);
             if (!($189)) {
              $$0 = 0;
              break L1;
             }
             $183 = (($j2$024) + 1)|0;
             $184 = ($j2$024|0)<($179|0);
             if ($184) {
              $j2$024 = $183;
             } else {
              break;
             }
            }
           }
           $pc$0$ = $notlhs ? $pc$033 : $180;
           $last$2 = $last$1;$pc$1 = $pc$0$;
           break;
          }
          default: {
           $last$2 = $last$1;$pc$1 = $pc$033;
          }
          }
         } while(0);
         if ((label|0) == 49) {
          label = 0;
          $139 = (($pc$033) + 1)|0;
          $140 = (($139) + ($b$0))|0;
          $notrhs = ($pc$033|0)>=($140|0);
          $or$cond7$not = $notrhs | $notlhs;
          $141 = ($140|0)>($lastpc|0);
          $or$cond8 = $or$cond7$not | $141;
          $142 = $or$cond8 ? 0 : $b$0;
          $pc$0$13 = (($142) + ($pc$033))|0;
          $last$2 = $last$1;$pc$1 = $pc$0$13;
         }
         $202 = (($pc$1) + 1)|0;
         $203 = ($202|0)<($lastpc|0);
         if ($203) {
          $last$032 = $last$2;$pc$033 = $202;
         } else {
          break;
         }
        }
        $$phi$trans$insert = (($30) + ($last$2<<2)|0);
        $$pre = HEAP32[$$phi$trans$insert>>2]|0;
        $$0 = $$pre;
       } else {
        $$0 = $32;
       }
      } else {
       $$0 = 0;
      }
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _luaD_throw($L,$errcode) {
 $L = $L|0;
 $errcode = $errcode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 160|0);
  HEAP32[$3>>2] = $errcode;
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 4|0);
  _longjmp(($5|0),1);
  // unreachable;
 }
 $6 = $errcode&255;
 $7 = (($L) + 6|0);
 HEAP8[$7>>0] = $6;
 $8 = (($L) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 88|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  _exit(1);
  // unreachable;
 }
 $13 = (($L) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($L) + 20|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$14>>2]|0;
 $17 = (($L) + 12|0);
 HEAP32[$17>>2] = $16;
 _luaF_close($L,$16);
 $18 = HEAP32[$17>>2]|0;
 if ((($errcode|0) == 2) | (($errcode|0) == 3)) {
  $23 = (($L) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -16|0);
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $18;
  $33 = $32;
  HEAP32[$33>>2] = $28;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = (($24) + -8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($18) + 8|0);
  HEAP32[$38>>2] = $37;
 } else if ((($errcode|0) == 4)) {
  $19 = (_luaS_newlstr($L,1504,17)|0);
  HEAP32[$18>>2] = $19;
  $20 = (($18) + 8|0);
  HEAP32[$20>>2] = 4;
 } else if ((($errcode|0) == 5)) {
  $21 = (_luaS_newlstr($L,1528,23)|0);
  HEAP32[$18>>2] = $21;
  $22 = (($18) + 8|0);
  HEAP32[$22>>2] = 4;
 }
 $39 = (($18) + 16|0);
 $40 = (($L) + 8|0);
 HEAP32[$40>>2] = $39;
 $41 = (($L) + 54|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = (($L) + 52|0);
 HEAP16[$43>>1] = $42;
 $44 = (($L) + 57|0);
 HEAP8[$44>>0] = 1;
 $45 = (($L) + 48|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)>(20000);
 if ($47) {
  $48 = HEAP32[$15>>2]|0;
  $49 = HEAP32[$13>>2]|0;
  $50 = $48;
  $51 = $49;
  $52 = (($50) - ($51))|0;
  $53 = (($52|0) / 24)&-1;
  $54 = (($53) + 1)|0;
  $55 = ($54|0)<(20000);
  if ($55) {
   $56 = ($46*24)|0;
   $57 = (_luaM_realloc_($L,$49,$56,480000)|0);
   HEAP32[$13>>2] = $57;
   HEAP32[$45>>2] = 20000;
   $58 = HEAP32[$15>>2]|0;
   $59 = $58;
   $60 = (($59) - ($51))|0;
   $61 = (($60|0) / 24)&-1;
   $62 = (($57) + (($61*24)|0)|0);
   HEAP32[$15>>2] = $62;
   $63 = (($57) + 479976|0);
   $64 = (($L) + 36|0);
   HEAP32[$64>>2] = $63;
  }
 }
 $65 = (($L) + 116|0);
 HEAP32[$65>>2] = 0;
 HEAP32[$0>>2] = 0;
 $66 = HEAP32[$8>>2]|0;
 $67 = (($66) + 88|0);
 $68 = HEAP32[$67>>2]|0;
 (FUNCTION_TABLE_ii[$68 & 15]($L)|0);
 _exit(1);
 // unreachable;
}
function _luaD_rawrunprotected($L,$f,$ud) {
 $L = $L|0;
 $f = $f|0;
 $ud = $ud|0;
 var $$reg2mem18$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $lj = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $lj = sp;
 $0 = (($lj) + 160|0);
 HEAP32[$0>>2] = 0;
 $1 = (($L) + 112|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$lj>>2] = $2;
 HEAP32[$1>>2] = $lj;
 $3 = (($lj) + 4|0);
 _saveSetjmp($3,1,_setjmpTable|0)|0;
 __THREW__ = 0;
 $4 = __THREW__; __THREW__ = 0;
 if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = threwValue; } else { $5 = -1; };
 $6 = tempRet0;
 $cond = ($5|0)==(1);
 if ($cond) {
  $$reg2mem18$0 = $6;
 } else {
  $$reg2mem18$0 = 0;
 }
 while(1) {
  $7 = ($$reg2mem18$0|0)==(0);
  if (!($7)) {
   label = 6;
   break;
  }
  __THREW__ = 0;
  invoke_vii($f|0,($L|0),($ud|0));
  $8 = __THREW__; __THREW__ = 0;
  if ((($8|0) != 0) & ((threwValue|0) != 0)) { $9 = _testSetjmp(HEAP32[$8>>2]|0, _setjmpTable)|0; if (($9|0) == 0) { _longjmp($8|0, threwValue|0); } tempRet0 = threwValue; } else { $9 = -1; };
  $10 = tempRet0;
  $cond1 = ($9|0)==(1);
  if ($cond1) {
   $$reg2mem18$0 = $10;
  } else {
   break;
  }
 }
 if ((label|0) == 6) {
  $11 = HEAP32[$lj>>2]|0;
  HEAP32[$1>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $11 = HEAP32[$lj>>2]|0;
 HEAP32[$1>>2] = $11;
 $12 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function _luaD_reallocstack($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ci$01$i = 0, $up$0$i = 0, $up$02$i = 0, $up$03$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($newsize) + 6)|0;
 $3 = (($newsize) + 7)|0;
 $4 = ($3>>>0)<(268435456);
 if ($4) {
  $5 = (($L) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 << 4;
  $8 = $2 << 4;
  $9 = (_luaM_realloc_($L,$1,$7,$8)|0);
  $$pre$phiZ2D = $5;$11 = $9;
 } else {
  $10 = (_luaM_toobig($L)|0);
  $$pre = (($L) + 44|0);
  $$pre$phiZ2D = $$pre;$11 = $10;
 }
 HEAP32[$0>>2] = $11;
 HEAP32[$$pre$phiZ2D>>2] = $2;
 $12 = (($11) + ($newsize<<4)|0);
 $13 = (($L) + 28|0);
 HEAP32[$13>>2] = $12;
 $14 = (($L) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $1;
 $18 = (($16) - ($17))|0;
 $19 = $18 >> 4;
 $20 = (($11) + ($19<<4)|0);
 HEAP32[$14>>2] = $20;
 $21 = (($L) + 104|0);
 $up$02$i = HEAP32[$21>>2]|0;
 $22 = ($up$02$i|0)==(0|0);
 if (!($22)) {
  $up$03$i = $up$02$i;
  while(1) {
   $23 = (($up$03$i) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24;
   $26 = (($25) - ($17))|0;
   $27 = $26 >> 4;
   $28 = (($11) + ($27<<4)|0);
   HEAP32[$23>>2] = $28;
   $up$0$i = HEAP32[$up$03$i>>2]|0;
   $29 = ($up$0$i|0)==(0|0);
   if ($29) {
    break;
   } else {
    $up$03$i = $up$0$i;
   }
  }
 }
 $30 = (($L) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($L) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31>>>0)>($33>>>0);
 if ($34) {
  $54 = (($L) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $55;
  $57 = (($56) - ($17))|0;
  $58 = $57 >> 4;
  $59 = (($11) + ($58<<4)|0);
  HEAP32[$54>>2] = $59;
  STACKTOP = sp;return;
 } else {
  $ci$01$i = $31;
 }
 while(1) {
  $35 = (($ci$01$i) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36;
  $38 = (($37) - ($17))|0;
  $39 = $38 >> 4;
  $40 = (($11) + ($39<<4)|0);
  HEAP32[$35>>2] = $40;
  $41 = HEAP32[$ci$01$i>>2]|0;
  $42 = $41;
  $43 = (($42) - ($17))|0;
  $44 = $43 >> 4;
  $45 = (($11) + ($44<<4)|0);
  HEAP32[$ci$01$i>>2] = $45;
  $46 = (($ci$01$i) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47;
  $49 = (($48) - ($17))|0;
  $50 = $49 >> 4;
  $51 = (($11) + ($50<<4)|0);
  HEAP32[$46>>2] = $51;
  $52 = (($ci$01$i) + 24|0);
  $53 = ($52>>>0)>($33>>>0);
  if ($53) {
   break;
  } else {
   $ci$01$i = $52;
  }
 }
 $54 = (($L) + 12|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55;
 $57 = (($56) - ($17))|0;
 $58 = $57 >> 4;
 $59 = (($11) + ($58<<4)|0);
 HEAP32[$54>>2] = $59;
 STACKTOP = sp;return;
}
function _luaD_reallocCI($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($newsize) + 1)|0;
 $3 = ($2>>>0)<(178956971);
 if ($3) {
  $4 = (($L) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5*24)|0;
  $7 = ($newsize*24)|0;
  $8 = (_luaM_realloc_($L,$1,$6,$7)|0);
  $$pre$phiZ2D = $4;$10 = $8;
 } else {
  $9 = (_luaM_toobig($L)|0);
  $$pre = (($L) + 48|0);
  $$pre$phiZ2D = $$pre;$10 = $9;
 }
 HEAP32[$0>>2] = $10;
 HEAP32[$$pre$phiZ2D>>2] = $newsize;
 $11 = (($L) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $1;
 $15 = (($13) - ($14))|0;
 $16 = (($15|0) / 24)&-1;
 $17 = (($10) + (($16*24)|0)|0);
 HEAP32[$11>>2] = $17;
 $$sum = (($newsize) + -1)|0;
 $18 = (($10) + (($$sum*24)|0)|0);
 $19 = (($L) + 36|0);
 HEAP32[$19>>2] = $18;
 STACKTOP = sp;return;
}
function _luaD_growstack($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($n|0);
 if ($2) {
  $4 = (($1) + ($n))|0;
  _luaD_reallocstack($L,$4);
  STACKTOP = sp;return;
 } else {
  $3 = $1 << 1;
  _luaD_reallocstack($L,$3);
  STACKTOP = sp;return;
 }
}
function _luaD_callhook($L,$event,$line) {
 $L = $L|0;
 $event = $event|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = (($L) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($L) + 57|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($L) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($L) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = (($17) - ($11))|0;
 HEAP32[$ar>>2] = $event;
 $19 = (($ar) + 20|0);
 HEAP32[$19>>2] = $line;
 $20 = ($event|0)==(4);
 if ($20) {
  $21 = (($ar) + 96|0);
  HEAP32[$21>>2] = 0;
 } else {
  $22 = (($L) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $14;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = (($26|0) / 24)&-1;
  $28 = (($ar) + 96|0);
  HEAP32[$28>>2] = $27;
 }
 $29 = (($L) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30;
 $32 = (($31) - ($10))|0;
 $33 = ($32|0)<(321);
 do {
  if ($33) {
   $34 = (($L) + 44|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)<(20);
   if ($36) {
    $38 = (($35) + 20)|0;
    _luaD_reallocstack($L,$38);
    break;
   } else {
    $37 = $35 << 1;
    _luaD_reallocstack($L,$37);
    break;
   }
  }
 } while(0);
 $39 = HEAP32[$6>>2]|0;
 $40 = (($39) + 320|0);
 $41 = HEAP32[$13>>2]|0;
 $42 = (($41) + 8|0);
 HEAP32[$42>>2] = $40;
 HEAP8[$3>>0] = 0;
 FUNCTION_TABLE_vii[$1 & 15]($L,$ar);
 HEAP8[$3>>0] = 1;
 $43 = HEAP32[$8>>2]|0;
 $44 = (($43) + ($18)|0);
 $45 = HEAP32[$13>>2]|0;
 $46 = (($45) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = (($43) + ($12)|0);
 HEAP32[$6>>2] = $47;
 STACKTOP = sp;return;
}
function _luaD_precall($L,$func,$nresults) {
 $L = $L|0;
 $func = $func|0;
 $nresults = $nresults|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$06$i = 0, $$1 = 0, $$pre = 0, $$pre$i = 0, $$pre$i5 = 0, $$pre$phiZ2D = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $$pre25 = 0, $$sink = 0, $$sink17 = 0, $$sum = 0, $$sum$i = 0, $$sum$i11 = 0, $$sum$i14 = 0;
 var $$sum$i3 = 0, $$sum$i319 = 0, $$sum1$i = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $base$0 = 0, $exitcond$i = 0, $exitcond11$i = 0, $htab$0$i = 0, $i$03$i = 0, $p$01$i = 0, $scevgep$i = 0, $st$018 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($func) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(6);
 if ($2) {
  $$pre25 = (($L) + 32|0);
  $$01 = $func;$$pre$phiZ2D = $$pre25;
 } else {
  $3 = (_luaT_gettmbyobj($L,$func,16)|0);
  $4 = (($L) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $func;
  $7 = $5;
  $8 = (($6) - ($7))|0;
  $9 = (($3) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(6);
  if (!($11)) {
   _luaG_typeerror($L,$func,1600);
  }
  $12 = (($L) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13>>>0)>($func>>>0);
  if ($14) {
   $p$01$i = $13;
   while(1) {
    $15 = (($p$01$i) + -16|0);
    $16 = $15;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = $p$01$i;
    $23 = $22;
    HEAP32[$23>>2] = $18;
    $24 = (($22) + 4)|0;
    $25 = $24;
    HEAP32[$25>>2] = $21;
    $26 = (($p$01$i) + -8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($p$01$i) + 8|0);
    HEAP32[$28>>2] = $27;
    $29 = ($15>>>0)>($func>>>0);
    if ($29) {
     $p$01$i = $15;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$12>>2]|0;
   $33 = $$pre$i;
  } else {
   $33 = $13;
  }
  $30 = (($L) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31;
  $34 = $33;
  $35 = (($32) - ($34))|0;
  $36 = ($35|0)<(17);
  do {
   if ($36) {
    $37 = (($L) + 44|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)<(1);
    if ($39) {
     $41 = (($38) + 1)|0;
     _luaD_reallocstack($L,$41);
     break;
    } else {
     $40 = $38 << 1;
     _luaD_reallocstack($L,$40);
     break;
    }
   }
  } while(0);
  $42 = HEAP32[$12>>2]|0;
  $43 = (($42) + 16|0);
  HEAP32[$12>>2] = $43;
  $44 = HEAP32[$4>>2]|0;
  $45 = (($44) + ($8)|0);
  $46 = $3;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = $45;
  $53 = $52;
  HEAP32[$53>>2] = $48;
  $54 = (($52) + 4)|0;
  $55 = $54;
  HEAP32[$55>>2] = $51;
  $56 = HEAP32[$9>>2]|0;
  $$sum$i = (($8) + 8)|0;
  $57 = (($44) + ($$sum$i)|0);
  HEAP32[$57>>2] = $56;
  $$01 = $45;$$pre$phiZ2D = $4;
 }
 $58 = HEAP32[$$pre$phiZ2D>>2]|0;
 $59 = $$01;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = HEAP32[$$01>>2]|0;
 $63 = (($L) + 24|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($L) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 12|0);
 HEAP32[$67>>2] = $64;
 $68 = (($62) + 6|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = ($69<<24>>24)==(0);
 if (!($70)) {
  $254 = (($L) + 28|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = (($L) + 8|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = $255;
  $259 = $257;
  $260 = (($258) - ($259))|0;
  $261 = ($260|0)<(321);
  do {
   if ($261) {
    $262 = (($L) + 44|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = ($263|0)<(20);
    if ($264) {
     $266 = (($263) + 20)|0;
     _luaD_reallocstack($L,$266);
     break;
    } else {
     $265 = $263 << 1;
     _luaD_reallocstack($L,$265);
     break;
    }
   }
  } while(0);
  $267 = HEAP32[$65>>2]|0;
  $268 = (($L) + 36|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = ($267|0)==($269|0);
  if ($270) {
   $271 = (($L) + 48|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = ($272|0)>(20000);
   if ($273) {
    _luaD_throw($L,5);
    // unreachable;
   }
   $274 = $272 << 1;
   $275 = (($L) + 40|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = $274 | 1;
   $278 = ($277>>>0)<(178956971);
   if ($278) {
    $279 = ($272*24)|0;
    $280 = ($272*48)|0;
    $281 = (_luaM_realloc_($L,$276,$279,$280)|0);
    $283 = $281;
   } else {
    $282 = (_luaM_toobig($L)|0);
    $283 = $282;
   }
   HEAP32[$275>>2] = $283;
   HEAP32[$271>>2] = $274;
   $284 = HEAP32[$65>>2]|0;
   $285 = $284;
   $286 = $276;
   $287 = (($285) - ($286))|0;
   $288 = (($287|0) / 24)&-1;
   $289 = (($283) + (($288*24)|0)|0);
   HEAP32[$65>>2] = $289;
   $$sum$i14 = (($274) + -1)|0;
   $290 = (($283) + (($$sum$i14*24)|0)|0);
   HEAP32[$268>>2] = $290;
   $291 = ($274|0)>(20000);
   if ($291) {
    _luaG_runerror($L,1576,$vararg_buffer1);
    $$pre22 = HEAP32[$65>>2]|0;
    $$sink17 = $$pre22;
   } else {
    $$sink17 = $289;
   }
  } else {
   $$sink17 = $267;
  }
  $292 = (($$sink17) + 24|0);
  HEAP32[$65>>2] = $292;
  $293 = HEAP32[$$pre$phiZ2D>>2]|0;
  $294 = (($293) + ($61)|0);
  $295 = (($$sink17) + 28|0);
  HEAP32[$295>>2] = $294;
  $$sum2 = (($61) + 16)|0;
  $296 = (($293) + ($$sum2)|0);
  HEAP32[$292>>2] = $296;
  $297 = (($L) + 12|0);
  HEAP32[$297>>2] = $296;
  $298 = HEAP32[$256>>2]|0;
  $299 = (($298) + 320|0);
  $300 = (($$sink17) + 32|0);
  HEAP32[$300>>2] = $299;
  $301 = (($$sink17) + 40|0);
  HEAP32[$301>>2] = $nresults;
  $302 = (($L) + 56|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303 & 1;
  $305 = ($304<<24>>24)==(0);
  if ($305) {
   $307 = $292;
  } else {
   _luaD_callhook($L,0,-1);
   $$pre23 = HEAP32[$65>>2]|0;
   $307 = $$pre23;
  }
  $306 = (($307) + 4|0);
  $308 = HEAP32[$306>>2]|0;
  $309 = HEAP32[$308>>2]|0;
  $310 = (($309) + 16|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = (FUNCTION_TABLE_ii[$311 & 15]($L)|0);
  $313 = ($312|0)<(0);
  if ($313) {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $314 = HEAP32[$256>>2]|0;
  $315 = (0 - ($312))|0;
  $316 = (($314) + ($315<<4)|0);
  (_luaD_poscall($L,$316)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = (($62) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($L) + 28|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($L) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $74;
 $78 = $76;
 $79 = (($77) - ($78))|0;
 $80 = (($72) + 75|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = $82 << 4;
 $84 = ($79|0)>($83|0);
 do {
  if (!($84)) {
   $85 = (($L) + 44|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)<($82|0);
   if ($87) {
    $89 = (($86) + ($82))|0;
    _luaD_reallocstack($L,$89);
    break;
   } else {
    $88 = $86 << 1;
    _luaD_reallocstack($L,$88);
    break;
   }
  }
 } while(0);
 $90 = HEAP32[$$pre$phiZ2D>>2]|0;
 $91 = (($90) + ($61)|0);
 $92 = (($72) + 74|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = ($93<<24>>24)==(0);
 if ($94) {
  $$sum = (($61) + 16)|0;
  $95 = (($90) + ($$sum)|0);
  $96 = HEAP32[$75>>2]|0;
  $97 = (($72) + 73|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = (($95) + ($99<<4)|0);
  $101 = ($96>>>0)>($100>>>0);
  if ($101) {
   HEAP32[$75>>2] = $100;
   $$1 = $91;$base$0 = $95;
  } else {
   $$1 = $91;$base$0 = $95;
  }
 } else {
  $102 = HEAP32[$75>>2]|0;
  $103 = $102;
  $104 = $91;
  $105 = (($103) - ($104))|0;
  $106 = $105 >> 4;
  $107 = (($106) + -1)|0;
  $108 = (($72) + 73|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = ($110|0)>($107|0);
  if ($111) {
   $$06$i = $107;$113 = $102;
   while(1) {
    $112 = (($113) + 16|0);
    $114 = (($113) + 8|0);
    HEAP32[$114>>2] = 0;
    $115 = (($$06$i) + 1)|0;
    $exitcond11$i = ($115|0)==($110|0);
    if ($exitcond11$i) {
     break;
    } else {
     $$06$i = $115;$113 = $112;
    }
   }
   $116 = (($110) - ($107))|0;
   $scevgep$i = (($102) + ($116<<4)|0);
   HEAP32[$75>>2] = $scevgep$i;
   $$0$lcssa$i = $110;$317 = $scevgep$i;
  } else {
   $$0$lcssa$i = $107;$317 = $102;
  }
  $117 = $93 & 4;
  $118 = ($117<<24>>24)==(0);
  if ($118) {
   $166 = $317;$htab$0$i = 0;
  } else {
   $119 = (($$0$lcssa$i) - ($110))|0;
   $120 = (($L) + 16|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + 68|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 64|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123>>>0)<($125>>>0);
   if ($126) {
    $129 = $317;
   } else {
    _luaC_step($L);
    $$pre21 = HEAP32[$75>>2]|0;
    $129 = $$pre21;
   }
   $127 = HEAP32[$73>>2]|0;
   $128 = $127;
   $130 = $129;
   $131 = (($128) - ($130))|0;
   $132 = HEAP8[$80>>0]|0;
   $133 = $132&255;
   $134 = $133 << 4;
   $135 = ($131|0)>($134|0);
   do {
    if (!($135)) {
     $136 = (($L) + 44|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)<($133|0);
     if ($138) {
      $140 = (($137) + ($133))|0;
      _luaD_reallocstack($L,$140);
      break;
     } else {
      $139 = $137 << 1;
      _luaD_reallocstack($L,$139);
      break;
     }
    }
   } while(0);
   $141 = (_luaH_new($L,$119,1)|0);
   $142 = ($119|0)>(0);
   if ($142) {
    $i$03$i = 0;
    while(1) {
     $143 = HEAP32[$75>>2]|0;
     $$sum1$i = (($i$03$i) - ($119))|0;
     $144 = (($143) + ($$sum1$i<<4)|0);
     $145 = (($i$03$i) + 1)|0;
     $146 = (_luaH_setnum($L,$141,$145)|0);
     $147 = $144;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $150 = (($147) + 4)|0;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = $146;
     $154 = $153;
     HEAP32[$154>>2] = $149;
     $155 = (($153) + 4)|0;
     $156 = $155;
     HEAP32[$156>>2] = $152;
     $157 = ((($143) + ($$sum1$i<<4)|0) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($146) + 8|0);
     HEAP32[$159>>2] = $158;
     $exitcond$i = ($145|0)==($119|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$03$i = $145;
     }
    }
   }
   $160 = (_luaS_newlstr($L,1592,1)|0);
   $161 = (_luaH_setstr($L,$141,$160)|0);
   $162 = (+($119|0));
   HEAPF64[$161>>3] = $162;
   $163 = (($161) + 8|0);
   HEAP32[$163>>2] = 3;
   $$pre20 = HEAP32[$75>>2]|0;
   $166 = $$pre20;$htab$0$i = $141;
  }
  $164 = ($109<<24>>24)==(0);
  if (!($164)) {
   $$sum$i319 = (0 - ($$0$lcssa$i))|0;
   $165 = (($166) + ($$sum$i319<<4)|0);
   $167 = (($166) + 16|0);
   HEAP32[$75>>2] = $167;
   $168 = $165;
   $169 = $168;
   $170 = HEAP32[$169>>2]|0;
   $171 = (($168) + 4)|0;
   $172 = $171;
   $173 = HEAP32[$172>>2]|0;
   $174 = $166;
   $175 = $174;
   HEAP32[$175>>2] = $170;
   $176 = (($174) + 4)|0;
   $177 = $176;
   HEAP32[$177>>2] = $173;
   $178 = ((($166) + ($$sum$i319<<4)|0) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($166) + 8|0);
   HEAP32[$180>>2] = $179;
   HEAP32[$178>>2] = 0;
   $181 = ($109&255)>(1);
   if ($181) {
    $182 = 1;
    while(1) {
     $$pre$i5 = HEAP32[$75>>2]|0;
     $$sum$i3 = (($182) - ($$0$lcssa$i))|0;
     $183 = (($166) + ($$sum$i3<<4)|0);
     $184 = (($$pre$i5) + 16|0);
     HEAP32[$75>>2] = $184;
     $185 = $183;
     $186 = $185;
     $187 = HEAP32[$186>>2]|0;
     $188 = (($185) + 4)|0;
     $189 = $188;
     $190 = HEAP32[$189>>2]|0;
     $191 = $$pre$i5;
     $192 = $191;
     HEAP32[$192>>2] = $187;
     $193 = (($191) + 4)|0;
     $194 = $193;
     HEAP32[$194>>2] = $190;
     $195 = ((($166) + ($$sum$i3<<4)|0) + 8|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (($$pre$i5) + 8|0);
     HEAP32[$197>>2] = $196;
     HEAP32[$195>>2] = 0;
     $198 = (($182) + 1)|0;
     $199 = ($198|0)<($110|0);
     if ($199) {
      $182 = $198;
     } else {
      break;
     }
    }
   }
  }
  $200 = ($htab$0$i|0)==(0|0);
  if (!($200)) {
   $201 = HEAP32[$75>>2]|0;
   $202 = (($201) + 16|0);
   HEAP32[$75>>2] = $202;
   HEAP32[$201>>2] = $htab$0$i;
   $203 = (($201) + 8|0);
   HEAP32[$203>>2] = 5;
  }
  $204 = HEAP32[$$pre$phiZ2D>>2]|0;
  $205 = (($204) + ($61)|0);
  $$1 = $205;$base$0 = $166;
 }
 $206 = HEAP32[$65>>2]|0;
 $207 = (($L) + 36|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ($206|0)==($208|0);
 if ($209) {
  $210 = (($L) + 48|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = ($211|0)>(20000);
  if ($212) {
   _luaD_throw($L,5);
   // unreachable;
  }
  $213 = $211 << 1;
  $214 = (($L) + 40|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = $213 | 1;
  $217 = ($216>>>0)<(178956971);
  if ($217) {
   $218 = ($211*24)|0;
   $219 = ($211*48)|0;
   $220 = (_luaM_realloc_($L,$215,$218,$219)|0);
   $222 = $220;
  } else {
   $221 = (_luaM_toobig($L)|0);
   $222 = $221;
  }
  HEAP32[$214>>2] = $222;
  HEAP32[$210>>2] = $213;
  $223 = HEAP32[$65>>2]|0;
  $224 = $223;
  $225 = $215;
  $226 = (($224) - ($225))|0;
  $227 = (($226|0) / 24)&-1;
  $228 = (($222) + (($227*24)|0)|0);
  HEAP32[$65>>2] = $228;
  $$sum$i11 = (($213) + -1)|0;
  $229 = (($222) + (($$sum$i11*24)|0)|0);
  HEAP32[$207>>2] = $229;
  $230 = ($213|0)>(20000);
  if ($230) {
   _luaG_runerror($L,1576,$vararg_buffer);
   $$pre = HEAP32[$65>>2]|0;
   $$sink = $$pre;
  } else {
   $$sink = $228;
  }
 } else {
  $$sink = $206;
 }
 $231 = (($$sink) + 24|0);
 HEAP32[$65>>2] = $231;
 $232 = (($$sink) + 28|0);
 HEAP32[$232>>2] = $$1;
 HEAP32[$231>>2] = $base$0;
 $233 = (($L) + 12|0);
 HEAP32[$233>>2] = $base$0;
 $234 = HEAP8[$80>>0]|0;
 $235 = $234&255;
 $236 = (($base$0) + ($235<<4)|0);
 $237 = (($$sink) + 32|0);
 HEAP32[$237>>2] = $236;
 $238 = (($72) + 12|0);
 $239 = HEAP32[$238>>2]|0;
 HEAP32[$63>>2] = $239;
 $240 = (($$sink) + 44|0);
 HEAP32[$240>>2] = 0;
 $241 = (($$sink) + 40|0);
 HEAP32[$241>>2] = $nresults;
 $242 = HEAP32[$75>>2]|0;
 $243 = ($242>>>0)<($236>>>0);
 if ($243) {
  $st$018 = $242;
  while(1) {
   $244 = (($st$018) + 8|0);
   HEAP32[$244>>2] = 0;
   $245 = (($st$018) + 16|0);
   $246 = ($245>>>0)<($236>>>0);
   if ($246) {
    $st$018 = $245;
   } else {
    break;
   }
  }
 }
 HEAP32[$75>>2] = $236;
 $247 = (($L) + 56|0);
 $248 = HEAP8[$247>>0]|0;
 $249 = $248 & 1;
 $250 = ($249<<24>>24)==(0);
 if ($250) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $251 = (($239) + 4|0);
 HEAP32[$63>>2] = $251;
 _luaD_callhook($L,0,-1);
 $252 = HEAP32[$63>>2]|0;
 $253 = (($252) + -4|0);
 HEAP32[$63>>2] = $253;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _luaD_poscall($L,$firstResult) {
 $L = $L|0;
 $firstResult = $firstResult|0;
 var $$0 = 0, $$15 = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$11 = 0, $res$04 = 0, $res$1$lcssa = 0;
 var $res$12 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 56|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 2;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $$pre = (($L) + 20|0);
  $$0 = $firstResult;$$pre$phiZ2D = $$pre;
 } else {
  $4 = (($L) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $firstResult;
  $7 = $5;
  $8 = (($6) - ($7))|0;
  _luaD_callhook($L,1,-1);
  $9 = (($L) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 6|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  L4: do {
   if ($16) {
    $17 = HEAP8[$0>>0]|0;
    $18 = $17 & 2;
    $19 = ($18<<24>>24)==(0);
    if (!($19)) {
     $20 = (($10) + 20|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($21) + -1)|0;
     HEAP32[$20>>2] = $22;
     $23 = ($21|0)==(0);
     if (!($23)) {
      while(1) {
       _luaD_callhook($L,4,-1);
       $24 = HEAP8[$0>>0]|0;
       $25 = $24 & 2;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        break L4;
       }
       $$pre$i = HEAP32[$9>>2]|0;
       $27 = (($$pre$i) + 20|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (($28) + -1)|0;
       HEAP32[$27>>2] = $29;
       $30 = ($28|0)==(0);
       if ($30) {
        break;
       }
      }
     }
    }
   }
  } while(0);
  $31 = HEAP32[$4>>2]|0;
  $32 = (($31) + ($8)|0);
  $$0 = $32;$$pre$phiZ2D = $9;
 }
 $33 = HEAP32[$$pre$phiZ2D>>2]|0;
 $34 = (($33) + -24|0);
 HEAP32[$$pre$phiZ2D>>2] = $34;
 $35 = (($33) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($33) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$34>>2]|0;
 $40 = (($L) + 12|0);
 HEAP32[$40>>2] = $39;
 $41 = (($33) + -12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($L) + 24|0);
 HEAP32[$43>>2] = $42;
 $44 = (($L) + 8|0);
 $45 = ($38|0)==(0);
 if ($45) {
  $res$1$lcssa = $36;
  HEAP32[$44>>2] = $res$1$lcssa;
  $70 = (($38) + 1)|0;
  STACKTOP = sp;return ($70|0);
 } else {
  $$15 = $$0;$i$03 = $38;$res$04 = $36;
 }
 while(1) {
  $47 = HEAP32[$44>>2]|0;
  $48 = ($$15>>>0)<($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = (($$15) + 16|0);
  $50 = (($res$04) + 16|0);
  $51 = $$15;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = $res$04;
  $58 = $57;
  HEAP32[$58>>2] = $53;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $56;
  $61 = (($$15) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($res$04) + 8|0);
  HEAP32[$63>>2] = $62;
  $64 = (($i$03) + -1)|0;
  $65 = ($64|0)==(0);
  if ($65) {
   $res$1$lcssa = $50;
   label = 15;
   break;
  } else {
   $$15 = $49;$i$03 = $64;$res$04 = $50;
  }
 }
 if ((label|0) == 15) {
  HEAP32[$44>>2] = $res$1$lcssa;
  $70 = (($38) + 1)|0;
  STACKTOP = sp;return ($70|0);
 }
 $46 = ($i$03|0)>(0);
 if ($46) {
  $i$11 = $i$03;$res$12 = $res$04;
 } else {
  $res$1$lcssa = $res$04;
  HEAP32[$44>>2] = $res$1$lcssa;
  $70 = (($38) + 1)|0;
  STACKTOP = sp;return ($70|0);
 }
 while(1) {
  $66 = (($i$11) + -1)|0;
  $67 = (($res$12) + 16|0);
  $68 = (($res$12) + 8|0);
  HEAP32[$68>>2] = 0;
  $69 = ($66|0)>(0);
  if ($69) {
   $i$11 = $66;$res$12 = $67;
  } else {
   break;
  }
 }
 $scevgep = (($res$04) + ($i$03<<4)|0);
 $res$1$lcssa = $scevgep;
 HEAP32[$44>>2] = $res$1$lcssa;
 $70 = (($38) + 1)|0;
 STACKTOP = sp;return ($70|0);
}
function _luaD_call($L,$func,$nResults) {
 $L = $L|0;
 $func = $func|0;
 $nResults = $nResults|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($L) + 52|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 $3 = ($2&65535)>(199);
 do {
  if ($3) {
   $4 = ($2<<16>>16)==(200);
   if ($4) {
    _luaG_runerror($L,1552,$vararg_buffer);
    break;
   }
   $5 = ($2&65535)>(224);
   if ($5) {
    _luaD_throw($L,5);
    // unreachable;
   }
  }
 } while(0);
 $6 = (_luaD_precall($L,$func,$nResults)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  _luaV_execute($L,1);
 }
 $8 = HEAP16[$0>>1]|0;
 $9 = (($8) + -1)<<16>>16;
 HEAP16[$0>>1] = $9;
 $10 = (($L) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13>>>0)<($15>>>0);
 if ($16) {
  STACKTOP = sp;return;
 }
 _luaC_step($L);
 STACKTOP = sp;return;
}
function _luaD_pcall($L,$func,$u,$old_top,$ef) {
 $L = $L|0;
 $func = $func|0;
 $u = $u|0;
 $old_top = $old_top|0;
 $ef = $ef|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 52|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($L) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($L) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($L) + 57|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($L) + 116|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = $ef;
 $10 = (_luaD_rawrunprotected($L,$func,$u)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  HEAP32[$8>>2] = $9;
  STACKTOP = sp;return ($10|0);
 }
 $12 = $5;
 $13 = $3;
 $14 = (($13) - ($12))|0;
 $15 = (($L) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($old_top)|0);
 _luaF_close($L,$17);
 if ((($10|0) == 5)) {
  $20 = (_luaS_newlstr($L,1528,23)|0);
  HEAP32[$17>>2] = $20;
  $$sum2 = (($old_top) + 8)|0;
  $21 = (($16) + ($$sum2)|0);
  HEAP32[$21>>2] = 4;
 } else if ((($10|0) == 4)) {
  $18 = (_luaS_newlstr($L,1504,17)|0);
  HEAP32[$17>>2] = $18;
  $$sum3 = (($old_top) + 8)|0;
  $19 = (($16) + ($$sum3)|0);
  HEAP32[$19>>2] = 4;
 } else if ((($10|0) == 2) | (($10|0) == 3)) {
  $22 = (($L) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + -16|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = $17;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $30;
  $35 = (($23) + -8|0);
  $36 = HEAP32[$35>>2]|0;
  $$sum = (($old_top) + 8)|0;
  $37 = (($16) + ($$sum)|0);
  HEAP32[$37>>2] = $36;
 }
 $$sum1 = (($old_top) + 16)|0;
 $38 = (($16) + ($$sum1)|0);
 $39 = (($L) + 8|0);
 HEAP32[$39>>2] = $38;
 HEAP16[$0>>1] = $1;
 $40 = HEAP32[$4>>2]|0;
 $41 = (($40) + ($14)|0);
 HEAP32[$2>>2] = $41;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($L) + 12|0);
 HEAP32[$43>>2] = $42;
 $$sum4 = (($14) + 12)|0;
 $44 = (($40) + ($$sum4)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($L) + 24|0);
 HEAP32[$46>>2] = $45;
 HEAP8[$6>>0] = $7;
 $47 = (($L) + 48|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)>(20000);
 if (!($49)) {
  HEAP32[$8>>2] = $9;
  STACKTOP = sp;return ($10|0);
 }
 $50 = $41;
 $51 = $40;
 $52 = (($50) - ($51))|0;
 $53 = (($52|0) / 24)&-1;
 $54 = (($53) + 1)|0;
 $55 = ($54|0)<(20000);
 if (!($55)) {
  HEAP32[$8>>2] = $9;
  STACKTOP = sp;return ($10|0);
 }
 $56 = ($48*24)|0;
 $57 = (_luaM_realloc_($L,$40,$56,480000)|0);
 HEAP32[$4>>2] = $57;
 HEAP32[$47>>2] = 20000;
 $58 = HEAP32[$2>>2]|0;
 $59 = $58;
 $60 = (($59) - ($51))|0;
 $61 = (($60|0) / 24)&-1;
 $62 = (($57) + (($61*24)|0)|0);
 HEAP32[$2>>2] = $62;
 $63 = (($57) + 479976|0);
 $64 = (($L) + 36|0);
 HEAP32[$64>>2] = $63;
 HEAP32[$8>>2] = $9;
 STACKTOP = sp;return ($10|0);
}
function _luaD_protectedparser($L,$z,$name) {
 $L = $L|0;
 $z = $z|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 HEAP32[$p>>2] = $z;
 $0 = (($p) + 16|0);
 HEAP32[$0>>2] = $name;
 $1 = (($p) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($p) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($L) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = (($L) + 116|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_luaD_pcall($L,5,$p,$9,$11)|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 (_luaM_realloc_($L,$13,$14,0)|0);
 STACKTOP = sp;return ($12|0);
}
function _f_parser($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = (_luaZ_lookahead($0)|0);
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)<($7>>>0);
 if (!($8)) {
  _luaC_step($L);
 }
 $9 = ($1|0)==(27);
 $10 = $9 ? 7 : 6;
 $11 = HEAP32[$ud>>2]|0;
 $12 = (($ud) + 4|0);
 $13 = (($ud) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iiiii[$10 & 15]($L,$11,$12,$14)|0);
 $16 = (($15) + 72|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (($L) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_luaF_newLclosure($L,$18,$20)|0);
 $22 = (($21) + 16|0);
 HEAP32[$22>>2] = $15;
 $23 = HEAP8[$16>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $i$01 = 0;
  while(1) {
   $25 = (_luaF_newupval($L)|0);
   $26 = ((($21) + ($i$01<<2)|0) + 20|0);
   HEAP32[$26>>2] = $25;
   $27 = (($i$01) + 1)|0;
   $28 = HEAP8[$16>>0]|0;
   $29 = $28&255;
   $30 = ($27|0)<($29|0);
   if ($30) {
    $i$01 = $27;
   } else {
    break;
   }
  }
 }
 $31 = (($L) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$32>>2] = $21;
 $33 = (($32) + 8|0);
 HEAP32[$33>>2] = 6;
 $34 = (($L) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$31>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = ($39|0)<(17);
 if (!($40)) {
  $46 = HEAP32[$31>>2]|0;
  $47 = (($46) + 16|0);
  HEAP32[$31>>2] = $47;
  STACKTOP = sp;return;
 }
 $41 = (($L) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)<(1);
 if ($43) {
  $45 = (($42) + 1)|0;
  _luaD_reallocstack($L,$45);
  $46 = HEAP32[$31>>2]|0;
  $47 = (($46) + 16|0);
  HEAP32[$31>>2] = $47;
  STACKTOP = sp;return;
 } else {
  $44 = $42 << 1;
  _luaD_reallocstack($L,$44);
  $46 = HEAP32[$31>>2]|0;
  $47 = (($46) + 16|0);
  HEAP32[$31>>2] = $47;
  STACKTOP = sp;return;
 }
}
function _luaU_dump($L,$f,$w,$data,$strip) {
 $L = $L|0;
 $f = $f|0;
 $w = $w|0;
 $data = $data|0;
 $strip = $strip|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $D = 0, $h$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h$i = sp + 20|0;
 $D = sp;
 HEAP32[$D>>2] = $L;
 $0 = (($D) + 4|0);
 HEAP32[$0>>2] = $w;
 $1 = (($D) + 8|0);
 HEAP32[$1>>2] = $data;
 $2 = (($D) + 12|0);
 HEAP32[$2>>2] = $strip;
 $3 = (($D) + 16|0);
 _luaU_header($h$i);
 $4 = (FUNCTION_TABLE_iiiii[$w & 15]($L,$h$i,12,$data)|0);
 HEAP32[$3>>2] = $4;
 _DumpFunction($f,0,$D);
 $5 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _DumpFunction($f,$p,$D) {
 $f = $f|0;
 $p = $p|0;
 $D = $D|0;
 var $$ph = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond11$i = 0, $exitcond16 = 0, $i$0$i14 = 0, $i$09$i = 0, $i$1$i13 = 0, $i$18$i = 0, $size$i = 0, $size$i$i = 0, $size$i$i8 = 0, $size$i4$i = 0, $size1$i = 0, $size1$i$i = 0;
 var $size1$i$i9 = 0, $size1$i5$i = 0, $x$i = 0, $x$i$i = 0, $x$i1$i = 0, $x$i2 = 0, $x$i4 = 0, $x$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 76|0;
 $size$i$i8 = sp + 72|0;
 $size1$i$i9 = sp + 68|0;
 $1 = sp;
 $x$i1$i = sp + 85|0;
 $x$i$i = sp + 84|0;
 $2 = sp + 64|0;
 $3 = sp + 60|0;
 $x$i6 = sp + 83|0;
 $x$i4 = sp + 82|0;
 $x$i2 = sp + 81|0;
 $x$i = sp + 80|0;
 $4 = sp + 56|0;
 $5 = sp + 52|0;
 $size$i = sp + 48|0;
 $size1$i = sp + 44|0;
 $size$i4$i = sp + 40|0;
 $size1$i5$i = sp + 36|0;
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $size$i$i = sp + 20|0;
 $size1$i$i = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = (($f) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($p|0);
 if ($13) {
  label = 3;
 } else {
  $14 = (($D) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = ($12|0)==(0|0);
   if ($17) {
    $26 = $size$i;$333 = $size1$i;
    label = 5;
   } else {
    $28 = (($12) + 16|0);
    $29 = (($12) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$size1$i>>2] = $31;
    $32 = (($D) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0);
    if ($34) {
     $35 = (($D) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = HEAP32[$D>>2]|0;
     $38 = (($D) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_iiiii[$36 & 15]($37,$size1$i,4,$39)|0);
     HEAP32[$32>>2] = $40;
     $41 = ($40|0)==(0);
     if ($41) {
      $42 = HEAP32[$size1$i>>2]|0;
      $43 = HEAP32[$35>>2]|0;
      $44 = HEAP32[$D>>2]|0;
      $45 = HEAP32[$38>>2]|0;
      $46 = (FUNCTION_TABLE_iiiii[$43 & 15]($44,$28,$42,$45)|0);
      HEAP32[$32>>2] = $46;
      $334 = $size1$i;$335 = $size$i;
     } else {
      $334 = $size1$i;$335 = $size$i;
     }
    } else {
     $334 = $size1$i;$335 = $size$i;
    }
   }
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $26 = $size$i;$333 = $size1$i;
  label = 5;
 }
 if ((label|0) == 5) {
  HEAP32[$size$i>>2] = 0;
  $18 = (($D) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = (($D) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$D>>2]|0;
   $24 = (($D) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $27 = (FUNCTION_TABLE_iiiii[$22 & 15]($23,$26,4,$25)|0);
   HEAP32[$18>>2] = $27;
   $334 = $333;$335 = $26;
  } else {
   $334 = $333;$335 = $26;
  }
 }
 $47 = (($f) + 60|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$5>>2] = $48;
 $49 = (($D) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0);
 if ($51) {
  $52 = (($D) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$D>>2]|0;
  $55 = (($D) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (FUNCTION_TABLE_iiiii[$53 & 15]($54,$5,4,$56)|0);
  HEAP32[$49>>2] = $57;
  $60 = $57;
 } else {
  $60 = $50;
 }
 $58 = (($f) + 64|0);
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$4>>2] = $59;
 $61 = ($60|0)==(0);
 if ($61) {
  $62 = (($D) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$D>>2]|0;
  $65 = (($D) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_iiiii[$63 & 15]($64,$4,4,$66)|0);
  HEAP32[$49>>2] = $67;
  $70 = $67;
 } else {
  $70 = $60;
 }
 $68 = (($f) + 72|0);
 $69 = HEAP8[$68>>0]|0;
 HEAP8[$x$i>>0] = $69;
 $71 = ($70|0)==(0);
 if ($71) {
  $72 = (($D) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = HEAP32[$D>>2]|0;
  $75 = (($D) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (FUNCTION_TABLE_iiiii[$73 & 15]($74,$x$i,1,$76)|0);
  HEAP32[$49>>2] = $77;
  $80 = $77;
 } else {
  $80 = $70;
 }
 $78 = (($f) + 73|0);
 $79 = HEAP8[$78>>0]|0;
 HEAP8[$x$i2>>0] = $79;
 $81 = ($80|0)==(0);
 if ($81) {
  $82 = (($D) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP32[$D>>2]|0;
  $85 = (($D) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_iiiii[$83 & 15]($84,$x$i2,1,$86)|0);
  HEAP32[$49>>2] = $87;
  $90 = $87;
 } else {
  $90 = $80;
 }
 $88 = (($f) + 74|0);
 $89 = HEAP8[$88>>0]|0;
 HEAP8[$x$i4>>0] = $89;
 $91 = ($90|0)==(0);
 if ($91) {
  $92 = (($D) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$D>>2]|0;
  $95 = (($D) + 8|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (FUNCTION_TABLE_iiiii[$93 & 15]($94,$x$i4,1,$96)|0);
  HEAP32[$49>>2] = $97;
  $100 = $97;
 } else {
  $100 = $90;
 }
 $98 = (($f) + 75|0);
 $99 = HEAP8[$98>>0]|0;
 HEAP8[$x$i6>>0] = $99;
 $101 = ($100|0)==(0);
 if ($101) {
  $102 = (($D) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = HEAP32[$D>>2]|0;
  $105 = (($D) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (FUNCTION_TABLE_iiiii[$103 & 15]($104,$x$i6,1,$106)|0);
  HEAP32[$49>>2] = $107;
  $112 = $107;
 } else {
  $112 = $100;
 }
 $108 = (($f) + 12|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($f) + 44|0);
 $111 = HEAP32[$110>>2]|0;
 HEAP32[$3>>2] = $111;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = (($D) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = HEAP32[$D>>2]|0;
  $117 = (($D) + 8|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_iiiii[$115 & 15]($116,$3,4,$118)|0);
  HEAP32[$49>>2] = $119;
  $120 = ($119|0)==(0);
  if ($120) {
   $123 = $111 << 2;
   $124 = HEAP32[$114>>2]|0;
   $125 = HEAP32[$D>>2]|0;
   $126 = HEAP32[$117>>2]|0;
   $127 = (FUNCTION_TABLE_iiiii[$124 & 15]($125,$109,$123,$126)|0);
   HEAP32[$49>>2] = $127;
   $128 = (($f) + 40|0);
   $129 = HEAP32[$128>>2]|0;
   HEAP32[$2>>2] = $129;
   $130 = ($127|0)==(0);
   if ($130) {
    $131 = (($D) + 4|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = HEAP32[$D>>2]|0;
    $134 = (($D) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (FUNCTION_TABLE_iiiii[$132 & 15]($133,$2,4,$135)|0);
    HEAP32[$49>>2] = $136;
    $137 = $129;$336 = $136;
   } else {
    $137 = $129;$336 = $127;
   }
  } else {
   $$ph = $119;
   label = 24;
  }
 } else {
  $$ph = $112;
  label = 24;
 }
 if ((label|0) == 24) {
  $121 = (($f) + 40|0);
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$2>>2] = $122;
  $137 = $122;$336 = $$ph;
 }
 $138 = ($137|0)>(0);
 if ($138) {
  $139 = (($f) + 8|0);
  $140 = (($D) + 4|0);
  $141 = (($D) + 8|0);
  $147 = $336;$i$0$i14 = 0;
  while(1) {
   $142 = HEAP32[$139>>2]|0;
   $143 = (($142) + ($i$0$i14<<4)|0);
   $144 = ((($142) + ($i$0$i14<<4)|0) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $145&255;
   HEAP8[$x$i$i>>0] = $146;
   $148 = ($147|0)==(0);
   if ($148) {
    $149 = HEAP32[$140>>2]|0;
    $150 = HEAP32[$D>>2]|0;
    $151 = HEAP32[$141>>2]|0;
    $152 = (FUNCTION_TABLE_iiiii[$149 & 15]($150,$x$i$i,1,$151)|0);
    HEAP32[$49>>2] = $152;
    $$pre = HEAP32[$144>>2]|0;
    $155 = $152;$337 = $$pre;
   } else {
    $155 = $147;$337 = $145;
   }
   do {
    if ((($337|0) == 1)) {
     $153 = HEAP32[$143>>2]|0;
     $154 = $153&255;
     HEAP8[$x$i1$i>>0] = $154;
     $156 = ($155|0)==(0);
     if ($156) {
      $157 = HEAP32[$140>>2]|0;
      $158 = HEAP32[$D>>2]|0;
      $159 = HEAP32[$141>>2]|0;
      $160 = (FUNCTION_TABLE_iiiii[$157 & 15]($158,$x$i1$i,1,$159)|0);
      HEAP32[$49>>2] = $160;
      $338 = $160;
     } else {
      $338 = $155;
     }
    } else if ((($337|0) == 3)) {
     $161 = +HEAPF64[$143>>3];
     HEAPF64[$1>>3] = $161;
     $162 = ($155|0)==(0);
     if ($162) {
      $163 = HEAP32[$140>>2]|0;
      $164 = HEAP32[$D>>2]|0;
      $165 = HEAP32[$141>>2]|0;
      $166 = (FUNCTION_TABLE_iiiii[$163 & 15]($164,$1,8,$165)|0);
      HEAP32[$49>>2] = $166;
      $338 = $166;
     } else {
      $338 = $155;
     }
    } else if ((($337|0) == 4)) {
     $167 = HEAP32[$143>>2]|0;
     $168 = ($167|0)==(0|0);
     if ($168) {
      HEAP32[$size$i$i8>>2] = 0;
      $169 = ($155|0)==(0);
      if (!($169)) {
       $338 = $155;
       break;
      }
      $170 = HEAP32[$140>>2]|0;
      $171 = HEAP32[$D>>2]|0;
      $172 = HEAP32[$141>>2]|0;
      $173 = (FUNCTION_TABLE_iiiii[$170 & 15]($171,$size$i$i8,4,$172)|0);
      HEAP32[$49>>2] = $173;
      $338 = $173;
      break;
     }
     $174 = (($167) + 16|0);
     $175 = (($167) + 12|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (($176) + 1)|0;
     HEAP32[$size1$i$i9>>2] = $177;
     $178 = ($155|0)==(0);
     if ($178) {
      $179 = HEAP32[$140>>2]|0;
      $180 = HEAP32[$D>>2]|0;
      $181 = HEAP32[$141>>2]|0;
      $182 = (FUNCTION_TABLE_iiiii[$179 & 15]($180,$size1$i$i9,4,$181)|0);
      HEAP32[$49>>2] = $182;
      $183 = ($182|0)==(0);
      if ($183) {
       $184 = HEAP32[$size1$i$i9>>2]|0;
       $185 = HEAP32[$140>>2]|0;
       $186 = HEAP32[$D>>2]|0;
       $187 = HEAP32[$141>>2]|0;
       $188 = (FUNCTION_TABLE_iiiii[$185 & 15]($186,$174,$184,$187)|0);
       HEAP32[$49>>2] = $188;
       $338 = $188;
      } else {
       $338 = $182;
      }
     } else {
      $338 = $155;
     }
    } else {
     $338 = $155;
    }
   } while(0);
   $189 = (($i$0$i14) + 1)|0;
   $exitcond16 = ($189|0)==($137|0);
   if ($exitcond16) {
    $192 = $338;
    break;
   } else {
    $147 = $338;$i$0$i14 = $189;
   }
  }
 } else {
  $192 = $336;
 }
 $190 = (($f) + 52|0);
 $191 = HEAP32[$190>>2]|0;
 HEAP32[$0>>2] = $191;
 $193 = ($192|0)==(0);
 if ($193) {
  $194 = (($D) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = HEAP32[$D>>2]|0;
  $197 = (($D) + 8|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = (FUNCTION_TABLE_iiiii[$195 & 15]($196,$0,4,$198)|0);
  HEAP32[$49>>2] = $199;
 }
 $200 = ($191|0)>(0);
 if ($200) {
  $201 = (($f) + 16|0);
  $i$1$i13 = 0;
  while(1) {
   $202 = HEAP32[$201>>2]|0;
   $203 = (($202) + ($i$1$i13<<2)|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = HEAP32[$11>>2]|0;
   _DumpFunction($204,$205,$D);
   $206 = (($i$1$i13) + 1)|0;
   $exitcond = ($206|0)==($191|0);
   if ($exitcond) {
    break;
   } else {
    $i$1$i13 = $206;
   }
  }
 }
 $207 = (($D) + 12|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ($208|0)==(0);
 if ($209) {
  $210 = (($f) + 48|0);
  $211 = HEAP32[$210>>2]|0;
  $214 = $211;
 } else {
  $214 = 0;
 }
 $212 = (($f) + 20|0);
 $213 = HEAP32[$212>>2]|0;
 HEAP32[$10>>2] = $214;
 $215 = HEAP32[$49>>2]|0;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = (($D) + 4|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = HEAP32[$D>>2]|0;
  $220 = (($D) + 8|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (FUNCTION_TABLE_iiiii[$218 & 15]($219,$10,4,$221)|0);
  HEAP32[$49>>2] = $222;
  $223 = ($222|0)==(0);
  if ($223) {
   $224 = $214 << 2;
   $225 = HEAP32[$217>>2]|0;
   $226 = HEAP32[$D>>2]|0;
   $227 = HEAP32[$220>>2]|0;
   $228 = (FUNCTION_TABLE_iiiii[$225 & 15]($226,$213,$224,$227)|0);
   HEAP32[$49>>2] = $228;
   $234 = $228;
  } else {
   $234 = $222;
  }
 } else {
  $234 = $215;
 }
 $229 = HEAP32[$207>>2]|0;
 $230 = ($229|0)==(0);
 if ($230) {
  $231 = (($f) + 56|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = $232;
 } else {
  $233 = 0;
 }
 HEAP32[$9>>2] = $233;
 $235 = ($234|0)==(0);
 if ($235) {
  $236 = (($D) + 4|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = HEAP32[$D>>2]|0;
  $239 = (($D) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (FUNCTION_TABLE_iiiii[$237 & 15]($238,$9,4,$240)|0);
  HEAP32[$49>>2] = $241;
  $339 = $241;
 } else {
  $339 = $234;
 }
 $242 = ($233|0)>(0);
 if ($242) {
  $243 = (($f) + 24|0);
  $244 = (($D) + 4|0);
  $245 = (($D) + 8|0);
  $250 = $339;$i$09$i = 0;
  while(1) {
   $246 = HEAP32[$243>>2]|0;
   $247 = (($246) + (($i$09$i*12)|0)|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = ($248|0)==(0|0);
   do {
    if ($249) {
     HEAP32[$size$i$i>>2] = 0;
     $251 = ($250|0)==(0);
     if (!($251)) {
      $274 = $250;
      break;
     }
     $252 = HEAP32[$244>>2]|0;
     $253 = HEAP32[$D>>2]|0;
     $254 = HEAP32[$245>>2]|0;
     $255 = (FUNCTION_TABLE_iiiii[$252 & 15]($253,$size$i$i,4,$254)|0);
     HEAP32[$49>>2] = $255;
     $274 = $255;
    } else {
     $256 = (($248) + 16|0);
     $257 = (($248) + 12|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = (($258) + 1)|0;
     HEAP32[$size1$i$i>>2] = $259;
     $260 = ($250|0)==(0);
     if (!($260)) {
      $274 = $250;
      break;
     }
     $261 = HEAP32[$244>>2]|0;
     $262 = HEAP32[$D>>2]|0;
     $263 = HEAP32[$245>>2]|0;
     $264 = (FUNCTION_TABLE_iiiii[$261 & 15]($262,$size1$i$i,4,$263)|0);
     HEAP32[$49>>2] = $264;
     $265 = ($264|0)==(0);
     if (!($265)) {
      $274 = $264;
      break;
     }
     $266 = HEAP32[$size1$i$i>>2]|0;
     $267 = HEAP32[$244>>2]|0;
     $268 = HEAP32[$D>>2]|0;
     $269 = HEAP32[$245>>2]|0;
     $270 = (FUNCTION_TABLE_iiiii[$267 & 15]($268,$256,$266,$269)|0);
     HEAP32[$49>>2] = $270;
     $274 = $270;
    }
   } while(0);
   $271 = HEAP32[$243>>2]|0;
   $272 = ((($271) + (($i$09$i*12)|0)|0) + 4|0);
   $273 = HEAP32[$272>>2]|0;
   HEAP32[$8>>2] = $273;
   $275 = ($274|0)==(0);
   if ($275) {
    $276 = HEAP32[$244>>2]|0;
    $277 = HEAP32[$D>>2]|0;
    $278 = HEAP32[$245>>2]|0;
    $279 = (FUNCTION_TABLE_iiiii[$276 & 15]($277,$8,4,$278)|0);
    HEAP32[$49>>2] = $279;
    $$pre$i = HEAP32[$243>>2]|0;
    $281 = $$pre$i;$283 = $279;
   } else {
    $281 = $271;$283 = $274;
   }
   $280 = ((($281) + (($i$09$i*12)|0)|0) + 8|0);
   $282 = HEAP32[$280>>2]|0;
   HEAP32[$7>>2] = $282;
   $284 = ($283|0)==(0);
   if ($284) {
    $285 = HEAP32[$244>>2]|0;
    $286 = HEAP32[$D>>2]|0;
    $287 = HEAP32[$245>>2]|0;
    $288 = (FUNCTION_TABLE_iiiii[$285 & 15]($286,$7,4,$287)|0);
    HEAP32[$49>>2] = $288;
    $340 = $288;
   } else {
    $340 = $283;
   }
   $289 = (($i$09$i) + 1)|0;
   $exitcond11$i = ($289|0)==($233|0);
   if ($exitcond11$i) {
    $295 = $340;
    break;
   } else {
    $250 = $340;$i$09$i = $289;
   }
  }
 } else {
  $295 = $339;
 }
 $290 = HEAP32[$207>>2]|0;
 $291 = ($290|0)==(0);
 if ($291) {
  $292 = (($f) + 36|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = $293;
 } else {
  $294 = 0;
 }
 HEAP32[$6>>2] = $294;
 $296 = ($295|0)==(0);
 if ($296) {
  $297 = (($D) + 4|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = HEAP32[$D>>2]|0;
  $300 = (($D) + 8|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = (FUNCTION_TABLE_iiiii[$298 & 15]($299,$6,4,$301)|0);
  HEAP32[$49>>2] = $302;
  $341 = $302;
 } else {
  $341 = $295;
 }
 $303 = ($294|0)>(0);
 if (!($303)) {
  STACKTOP = sp;return;
 }
 $304 = (($f) + 28|0);
 $305 = (($D) + 4|0);
 $306 = (($D) + 8|0);
 $311 = $341;$i$18$i = 0;
 while(1) {
  $307 = HEAP32[$304>>2]|0;
  $308 = (($307) + ($i$18$i<<2)|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = ($309|0)==(0|0);
  do {
   if ($310) {
    HEAP32[$size$i4$i>>2] = 0;
    $312 = ($311|0)==(0);
    if (!($312)) {
     $342 = $311;
     break;
    }
    $313 = HEAP32[$305>>2]|0;
    $314 = HEAP32[$D>>2]|0;
    $315 = HEAP32[$306>>2]|0;
    $316 = (FUNCTION_TABLE_iiiii[$313 & 15]($314,$size$i4$i,4,$315)|0);
    HEAP32[$49>>2] = $316;
    $342 = $316;
   } else {
    $317 = (($309) + 16|0);
    $318 = (($309) + 12|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = (($319) + 1)|0;
    HEAP32[$size1$i5$i>>2] = $320;
    $321 = ($311|0)==(0);
    if (!($321)) {
     $342 = $311;
     break;
    }
    $322 = HEAP32[$305>>2]|0;
    $323 = HEAP32[$D>>2]|0;
    $324 = HEAP32[$306>>2]|0;
    $325 = (FUNCTION_TABLE_iiiii[$322 & 15]($323,$size1$i5$i,4,$324)|0);
    HEAP32[$49>>2] = $325;
    $326 = ($325|0)==(0);
    if (!($326)) {
     $342 = $325;
     break;
    }
    $327 = HEAP32[$size1$i5$i>>2]|0;
    $328 = HEAP32[$305>>2]|0;
    $329 = HEAP32[$D>>2]|0;
    $330 = HEAP32[$306>>2]|0;
    $331 = (FUNCTION_TABLE_iiiii[$328 & 15]($329,$317,$327,$330)|0);
    HEAP32[$49>>2] = $331;
    $342 = $331;
   }
  } while(0);
  $332 = (($i$18$i) + 1)|0;
  $exitcond$i = ($332|0)==($294|0);
  if ($exitcond$i) {
   break;
  } else {
   $311 = $342;$i$18$i = $332;
  }
 }
 STACKTOP = sp;return;
}
function _luaF_newCclosure($L,$nelems,$e) {
 $L = $L|0;
 $nelems = $nelems|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $nelems << 4;
 $1 = (($0) + 24)|0;
 $2 = (_luaM_realloc_($L,0,0,$1)|0);
 _luaC_link($L,$2,6);
 $3 = (($2) + 6|0);
 HEAP8[$3>>0] = 1;
 $4 = (($2) + 12|0);
 HEAP32[$4>>2] = $e;
 $5 = $nelems&255;
 $6 = (($2) + 7|0);
 HEAP8[$6>>0] = $5;
 STACKTOP = sp;return ($2|0);
}
function _luaF_newLclosure($L,$nelems,$e) {
 $L = $L|0;
 $nelems = $nelems|0;
 $e = $e|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $nelems << 2;
 $1 = (($0) + 20)|0;
 $2 = (_luaM_realloc_($L,0,0,$1)|0);
 _luaC_link($L,$2,6);
 $3 = (($2) + 6|0);
 HEAP8[$3>>0] = 0;
 $4 = (($2) + 12|0);
 HEAP32[$4>>2] = $e;
 $5 = $nelems&255;
 $6 = (($2) + 7|0);
 HEAP8[$6>>0] = $5;
 $7 = ($nelems|0)==(0);
 if ($7) {
  STACKTOP = sp;return ($2|0);
 }
 $8 = (($2) + 20|0);
 $$in = $nelems;
 while(1) {
  $9 = (($$in) + -1)|0;
  $10 = (($8) + ($9<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = ($9|0)==(0);
  if ($11) {
   break;
  } else {
   $$in = $9;
  }
 }
 STACKTOP = sp;return ($2|0);
}
function _luaF_newupval($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaM_realloc_($L,0,0,32)|0);
 _luaC_link($L,$0,10);
 $1 = (($0) + 16|0);
 $2 = (($0) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($0) + 24|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return ($0|0);
}
function _luaF_findupval($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pp$0$lcssa = 0, $pp$03 = 0, $pp$03$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $pp$0$lcssa = $2;
  } else {
   $6 = $3;$pp$03 = $2;
   while(1) {
    $8 = (($6) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9>>>0)<($level>>>0);
    if ($10) {
     $pp$0$lcssa = $pp$03;
     break L1;
    }
    $11 = ($9|0)==($level|0);
    if ($11) {
     break;
    }
    $5 = HEAP32[$6>>2]|0;
    $7 = ($5|0)==(0|0);
    if ($7) {
     $pp$0$lcssa = $6;
     break L1;
    } else {
     $pp$03$phi = $6;$6 = $5;$pp$03 = $pp$03$phi;
    }
   }
   $12 = (($6) + 5|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = (($1) + 20|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = $17 ^ 3;
   $19 = $14 & 3;
   $20 = $19 & $18;
   $21 = ($20|0)==(0);
   if ($21) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $22 = $14 ^ 3;
   $23 = $22&255;
   HEAP8[$12>>0] = $23;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $24 = (_luaM_realloc_($L,0,0,32)|0);
 $25 = (($24) + 4|0);
 HEAP8[$25>>0] = 10;
 $26 = (($1) + 20|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 & 3;
 $30 = $29&255;
 $31 = (($24) + 5|0);
 HEAP8[$31>>0] = $30;
 $32 = (($24) + 8|0);
 HEAP32[$32>>2] = $level;
 $33 = HEAP32[$pp$0$lcssa>>2]|0;
 HEAP32[$24>>2] = $33;
 HEAP32[$pp$0$lcssa>>2] = $24;
 $34 = (($1) + 120|0);
 $35 = (($24) + 16|0);
 HEAP32[$35>>2] = $34;
 $36 = (($1) + 136|0);
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($24) + 20|0);
 HEAP32[$39>>2] = $38;
 $40 = (($38) + 16|0);
 HEAP32[$40>>2] = $24;
 HEAP32[$37>>2] = $24;
 $$0 = $24;
 STACKTOP = sp;return ($$0|0);
}
function _luaF_freeupval($L,$uv) {
 $L = $L|0;
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($uv) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($uv) + 16|0);
 $3 = ($1|0)==($2|0);
 if ($3) {
  (_luaM_realloc_($L,$uv,32,0)|0);
  STACKTOP = sp;return;
 }
 $4 = (($uv) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($4) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 16|0);
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $7;
 (_luaM_realloc_($L,$uv,32,0)|0);
 STACKTOP = sp;return;
}
function _luaF_close($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($L) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 20|0);
 $7 = $1;
 while(1) {
  $6 = (($7) + 8|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8>>>0)<($level>>>0);
  if ($9) {
   label = 10;
   break;
  }
  $10 = HEAP32[$7>>2]|0;
  HEAP32[$0>>2] = $10;
  $11 = (($7) + 5|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = HEAP8[$5>>0]|0;
  $15 = $14&255;
  $16 = $15 ^ 3;
  $17 = $13 & 3;
  $18 = $17 & $16;
  $19 = ($18|0)==(0);
  $20 = (($7) + 16|0);
  if ($19) {
   $29 = HEAP32[$20>>2]|0;
   $30 = (($20) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 16|0);
   HEAP32[$32>>2] = $29;
   $33 = HEAP32[$20>>2]|0;
   $34 = (($33) + 16|0);
   $35 = (($34) + 4|0);
   HEAP32[$35>>2] = $31;
   $36 = $8;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + 4)|0;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = $20;
   $43 = $42;
   HEAP32[$43>>2] = $38;
   $44 = (($42) + 4)|0;
   $45 = $44;
   HEAP32[$45>>2] = $41;
   $46 = (($8) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($20) + 8|0);
   $$c = $47;
   HEAP32[$48>>2] = $$c;
   HEAP32[$6>>2] = $20;
   _luaC_linkupval($L,$7);
  } else {
   $21 = ($8|0)==($20|0);
   if (!($21)) {
    $22 = HEAP32[$20>>2]|0;
    $23 = (($20) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + 16|0);
    HEAP32[$25>>2] = $22;
    $26 = HEAP32[$20>>2]|0;
    $27 = (($26) + 16|0);
    $28 = (($27) + 4|0);
    HEAP32[$28>>2] = $24;
   }
   (_luaM_realloc_($L,$7,32,0)|0);
  }
  $49 = HEAP32[$0>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   label = 10;
   break;
  } else {
   $7 = $49;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
}
function _luaF_newproto($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_luaM_realloc_($L,0,0,76)|0);
 _luaC_link($L,$0,9);
 $1 = (($0) + 8|0);
 $2 = (($0) + 72|0);
 dest=$1+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
 STACKTOP = sp;return ($0|0);
}
function _luaF_freeproto($L,$f) {
 $L = $L|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 2;
 (_luaM_realloc_($L,$1,$4,0)|0);
 $5 = (($f) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($f) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 2;
 (_luaM_realloc_($L,$6,$9,0)|0);
 $10 = (($f) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($f) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 4;
 (_luaM_realloc_($L,$11,$14,0)|0);
 $15 = (($f) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($f) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 2;
 (_luaM_realloc_($L,$16,$19,0)|0);
 $20 = (($f) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($f) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23*12)|0;
 (_luaM_realloc_($L,$21,$24,0)|0);
 $25 = (($f) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($f) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 << 2;
 (_luaM_realloc_($L,$26,$29,0)|0);
 (_luaM_realloc_($L,$f,76,0)|0);
 STACKTOP = sp;return;
}
function _luaF_freeclosure($L,$c) {
 $L = $L|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = (($c) + 7|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 if ($2) {
  $8 = $5 << 2;
  $9 = (($8) + 20)|0;
  $10 = $9;
 } else {
  $6 = $5 << 4;
  $7 = (($6) + 24)|0;
  $10 = $7;
 }
 (_luaM_realloc_($L,$c,$10,0)|0);
 STACKTOP = sp;return;
}
function _luaF_getlocalname($f,$local_number,$pc) {
 $f = $f|0;
 $local_number = $local_number|0;
 $pc = $pc|0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($f) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $$013 = $local_number;$i$04 = 0;
 while(1) {
  $5 = ((($4) + (($i$04*12)|0)|0) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>($pc|0);
  if ($7) {
   $$0 = 0;
   label = 8;
   break;
  }
  $8 = ((($4) + (($i$04*12)|0)|0) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>($pc|0);
  if ($10) {
   $11 = (($$013) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    label = 6;
    break;
   } else {
    $$1 = $11;
   }
  } else {
   $$1 = $$013;
  }
  $16 = (($i$04) + 1)|0;
  $17 = ($16|0)<($1|0);
  if ($17) {
   $$013 = $$1;$i$04 = $16;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = (($4) + (($i$04*12)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 16|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaC_separateudata($L,$all) {
 $L = $L|0;
 $all = $all|0;
 var $$lcssa7$pn = 0, $$lcssa8 = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
 var $deadmem$0$lcssa = 0, $deadmem$0$lcssa6 = 0, $deadmem$0$ph$be = 0, $deadmem$0$ph14 = 0, $deadmem$010 = 0, $deadmem$010$us = 0, $or$cond4 = 0, $p$0$ph13 = 0, $phitmp = 0, $phitmp$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $deadmem$0$lcssa = 0;
  STACKTOP = sp;return ($deadmem$0$lcssa|0);
 }
 $6 = ($all|0)==(0);
 $7 = (($1) + 48|0);
 $76 = $4;$deadmem$0$ph14 = 0;$p$0$ph13 = $3;
 L4: while(1) {
  L6: do {
   if ($6) {
    $39 = $76;$deadmem$010 = $deadmem$0$ph14;
    while(1) {
     $38 = (($39) + 5|0);
     $40 = HEAP8[$38>>0]|0;
     $41 = $40 & 3;
     $42 = ($41<<24>>24)!=(0);
     $43 = $40 & 8;
     $44 = ($43<<24>>24)==(0);
     $or$cond4 = $42 & $44;
     if (!($or$cond4)) {
      $$lcssa7$pn = $39;$deadmem$0$ph$be = $deadmem$010;
      break L6;
     }
     $47 = (($39) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==(0|0);
     if ($49) {
      $$lcssa8 = $39;$$lcssa9 = $38;$deadmem$0$lcssa6 = $deadmem$010;
      label = 17;
      break L6;
     }
     $50 = (($48) + 6|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51 & 4;
     $53 = ($52<<24>>24)==(0);
     if (!($53)) {
      $$lcssa8 = $39;$$lcssa9 = $38;$deadmem$0$lcssa6 = $deadmem$010;
      label = 17;
      break L6;
     }
     $54 = HEAP32[$0>>2]|0;
     $55 = (($54) + 196|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (_luaT_gettm($48,2,$56)|0);
     $phitmp = ($57|0)==(0|0);
     if ($phitmp) {
      $$lcssa8 = $39;$$lcssa9 = $38;$deadmem$0$lcssa6 = $deadmem$010;
      label = 17;
      break L6;
     }
     $62 = (($39) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($deadmem$010) + 24)|0;
     $65 = (($64) + ($63))|0;
     $66 = HEAP8[$38>>0]|0;
     $67 = $66&255;
     $68 = $67 | 8;
     $69 = $68&255;
     HEAP8[$38>>0] = $69;
     $70 = HEAP32[$39>>2]|0;
     HEAP32[$p$0$ph13>>2] = $70;
     $71 = HEAP32[$7>>2]|0;
     $72 = ($71|0)==(0|0);
     if ($72) {
      HEAP32[$39>>2] = $39;
     } else {
      $73 = HEAP32[$71>>2]|0;
      HEAP32[$39>>2] = $73;
      HEAP32[$71>>2] = $39;
     }
     HEAP32[$7>>2] = $39;
     $74 = HEAP32[$p$0$ph13>>2]|0;
     $75 = ($74|0)==(0|0);
     if ($75) {
      $deadmem$0$lcssa = $65;
      label = 22;
      break L4;
     } else {
      $39 = $74;$deadmem$010 = $65;
     }
    }
   } else {
    $9 = $76;$deadmem$010$us = $deadmem$0$ph14;
    while(1) {
     $8 = (($9) + 5|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = $10 & 8;
     $12 = ($11<<24>>24)==(0);
     if (!($12)) {
      $$lcssa7$pn = $9;$deadmem$0$ph$be = $deadmem$010$us;
      break L6;
     }
     $13 = (($9) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0|0);
     if ($15) {
      $$lcssa8 = $9;$$lcssa9 = $8;$deadmem$0$lcssa6 = $deadmem$010$us;
      label = 17;
      break L6;
     }
     $16 = (($14) + 6|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 & 4;
     $19 = ($18<<24>>24)==(0);
     if (!($19)) {
      $$lcssa8 = $9;$$lcssa9 = $8;$deadmem$0$lcssa6 = $deadmem$010$us;
      label = 17;
      break L6;
     }
     $20 = HEAP32[$0>>2]|0;
     $21 = (($20) + 196|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (_luaT_gettm($14,2,$22)|0);
     $phitmp$us = ($23|0)==(0|0);
     if ($phitmp$us) {
      $$lcssa8 = $9;$$lcssa9 = $8;$deadmem$0$lcssa6 = $deadmem$010$us;
      label = 17;
      break L6;
     }
     $24 = (($9) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($deadmem$010$us) + 24)|0;
     $27 = (($26) + ($25))|0;
     $28 = HEAP8[$8>>0]|0;
     $29 = $28&255;
     $30 = $29 | 8;
     $31 = $30&255;
     HEAP8[$8>>0] = $31;
     $32 = HEAP32[$9>>2]|0;
     HEAP32[$p$0$ph13>>2] = $32;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      HEAP32[$9>>2] = $9;
     } else {
      $35 = HEAP32[$33>>2]|0;
      HEAP32[$9>>2] = $35;
      HEAP32[$33>>2] = $9;
     }
     HEAP32[$7>>2] = $9;
     $36 = HEAP32[$p$0$ph13>>2]|0;
     $37 = ($36|0)==(0|0);
     if ($37) {
      $deadmem$0$lcssa = $27;
      label = 22;
      break L4;
     } else {
      $9 = $36;$deadmem$010$us = $27;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   $58 = HEAP8[$$lcssa9>>0]|0;
   $59 = $58&255;
   $60 = $59 | 8;
   $61 = $60&255;
   HEAP8[$$lcssa9>>0] = $61;
   $$lcssa7$pn = $$lcssa8;$deadmem$0$ph$be = $deadmem$0$lcssa6;
  }
  $45 = HEAP32[$$lcssa7$pn>>2]|0;
  $46 = ($45|0)==(0|0);
  if ($46) {
   $deadmem$0$lcssa = $deadmem$0$ph$be;
   label = 22;
   break;
  } else {
   $76 = $45;$deadmem$0$ph14 = $deadmem$0$ph$be;$p$0$ph13 = $$lcssa7$pn;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($deadmem$0$lcssa|0);
 }
 return 0|0;
}
function _luaC_callGCTM($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  _GCTM($L);
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 48|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _luaC_freeall($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 HEAP8[$2>>0] = 67;
 $3 = (($1) + 28|0);
 (_sweeplist($L,$3,-3)|0);
 $4 = (($1) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $i$01 = 0;
 while(1) {
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + ($i$01<<2)|0);
  (_sweeplist($L,$8,-3)|0);
  $9 = (($i$01) + 1)|0;
  $10 = HEAP32[$4>>2]|0;
  $11 = ($9|0)<($10|0);
  if ($11) {
   $i$01 = $9;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _luaC_step($L) {
 $L = $L|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lim$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*10)|0;
 $5 = ($4|0)==(0);
 $$ = $5 ? 2147483646 : $4;
 $6 = (($1) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) + 64|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $11 = (($1) + 76|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12))|0;
 HEAP32[$11>>2] = $13;
 $14 = (($1) + 21|0);
 $lim$0 = $$;
 while(1) {
  $15 = (_singlestep($L)|0);
  $16 = (($lim$0) - ($15))|0;
  $17 = HEAP8[$14>>0]|0;
  $18 = ($17<<24>>24)!=(0);
  $19 = ($16|0)>(0);
  $or$cond = $18 & $19;
  if ($or$cond) {
   $lim$0 = $16;
  } else {
   break;
  }
 }
 if (!($18)) {
  $26 = (($1) + 72|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27>>>0) / 100)&-1;
  $29 = (($1) + 80|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = Math_imul($30, $28)|0;
  HEAP32[$8>>2] = $31;
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$11>>2]|0;
 $21 = ($20>>>0)<(1024);
 if ($21) {
  $22 = HEAP32[$6>>2]|0;
  $23 = (($22) + 1024)|0;
  HEAP32[$8>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $24 = (($20) + -1024)|0;
  HEAP32[$11>>2] = $24;
  $25 = HEAP32[$6>>2]|0;
  HEAP32[$8>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _luaC_barrierf($L,$o,$v) {
 $L = $L|0;
 $o = $o|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 21|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(1);
 if ($4) {
  _reallymarkobject($1,$v);
  STACKTOP = sp;return;
 } else {
  $5 = (($o) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $7 & 248;
  $9 = (($1) + 20|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 & 3;
  $13 = $12 | $8;
  $14 = $13&255;
  HEAP8[$5>>0] = $14;
  STACKTOP = sp;return;
 }
}
function _luaC_barrierback($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 251;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = (($1) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($t) + 24|0);
 HEAP32[$9>>2] = $8;
 HEAP32[$7>>2] = $t;
 STACKTOP = sp;return;
}
function _luaC_link($L,$o,$tt) {
 $L = $L|0;
 $o = $o|0;
 $tt = $tt|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$o>>2] = $3;
 HEAP32[$2>>2] = $o;
 $4 = (($1) + 20|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 3;
 $8 = $7&255;
 $9 = (($o) + 5|0);
 HEAP8[$9>>0] = $8;
 $10 = (($o) + 4|0);
 HEAP8[$10>>0] = $tt;
 STACKTOP = sp;return;
}
function _luaC_linkupval($L,$uv) {
 $L = $L|0;
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$uv>>2] = $3;
 HEAP32[$2>>2] = $uv;
 $4 = (($uv) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 7;
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($1) + 21|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(1);
 if (!($11)) {
  $24 = $6 & 248;
  $25 = (($1) + 20|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 & 3;
  $29 = $28 | $24;
  $30 = $29&255;
  HEAP8[$4>>0] = $30;
  STACKTOP = sp;return;
 }
 $12 = $6 | 4;
 $13 = $12&255;
 HEAP8[$4>>0] = $13;
 $14 = (($uv) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(3);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$15>>2]|0;
 $20 = (($19) + 5|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 & 3;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 _reallymarkobject($1,$19);
 STACKTOP = sp;return;
}
function _GCTM($L) {
 $L = $L|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($3|0);
 if ($5) {
  HEAP32[$2>>2] = 0;
  $$pre$phiZ2D = $4;
 } else {
  $6 = HEAP32[$4>>2]|0;
  HEAP32[$3>>2] = $6;
  $$pre$phiZ2D = $4;
 }
 $7 = (($1) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$$pre$phiZ2D>>2] = $9;
 HEAP32[$8>>2] = $4;
 $10 = (($4) + 5|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 248;
 $14 = (($1) + 20|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 & 3;
 $18 = $17 | $13;
 $19 = $18&255;
 HEAP8[$10>>0] = $19;
 $20 = (($4) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = (($21) + 6|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 4;
 $26 = ($25<<24>>24)==(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = (($1) + 196|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_luaT_gettm($21,2,$28)|0);
 $30 = ($29|0)==(0|0);
 if ($30) {
  STACKTOP = sp;return;
 }
 $31 = (($L) + 57|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = (($1) + 64|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP8[$31>>0] = 0;
 $35 = (($1) + 68|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 << 1;
 HEAP32[$33>>2] = $37;
 $38 = (($L) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $29;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $39;
 $47 = $46;
 HEAP32[$47>>2] = $42;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = (($29) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($39) + 8|0);
 HEAP32[$52>>2] = $51;
 $53 = HEAP32[$38>>2]|0;
 $54 = (($53) + 16|0);
 HEAP32[$54>>2] = $4;
 $55 = (($53) + 24|0);
 HEAP32[$55>>2] = 7;
 $56 = HEAP32[$38>>2]|0;
 $57 = (($56) + 32|0);
 HEAP32[$38>>2] = $57;
 _luaD_call($L,$56,0);
 HEAP8[$31>>0] = $32;
 HEAP32[$33>>2] = $34;
 STACKTOP = sp;return;
}
function _sweeplist($L,$p,$count) {
 $L = $L|0;
 $p = $p|0;
 $count = $count|0;
 var $$0$be = 0, $$0$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 ^ 3;
 $6 = HEAP32[$p>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0$lcssa = $p;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $8 = (($1) + 28|0);
 $$012 = $count;$$03 = $p;$12 = $6;
 while(1) {
  $9 = (($$012) + -1)|0;
  $10 = ($$012|0)==(0);
  if ($10) {
   $$0$lcssa = $$03;
   label = 19;
   break;
  }
  $11 = (($12) + 4|0);
  $13 = HEAP8[$11>>0]|0;
  $14 = ($13<<24>>24)==(8);
  if ($14) {
   $15 = (($12) + 104|0);
   (_sweeplist($L,$15,-3)|0);
  }
  $16 = (($12) + 5|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 ^ 3;
  $20 = $19 & $5;
  $21 = ($20|0)==(0);
  L10: do {
   if ($21) {
    $30 = HEAP32[$12>>2]|0;
    HEAP32[$$03>>2] = $30;
    $31 = HEAP32[$8>>2]|0;
    $32 = ($12|0)==($31|0);
    if ($32) {
     $33 = HEAP32[$12>>2]|0;
     HEAP32[$8>>2] = $33;
    }
    $34 = HEAP8[$11>>0]|0;
    $35 = $34&255;
    switch ($35|0) {
    case 4:  {
     $36 = HEAP32[$0>>2]|0;
     $37 = (($36) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($38) + -1)|0;
     HEAP32[$37>>2] = $39;
     $40 = (($12) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($41) + 17)|0;
     (_luaM_realloc_($L,$12,$42,0)|0);
     $$0$be = $$03;
     break L10;
     break;
    }
    case 6:  {
     _luaF_freeclosure($L,$12);
     $$0$be = $$03;
     break L10;
     break;
    }
    case 10:  {
     _luaF_freeupval($L,$12);
     $$0$be = $$03;
     break L10;
     break;
    }
    case 9:  {
     _luaF_freeproto($L,$12);
     $$0$be = $$03;
     break L10;
     break;
    }
    case 5:  {
     _luaH_free($L,$12);
     $$0$be = $$03;
     break L10;
     break;
    }
    case 8:  {
     _luaE_freethread($L,$12);
     $$0$be = $$03;
     break L10;
     break;
    }
    case 7:  {
     $43 = (($12) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + 24)|0;
     (_luaM_realloc_($L,$12,$45,0)|0);
     $$0$be = $$03;
     break L10;
     break;
    }
    default: {
     $$0$be = $$03;
     break L10;
    }
    }
   } else {
    $22 = $18 & 248;
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $25 = $24 & 3;
    $26 = $25 | $22;
    $27 = $26&255;
    HEAP8[$16>>0] = $27;
    $$0$be = $12;
   }
  } while(0);
  $28 = HEAP32[$$0$be>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $$0$lcssa = $$0$be;
   label = 19;
   break;
  } else {
   $$012 = $9;$$03 = $$0$be;$12 = $28;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function _singlestep($L) {
 $L = $L|0;
 var $$0 = 0, $$09$i$i = 0, $$in$i$i = 0, $$in11$i$i = 0, $$pre = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $m$0$lcssa$i12$i = 0, $m$01$i10$i = 0, $not$$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond12$i$i = 0, $or$cond8$i$i = 0, $phitmp = 0, $sum = 0;
 var $u$0$i$i = 0, $uv$0$i$i = 0, $uv$0$in$i$i = 0, $uv$0$in3$i$i = 0, $uv$04$i$i = 0, $uv$05$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 21|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 1:  {
  $5 = (($1) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = (_propagatemark($1)|0);
   $$0 = $8;
   STACKTOP = sp;return ($$0|0);
  }
  $9 = (($1) + 120|0);
  $10 = (($1) + 136|0);
  $uv$0$in3$i$i = (($10) + 4|0);
  $uv$04$i$i = HEAP32[$uv$0$in3$i$i>>2]|0;
  $11 = ($uv$04$i$i|0)==($9|0);
  if (!($11)) {
   $uv$05$i$i = $uv$04$i$i;
   while(1) {
    $12 = (($uv$05$i$i) + 5|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 & 7;
    $15 = ($14<<24>>24)==(0);
    if ($15) {
     $16 = (($uv$05$i$i) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (($17) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)>(3);
     if ($20) {
      $21 = HEAP32[$17>>2]|0;
      $22 = (($21) + 5|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = $23 & 3;
      $25 = ($24<<24>>24)==(0);
      if (!($25)) {
       _reallymarkobject($1,$21);
      }
     }
    }
    $26 = (($uv$05$i$i) + 16|0);
    $uv$0$in$i$i = (($26) + 4|0);
    $uv$0$i$i = HEAP32[$uv$0$in$i$i>>2]|0;
    $27 = ($uv$0$i$i|0)==($9|0);
    if ($27) {
     break;
    } else {
     $uv$05$i$i = $uv$0$i$i;
    }
   }
   $$pre = HEAP32[$5>>2]|0;
   $phitmp = ($$pre|0)==(0|0);
   if (!($phitmp)) {
    while(1) {
     (_propagatemark($1)|0);
     $28 = HEAP32[$5>>2]|0;
     $29 = ($28|0)==(0|0);
     if ($29) {
      break;
     }
    }
   }
  }
  $30 = (($1) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$5>>2] = $31;
  HEAP32[$30>>2] = 0;
  $32 = (($L) + 5|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 & 3;
  $35 = ($34<<24>>24)==(0);
  if (!($35)) {
   _reallymarkobject($1,$L);
  }
  _markmt($1);
  $36 = HEAP32[$5>>2]|0;
  $37 = ($36|0)==(0|0);
  if (!($37)) {
   while(1) {
    (_propagatemark($1)|0);
    $38 = HEAP32[$5>>2]|0;
    $39 = ($38|0)==(0|0);
    if ($39) {
     break;
    }
   }
  }
  $40 = (($1) + 40|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$5>>2] = $41;
  HEAP32[$40>>2] = 0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   while(1) {
    (_propagatemark($1)|0);
    $43 = HEAP32[$5>>2]|0;
    $44 = ($43|0)==(0|0);
    if ($44) {
     break;
    }
   }
  }
  $45 = (_luaC_separateudata($L,0)|0);
  $46 = (($1) + 48|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if (!($48)) {
   $49 = (($1) + 20|0);
   $u$0$i$i = $47;
   while(1) {
    $50 = HEAP32[$u$0$i$i>>2]|0;
    $51 = (($50) + 5|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $53 & 248;
    $55 = HEAP8[$49>>0]|0;
    $56 = $55&255;
    $57 = $56 & 3;
    $58 = $57 | $54;
    $59 = $58&255;
    HEAP8[$51>>0] = $59;
    _reallymarkobject($1,$50);
    $60 = HEAP32[$46>>2]|0;
    $61 = ($50|0)==($60|0);
    if ($61) {
     break;
    } else {
     $u$0$i$i = $50;
    }
   }
  }
  $62 = HEAP32[$5>>2]|0;
  $63 = ($62|0)==(0|0);
  if ($63) {
   $m$0$lcssa$i12$i = 0;
  } else {
   $m$01$i10$i = 0;
   while(1) {
    $64 = (_propagatemark($1)|0);
    $65 = (($64) + ($m$01$i10$i))|0;
    $66 = HEAP32[$5>>2]|0;
    $67 = ($66|0)==(0|0);
    if ($67) {
     $m$0$lcssa$i12$i = $65;
     break;
    } else {
     $m$01$i10$i = $65;
    }
   }
  }
  $68 = HEAP32[$30>>2]|0;
  $69 = ($68|0)==(0|0);
  if (!($69)) {
   $$09$i$i = $68;
   while(1) {
    $70 = (($$09$i$i) + 28|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($$09$i$i) + 5|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73 & 16;
    $75 = ($74<<24>>24)==(0);
    $76 = ($71|0)==(0);
    $or$cond12$i$i = $75 | $76;
    if (!($or$cond12$i$i)) {
     $77 = (($$09$i$i) + 12|0);
     $78 = HEAP32[$77>>2]|0;
     $$in$i$i = $71;
     while(1) {
      $79 = (($$in$i$i) + -1)|0;
      $80 = ((($78) + ($79<<4)|0) + 8|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)>(3);
      do {
       if ($82) {
        $83 = (($78) + ($79<<4)|0);
        $84 = ($81|0)==(4);
        $85 = HEAP32[$83>>2]|0;
        $86 = (($85) + 5|0);
        $87 = HEAP8[$86>>0]|0;
        if ($84) {
         $88 = $87&255;
         $89 = $88 & 252;
         $90 = $89&255;
         HEAP8[$86>>0] = $90;
         break;
        }
        $91 = $87 & 3;
        $92 = ($91<<24>>24)==(0);
        if ($92) {
         $93 = ($81|0)==(7);
         $94 = $87 & 8;
         $95 = ($94<<24>>24)!=(0);
         $or$cond$i$i = $93 & $95;
         if (!($or$cond$i$i)) {
          break;
         }
        }
        HEAP32[$80>>2] = 0;
       }
      } while(0);
      $96 = ($79|0)==(0);
      if ($96) {
       break;
      } else {
       $$in$i$i = $79;
      }
     }
    }
    $97 = (($$09$i$i) + 7|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = 1 << $99;
    $101 = (($$09$i$i) + 16|0);
    $$in11$i$i = $100;
    while(1) {
     $102 = (($$in11$i$i) + -1)|0;
     $103 = HEAP32[$101>>2]|0;
     $104 = (($103) + ($102<<5)|0);
     $105 = ((($103) + ($102<<5)|0) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==(0);
     do {
      if (!($107)) {
       $109 = ((($103) + ($102<<5)|0) + 24|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($110|0)>(3);
       do {
        if ($111) {
         $112 = ((($103) + ($102<<5)|0) + 16|0);
         $113 = ($110|0)==(4);
         $114 = HEAP32[$112>>2]|0;
         $115 = (($114) + 5|0);
         $116 = HEAP8[$115>>0]|0;
         if ($113) {
          $117 = $116&255;
          $118 = $117 & 252;
          $119 = $118&255;
          HEAP8[$115>>0] = $119;
          label = 42;
          break;
         }
         $120 = $116 & 3;
         $not$$i$i = ($120<<24>>24)==(0);
         if ($not$$i$i) {
          label = 42;
         } else {
          HEAP32[$105>>2] = 0;
         }
        } else {
         label = 42;
        }
       } while(0);
       if ((label|0) == 42) {
        label = 0;
        $121 = ($106|0)>(3);
        if (!($121)) {
         break;
        }
        $122 = ($106|0)==(4);
        $123 = HEAP32[$104>>2]|0;
        $124 = (($123) + 5|0);
        $125 = HEAP8[$124>>0]|0;
        if ($122) {
         $126 = $125&255;
         $127 = $126 & 252;
         $128 = $127&255;
         HEAP8[$124>>0] = $128;
         break;
        }
        $129 = $125 & 3;
        $130 = ($129<<24>>24)==(0);
        if ($130) {
         $131 = ($106|0)==(7);
         $132 = $125 & 8;
         $133 = ($132<<24>>24)!=(0);
         $or$cond8$i$i = $131 & $133;
         if (!($or$cond8$i$i)) {
          break;
         }
        }
        HEAP32[$105>>2] = 0;
        if (!($111)) {
         break;
        }
       }
       HEAP32[$109>>2] = 11;
      }
     } while(0);
     $108 = ($102|0)==(0);
     if ($108) {
      break;
     } else {
      $$in11$i$i = $102;
     }
    }
    $134 = (($$09$i$i) + 24|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)==(0|0);
    if ($136) {
     break;
    } else {
     $$09$i$i = $135;
    }
   }
  }
  $137 = (($1) + 20|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $139 ^ 3;
  $141 = $140&255;
  HEAP8[$137>>0] = $141;
  $142 = (($1) + 24|0);
  HEAP32[$142>>2] = 0;
  $143 = (($1) + 28|0);
  $144 = (($1) + 32|0);
  HEAP32[$144>>2] = $143;
  HEAP8[$2>>0] = 2;
  $145 = (($1) + 68|0);
  $146 = HEAP32[$145>>2]|0;
  $sum = (($m$0$lcssa$i12$i) + ($45))|0;
  $147 = (($146) - ($sum))|0;
  $148 = (($1) + 72|0);
  HEAP32[$148>>2] = $147;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 0:  {
  _markroot($L);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $149 = (($1) + 68|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($1) + 24|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($152) + 1)|0;
  HEAP32[$151>>2] = $153;
  $154 = HEAP32[$1>>2]|0;
  $155 = (($154) + ($152<<2)|0);
  (_sweeplist($L,$155,-3)|0);
  $156 = HEAP32[$151>>2]|0;
  $157 = (($1) + 8|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($156|0)<($158|0);
  if (!($159)) {
   HEAP8[$2>>0] = 3;
  }
  $160 = HEAP32[$149>>2]|0;
  $161 = (($1) + 72|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($160) - ($150))|0;
  $164 = (($163) + ($162))|0;
  HEAP32[$161>>2] = $164;
  $$0 = 10;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $165 = (($1) + 68|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($1) + 32|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (_sweeplist($L,$168,40)|0);
  HEAP32[$167>>2] = $169;
  $170 = HEAP32[$169>>2]|0;
  $171 = ($170|0)==(0|0);
  if ($171) {
   $172 = HEAP32[$0>>2]|0;
   $173 = (($172) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($176|0) / 4)&-1;
   $178 = ($174>>>0)<($177>>>0);
   $179 = ($176|0)>(64);
   $or$cond$i = $178 & $179;
   if ($or$cond$i) {
    $180 = (($176|0) / 2)&-1;
    _luaS_resize($L,$180);
   }
   $181 = (($172) + 52|0);
   $182 = (($172) + 60|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ($183>>>0)>(64);
   if ($184) {
    $185 = $183 >>> 1;
    $186 = (($185) + 1)|0;
    $187 = ($186>>>0)<(4294967294);
    if ($187) {
     $188 = HEAP32[$181>>2]|0;
     $189 = (_luaM_realloc_($L,$188,$183,$185)|0);
     $$pre$phi$iZ2D = $181;$191 = $189;
    } else {
     $190 = (_luaM_toobig($L)|0);
     $$pre$phi$iZ2D = $181;$191 = $190;
    }
    HEAP32[$$pre$phi$iZ2D>>2] = $191;
    HEAP32[$182>>2] = $185;
   }
   HEAP8[$2>>0] = 4;
  }
  $192 = HEAP32[$165>>2]|0;
  $193 = (($1) + 72|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($192) - ($166))|0;
  $196 = (($195) + ($194))|0;
  HEAP32[$193>>2] = $196;
  $$0 = 400;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $197 = (($1) + 48|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ($198|0)==(0|0);
  if ($199) {
   HEAP8[$2>>0] = 0;
   $204 = (($1) + 76|0);
   HEAP32[$204>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  _GCTM($L);
  $200 = (($1) + 72|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201>>>0)>(100);
  if (!($202)) {
   $$0 = 100;
   STACKTOP = sp;return ($$0|0);
  }
  $203 = (($201) + -100)|0;
  HEAP32[$200>>2] = $203;
  $$0 = 100;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return 0|0;
}
function _markroot($L) {
 $L = $L|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 36|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 40|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 44|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 3;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $12 = $6;
 } else {
  _reallymarkobject($1,$6);
  $$pre = HEAP32[$5>>2]|0;
  $12 = $$pre;
 }
 $11 = (($12) + 80|0);
 $13 = HEAP32[$11>>2]|0;
 $14 = ($13|0)>(3);
 if ($14) {
  $15 = (($12) + 72|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 5|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 3;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   _reallymarkobject($1,$16);
  }
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 104|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)>(3);
 if (!($24)) {
  _markmt($1);
  $31 = (($1) + 21|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $25 = (($21) + 96|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 5|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 & 3;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  _markmt($1);
  $31 = (($1) + 21|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 _reallymarkobject($1,$26);
 _markmt($1);
 $31 = (($1) + 21|0);
 HEAP8[$31>>0] = 1;
 STACKTOP = sp;return;
}
function _reallymarkobject($g,$o) {
 $g = $g|0;
 $o = $o|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $o$tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $o$tr = $o;
 L1: while(1) {
  $0 = (($o$tr) + 5|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = $1&255;
  $3 = $2 & 252;
  $4 = $3&255;
  HEAP8[$0>>0] = $4;
  $5 = (($o$tr) + 4|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  switch ($7|0) {
  case 5:  {
   label = 14;
   break L1;
   break;
  }
  case 8:  {
   label = 15;
   break L1;
   break;
  }
  case 6:  {
   label = 13;
   break L1;
   break;
  }
  case 9:  {
   label = 16;
   break L1;
   break;
  }
  case 10:  {
   label = 8;
   break L1;
   break;
  }
  case 7:  {
   break;
  }
  default: {
   label = 17;
   break L1;
  }
  }
  $8 = (($o$tr) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3 | 4;
  $11 = $10&255;
  HEAP8[$0>>0] = $11;
  $12 = ($9|0)==(0|0);
  if (!($12)) {
   $13 = (($9) + 5|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 & 3;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    _reallymarkobject($g,$9);
   }
  }
  $17 = (($o$tr) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 5|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 & 3;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 17;
   break;
  }
  $o$tr = $18;
 }
 if ((label|0) == 8) {
  $23 = (($o$tr) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)>(3);
  if ($27) {
   $28 = HEAP32[$24>>2]|0;
   $29 = (($28) + 5|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 & 3;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $34 = $24;
   } else {
    _reallymarkobject($g,$28);
    $$pre = HEAP32[$23>>2]|0;
    $34 = $$pre;
   }
  } else {
   $34 = $24;
  }
  $33 = (($o$tr) + 16|0);
  $35 = ($34|0)==($33|0);
  if (!($35)) {
   STACKTOP = sp;return;
  }
  $36 = HEAP8[$0>>0]|0;
  $37 = $36&255;
  $38 = $37 | 4;
  $39 = $38&255;
  HEAP8[$0>>0] = $39;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 13) {
  $40 = (($g) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($o$tr) + 8|0);
  HEAP32[$42>>2] = $41;
  HEAP32[$40>>2] = $o$tr;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $43 = (($g) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($o$tr) + 24|0);
  HEAP32[$45>>2] = $44;
  HEAP32[$43>>2] = $o$tr;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  $46 = (($g) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($o$tr) + 108|0);
  HEAP32[$48>>2] = $47;
  HEAP32[$46>>2] = $o$tr;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  $49 = (($g) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($o$tr) + 68|0);
  HEAP32[$51>>2] = $50;
  HEAP32[$49>>2] = $o$tr;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _propagatemark($g) {
 $g = $g|0;
 var $$$i = 0, $$0 = 0, $$in$i = 0, $$lim$0$i = 0, $$not$i = 0, $$pr12$i = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i4 = 0, $$pre$phi19Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre$pre$phiZZ2D = 0, $$pre11$i = 0, $$pre18 = 0, $$pre6$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci$06$i = 0;
 var $exitcond = 0, $exitcond17 = 0, $i$04$i = 0, $i$09$i = 0, $i$16$i = 0, $i$23$i = 0, $i$31$i = 0, $i1$01$i = 0, $lim$0$lcssa$i = 0, $lim$05$i = 0, $o$0$lcssa$i = 0, $o$02$i = 0, $o$11$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond1$i$i = 0, $or$cond13$i = 0, $or$cond3$i = 0, $tmp = 0, $tmp12 = 0;
 var $tmp13 = 0, $tmp14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 | 4;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = (($1) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 if ((($9|0) == 8)) {
  $181 = (($1) + 108|0);
  $182 = HEAP32[$181>>2]|0;
  HEAP32[$0>>2] = $182;
  $183 = (($g) + 40|0);
  $184 = HEAP32[$183>>2]|0;
  HEAP32[$181>>2] = $184;
  HEAP32[$183>>2] = $1;
  $185 = $4 & 251;
  $186 = $185&255;
  HEAP8[$2>>0] = $186;
  $187 = (($1) + 80|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ($188|0)>(3);
  if ($189) {
   $190 = (($1) + 72|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = (($191) + 5|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193 & 3;
   $195 = ($194<<24>>24)==(0);
   if (!($195)) {
    _reallymarkobject($g,$191);
   }
  }
  $196 = (($1) + 8|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = (($1) + 40|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (($1) + 20|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($199>>>0)>($201>>>0);
  if ($202) {
   $lim$0$lcssa$i = $197;
  } else {
   $ci$06$i = $199;$lim$05$i = $197;
   while(1) {
    $203 = (($ci$06$i) + 8|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = ($lim$05$i>>>0)<($204>>>0);
    $$lim$0$i = $205 ? $204 : $lim$05$i;
    $206 = (($ci$06$i) + 24|0);
    $207 = ($206>>>0)>($201>>>0);
    if ($207) {
     $lim$0$lcssa$i = $$lim$0$i;
     break;
    } else {
     $ci$06$i = $206;$lim$05$i = $$lim$0$i;
    }
   }
  }
  $208 = (($1) + 32|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($209>>>0)<($197>>>0);
  if ($210) {
   $340 = $197;$o$02$i = $209;
   while(1) {
    $212 = (($o$02$i) + 8|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($213|0)>(3);
    if ($214) {
     $215 = HEAP32[$o$02$i>>2]|0;
     $216 = (($215) + 5|0);
     $217 = HEAP8[$216>>0]|0;
     $218 = $217 & 3;
     $219 = ($218<<24>>24)==(0);
     if ($219) {
      $222 = $340;
     } else {
      _reallymarkobject($g,$215);
      $$pre$i4 = HEAP32[$196>>2]|0;
      $222 = $$pre$i4;
     }
    } else {
     $222 = $340;
    }
    $220 = (($o$02$i) + 16|0);
    $221 = ($220>>>0)<($222>>>0);
    if ($221) {
     $340 = $222;$o$02$i = $220;
    } else {
     $o$0$lcssa$i = $220;
     break;
    }
   }
  } else {
   $o$0$lcssa$i = $209;
  }
  $211 = ($o$0$lcssa$i>>>0)>($lim$0$lcssa$i>>>0);
  if (!($211)) {
   $o$11$i = $o$0$lcssa$i;
   while(1) {
    $223 = (($o$11$i) + 8|0);
    HEAP32[$223>>2] = 0;
    $224 = (($o$11$i) + 16|0);
    $225 = ($224>>>0)>($lim$0$lcssa$i>>>0);
    if ($225) {
     break;
    } else {
     $o$11$i = $224;
    }
   }
  }
  $226 = HEAP32[$208>>2]|0;
  $227 = $lim$0$lcssa$i;
  $228 = $226;
  $229 = (($227) - ($228))|0;
  $230 = (($1) + 48|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ($231|0)>(20000);
  if ($232) {
   $$pre18 = (($1) + 44|0);
   $$pre$phi19Z2D = $$pre18;
  } else {
   $233 = HEAP32[$198>>2]|0;
   $234 = HEAP32[$200>>2]|0;
   $235 = $233;
   $236 = $234;
   $237 = (($236) - ($235))|0;
   $238 = (($237|0) / 24)&-1;
   $239 = $238 << 2;
   $240 = ($239|0)<($231|0);
   $241 = ($231|0)>(16);
   $or$cond$i$i = $240 & $241;
   if ($or$cond$i$i) {
    $242 = (($231|0) / 2)&-1;
    _luaD_reallocCI($1,$242);
   }
   $243 = $229 >> 2;
   $244 = (($1) + 44|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ($243|0)<($245|0);
   $247 = ($245|0)>(90);
   $or$cond1$i$i = $246 & $247;
   if ($or$cond1$i$i) {
    $248 = (($245|0) / 2)&-1;
    _luaD_reallocstack($1,$248);
    $$pre$phi19Z2D = $244;
   } else {
    $$pre$phi19Z2D = $244;
   }
  }
  $249 = HEAP32[$$pre$phi19Z2D>>2]|0;
  $250 = $249 << 4;
  $251 = (($250) + 120)|0;
  $252 = HEAP32[$230>>2]|0;
  $253 = ($252*24)|0;
  $254 = (($251) + ($253))|0;
  $$0 = $254;
  STACKTOP = sp;return ($$0|0);
 } else if ((($9|0) == 5)) {
  $10 = (($1) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$0>>2] = $11;
  $12 = (($1) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    $337 = 0;
    label = 13;
   } else {
    $15 = (($13) + 5|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 & 3;
    $18 = ($17<<24>>24)==(0);
    if ($18) {
     $$pr12$i = $13;
    } else {
     _reallymarkobject($g,$13);
     $19 = HEAP32[$12>>2]|0;
     $20 = ($19|0)==(0|0);
     if ($20) {
      $337 = 0;
      label = 13;
      break;
     } else {
      $$pr12$i = $19;
     }
    }
    $21 = (($$pr12$i) + 6|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22 & 8;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $25 = (($g) + 200|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (_luaT_gettm($$pr12$i,3,$26)|0);
     $28 = ($27|0)==(0|0);
     if ($28) {
      $337 = 0;
      label = 13;
     } else {
      $29 = (($27) + 8|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ($30|0)==(4);
      if ($31) {
       $32 = HEAP32[$27>>2]|0;
       $33 = (($32) + 16|0);
       $34 = (_strchr($33,107)|0);
       $35 = ($34|0)!=(0|0);
       $36 = (_strchr($33,118)|0);
       $37 = ($36|0)!=(0|0);
       $or$cond$i = $35 | $37;
       if ($or$cond$i) {
        $38 = $37&1;
        $39 = $35&1;
        $40 = HEAP8[$2>>0]|0;
        $41 = $40&255;
        $42 = $41 & 231;
        $43 = $39 << 3;
        $44 = $38 << 4;
        $45 = $44 | $43;
        $46 = $45 | $42;
        $47 = $46&255;
        HEAP8[$2>>0] = $47;
        $48 = (($g) + 44|0);
        $49 = HEAP32[$48>>2]|0;
        HEAP32[$10>>2] = $49;
        HEAP32[$48>>2] = $1;
       }
       $or$cond3$i = $35 & $37;
       if ($or$cond3$i) {
        $$pre$pre = (($1) + 7|0);
        $$pre$pre$phiZZ2D = $$pre$pre;
        label = 40;
        break;
       } else {
        if ($37) {
         $114 = $35;$72 = 1;
         label = 19;
         break;
        } else {
         $337 = $35;
         label = 13;
         break;
        }
       }
      } else {
       $337 = 0;
       label = 13;
      }
     }
    } else {
     $337 = 0;
     label = 13;
    }
   }
  } while(0);
  if ((label|0) == 13) {
   $50 = (($1) + 28|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0);
   if ($52) {
    $114 = $337;$72 = 0;
    label = 19;
   } else {
    $53 = (($1) + 12|0);
    $$in$i = $51;
    while(1) {
     $54 = (($$in$i) + -1)|0;
     $55 = HEAP32[$53>>2]|0;
     $56 = ((($55) + ($54<<4)|0) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)>(3);
     if ($58) {
      $59 = (($55) + ($54<<4)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = (($60) + 5|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62 & 3;
      $64 = ($63<<24>>24)==(0);
      if (!($64)) {
       _reallymarkobject($g,$60);
      }
     }
     $65 = ($54|0)==(0);
     if ($65) {
      $114 = $337;$72 = 0;
      label = 19;
      break;
     } else {
      $$in$i = $54;
     }
    }
   }
  }
  if ((label|0) == 19) {
   $66 = (($1) + 7|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = 1 << $68;
   $70 = (($69) + -1)|0;
   $71 = (($1) + 16|0);
   if ($114) {
    $$not$i = $72 ^ 1;
    $75 = $70;
    while(1) {
     $73 = HEAP32[$71>>2]|0;
     $74 = (($73) + ($75<<5)|0);
     $76 = ((($73) + ($75<<5)|0) + 8|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==(0);
     if ($78) {
      $85 = ((($73) + ($75<<5)|0) + 24|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)>(3);
      if ($87) {
       HEAP32[$85>>2] = 11;
      }
     } else {
      $79 = ($77|0)>(3);
      $or$cond13$i = $79 & $$not$i;
      if ($or$cond13$i) {
       $80 = HEAP32[$74>>2]|0;
       $81 = (($80) + 5|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = $82 & 3;
       $84 = ($83<<24>>24)==(0);
       if (!($84)) {
        _reallymarkobject($g,$80);
       }
      }
     }
     $88 = (($75) + -1)|0;
     $89 = ($75|0)==(0);
     if ($89) {
      break;
     } else {
      $75 = $88;
     }
    }
   } else {
    $92 = $70;
    while(1) {
     $90 = HEAP32[$71>>2]|0;
     $91 = (($90) + ($92<<5)|0);
     $93 = ((($90) + ($92<<5)|0) + 8|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94|0)==(0);
     $96 = ((($90) + ($92<<5)|0) + 24|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)>(3);
     if ($95) {
      if ($98) {
       HEAP32[$96>>2] = 11;
      }
     } else {
      if ($98) {
       $99 = ((($90) + ($92<<5)|0) + 16|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (($100) + 5|0);
       $102 = HEAP8[$101>>0]|0;
       $103 = $102 & 3;
       $104 = ($103<<24>>24)==(0);
       if (!($104)) {
        _reallymarkobject($g,$100);
       }
      }
      if (!($72)) {
       $107 = HEAP32[$93>>2]|0;
       $108 = ($107|0)>(3);
       if ($108) {
        $109 = HEAP32[$91>>2]|0;
        $110 = (($109) + 5|0);
        $111 = HEAP8[$110>>0]|0;
        $112 = $111 & 3;
        $113 = ($112<<24>>24)==(0);
        if (!($113)) {
         _reallymarkobject($g,$109);
        }
       }
      }
     }
     $105 = (($92) + -1)|0;
     $106 = ($92|0)==(0);
     if ($106) {
      break;
     } else {
      $92 = $105;
     }
    }
   }
   $$$i = $114 | $72;
   if ($$$i) {
    $$pre$pre$phiZZ2D = $66;
    label = 40;
   } else {
    $$pre$phiZ2D = $66;
   }
  }
  if ((label|0) == 40) {
   $115 = HEAP8[$2>>0]|0;
   $116 = $115&255;
   $117 = $116 & 251;
   $118 = $117&255;
   HEAP8[$2>>0] = $118;
   $$pre$phiZ2D = $$pre$pre$phiZZ2D;
  }
  $119 = (($1) + 28|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $120 << 4;
  $122 = (($121) + 32)|0;
  $123 = HEAP8[$$pre$phiZ2D>>0]|0;
  $124 = $123&255;
  $125 = 32 << $124;
  $126 = (($122) + ($125))|0;
  $$0 = $126;
  STACKTOP = sp;return ($$0|0);
 } else if ((($9|0) == 9)) {
  $255 = (($1) + 68|0);
  $256 = HEAP32[$255>>2]|0;
  HEAP32[$0>>2] = $256;
  $257 = (($1) + 32|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = ($258|0)==(0|0);
  if (!($259)) {
   $260 = (($258) + 5|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = $261&255;
   $263 = $262 & 252;
   $264 = $263&255;
   HEAP8[$260>>0] = $264;
  }
  $265 = (($1) + 40|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ($266|0)>(0);
  if ($267) {
   $268 = (($1) + 8|0);
   $341 = $266;$i$09$i = 0;
   while(1) {
    $274 = HEAP32[$268>>2]|0;
    $275 = ((($274) + ($i$09$i<<4)|0) + 8|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = ($276|0)>(3);
    if ($277) {
     $278 = (($274) + ($i$09$i<<4)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($279) + 5|0);
     $281 = HEAP8[$280>>0]|0;
     $282 = $281 & 3;
     $283 = ($282<<24>>24)==(0);
     if ($283) {
      $286 = $341;
     } else {
      _reallymarkobject($g,$279);
      $$pre11$i = HEAP32[$265>>2]|0;
      $286 = $$pre11$i;
     }
    } else {
     $286 = $341;
    }
    $284 = (($i$09$i) + 1)|0;
    $285 = ($284|0)<($286|0);
    if ($285) {
     $341 = $286;$i$09$i = $284;
    } else {
     break;
    }
   }
  }
  $269 = (($1) + 36|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($270|0)>(0);
  if ($271) {
   $272 = (($1) + 28|0);
   $273 = HEAP32[$272>>2]|0;
   $i$16$i = 0;
   while(1) {
    $291 = (($273) + ($i$16$i<<2)|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = ($292|0)==(0|0);
    if (!($293)) {
     $294 = (($292) + 5|0);
     $295 = HEAP8[$294>>0]|0;
     $296 = $295&255;
     $297 = $296 & 252;
     $298 = $297&255;
     HEAP8[$294>>0] = $298;
    }
    $299 = (($i$16$i) + 1)|0;
    $exitcond17 = ($299|0)==($270|0);
    if ($exitcond17) {
     break;
    } else {
     $i$16$i = $299;
    }
   }
  }
  $287 = (($1) + 52|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ($288|0)>(0);
  if ($289) {
   $290 = (($1) + 16|0);
   $342 = $288;$i$23$i = 0;
   while(1) {
    $305 = HEAP32[$290>>2]|0;
    $306 = (($305) + ($i$23$i<<2)|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = ($307|0)==(0|0);
    if ($308) {
     $315 = $342;
    } else {
     $309 = (($307) + 5|0);
     $310 = HEAP8[$309>>0]|0;
     $311 = $310 & 3;
     $312 = ($311<<24>>24)==(0);
     if ($312) {
      $315 = $342;
     } else {
      _reallymarkobject($g,$307);
      $$pre$i10 = HEAP32[$287>>2]|0;
      $315 = $$pre$i10;
     }
    }
    $313 = (($i$23$i) + 1)|0;
    $314 = ($313|0)<($315|0);
    if ($314) {
     $342 = $315;$i$23$i = $313;
    } else {
     $333 = $315;
     break;
    }
   }
  } else {
   $333 = $288;
  }
  $300 = (($1) + 56|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = ($301|0)>(0);
  if ($302) {
   $303 = (($1) + 24|0);
   $304 = HEAP32[$303>>2]|0;
   $i$31$i = 0;
   while(1) {
    $316 = (($304) + (($i$31$i*12)|0)|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = ($317|0)==(0|0);
    if (!($318)) {
     $319 = (($317) + 5|0);
     $320 = HEAP8[$319>>0]|0;
     $321 = $320&255;
     $322 = $321 & 252;
     $323 = $322&255;
     HEAP8[$319>>0] = $323;
    }
    $324 = (($i$31$i) + 1)|0;
    $exitcond = ($324|0)==($301|0);
    if ($exitcond) {
     break;
    } else {
     $i$31$i = $324;
    }
   }
  }
  $325 = (($1) + 44|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = HEAP32[$265>>2]|0;
  $328 = $327 << 4;
  $329 = (($1) + 48|0);
  $330 = HEAP32[$329>>2]|0;
  $331 = ($301*12)|0;
  $332 = HEAP32[$269>>2]|0;
  $tmp = (($333) + ($326))|0;
  $tmp12 = (($tmp) + ($330))|0;
  $tmp13 = (($tmp12) + ($332))|0;
  $tmp14 = $tmp13 << 2;
  $334 = (($328) + 76)|0;
  $335 = (($334) + ($331))|0;
  $336 = (($335) + ($tmp14))|0;
  $$0 = $336;
  STACKTOP = sp;return ($$0|0);
 } else if ((($9|0) == 6)) {
  $127 = (($1) + 8|0);
  $128 = HEAP32[$127>>2]|0;
  HEAP32[$0>>2] = $128;
  $129 = (($1) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 5|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132 & 3;
  $134 = ($133<<24>>24)==(0);
  if (!($134)) {
   _reallymarkobject($g,$130);
  }
  $135 = (($1) + 6|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $154 = (($1) + 16|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + 5|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157 & 3;
   $159 = ($158<<24>>24)==(0);
   if (!($159)) {
    _reallymarkobject($g,$155);
   }
   $160 = (($1) + 7|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = ($161<<24>>24)==(0);
   if ($162) {
    $176 = 0;
   } else {
    $339 = $161;$i1$01$i = 0;
    while(1) {
     $163 = ((($1) + ($i1$01$i<<2)|0) + 20|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = (($164) + 5|0);
     $166 = HEAP8[$165>>0]|0;
     $167 = $166 & 3;
     $168 = ($167<<24>>24)==(0);
     if ($168) {
      $171 = $339;
     } else {
      _reallymarkobject($g,$164);
      $$pre$i = HEAP8[$160>>0]|0;
      $171 = $$pre$i;
     }
     $169 = (($i1$01$i) + 1)|0;
     $170 = $171&255;
     $172 = ($169|0)<($170|0);
     if ($172) {
      $339 = $171;$i1$01$i = $169;
     } else {
      $176 = $171;
      break;
     }
    }
   }
  } else {
   $138 = (($1) + 7|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = ($139<<24>>24)==(0);
   if ($140) {
    $176 = 0;
   } else {
    $338 = $139;$i$04$i = 0;
    while(1) {
     $141 = ((($1) + ($i$04$i<<4)|0) + 32|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)>(3);
     if ($143) {
      $144 = ((($1) + ($i$04$i<<4)|0) + 24|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($145) + 5|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = $147 & 3;
      $149 = ($148<<24>>24)==(0);
      if ($149) {
       $152 = $338;
      } else {
       _reallymarkobject($g,$145);
       $$pre6$i = HEAP8[$138>>0]|0;
       $152 = $$pre6$i;
      }
     } else {
      $152 = $338;
     }
     $150 = (($i$04$i) + 1)|0;
     $151 = $152&255;
     $153 = ($150|0)<($151|0);
     if ($153) {
      $338 = $152;$i$04$i = $150;
     } else {
      $176 = $152;
      break;
     }
    }
   }
  }
  $173 = HEAP8[$135>>0]|0;
  $174 = ($173<<24>>24)==(0);
  $175 = $176&255;
  if ($174) {
   $179 = $175 << 2;
   $180 = (($179) + 20)|0;
   $$0 = $180;
   STACKTOP = sp;return ($$0|0);
  } else {
   $177 = $175 << 4;
   $178 = (($177) + 24)|0;
   $$0 = $178;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _markmt($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 3;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   _reallymarkobject($g,$1);
  }
 }
 $7 = (($g) + 156|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = (($8) + 5|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 3;
  $13 = ($12<<24>>24)==(0);
  if (!($13)) {
   _reallymarkobject($g,$8);
  }
 }
 $14 = (($g) + 160|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = (($15) + 5|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 3;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   _reallymarkobject($g,$15);
  }
 }
 $21 = (($g) + 164|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = (($22) + 5|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 & 3;
  $27 = ($26<<24>>24)==(0);
  if (!($27)) {
   _reallymarkobject($g,$22);
  }
 }
 $28 = (($g) + 168|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $31 = (($29) + 5|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 & 3;
  $34 = ($33<<24>>24)==(0);
  if (!($34)) {
   _reallymarkobject($g,$29);
  }
 }
 $35 = (($g) + 172|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = (($36) + 5|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 & 3;
  $41 = ($40<<24>>24)==(0);
  if (!($41)) {
   _reallymarkobject($g,$36);
  }
 }
 $42 = (($g) + 176|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = (($43) + 5|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 & 3;
  $48 = ($47<<24>>24)==(0);
  if (!($48)) {
   _reallymarkobject($g,$43);
  }
 }
 $49 = (($g) + 180|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $52 = (($50) + 5|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 & 3;
  $55 = ($54<<24>>24)==(0);
  if (!($55)) {
   _reallymarkobject($g,$50);
  }
 }
 $56 = (($g) + 184|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if ($58) {
  STACKTOP = sp;return;
 }
 $59 = (($57) + 5|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60 & 3;
 $62 = ($61<<24>>24)==(0);
 if ($62) {
  STACKTOP = sp;return;
 }
 _reallymarkobject($g,$57);
 STACKTOP = sp;return;
}
function _luaM_growaux_($L,$block,$size,$size_elems,$limit,$errormsg) {
 $L = $L|0;
 $block = $block|0;
 $size = $size|0;
 $size_elems = $size_elems|0;
 $limit = $limit|0;
 $errormsg = $errormsg|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newsize$0 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = (($limit|0) / 2)&-1;
 $2 = ($0|0)<($1|0);
 if ($2) {
  $4 = $0 << 1;
  $5 = ($4|0)<(4);
  $$ = $5 ? 4 : $4;
  $newsize$0 = $$;
 } else {
  $3 = ($0|0)<($limit|0);
  if ($3) {
   $newsize$0 = $limit;
  } else {
   _luaG_runerror($L,$errormsg,$vararg_buffer);
   $newsize$0 = $limit;
  }
 }
 $6 = (($newsize$0) + 1)|0;
 $7 = (4294967293 / ($size_elems>>>0))&-1;
 $8 = ($6>>>0)>($7>>>0);
 if ($8) {
  _luaG_runerror($L,1608,$vararg_buffer1);
  $25 = 0;
  HEAP32[$size>>2] = $newsize$0;
  STACKTOP = sp;return ($25|0);
 }
 $9 = HEAP32[$size>>2]|0;
 $10 = Math_imul($9, $size_elems)|0;
 $11 = Math_imul($newsize$0, $size_elems)|0;
 $12 = (($L) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_iiiii[$15 & 15]($17,$block,$10,$11)|0);
 $19 = ($18|0)==(0|0);
 $20 = ($11|0)!=(0);
 $or$cond$i = $19 & $20;
 if ($or$cond$i) {
  _luaD_throw($L,4);
  // unreachable;
 }
 $21 = (($13) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($11) - ($10))|0;
 $24 = (($23) + ($22))|0;
 HEAP32[$21>>2] = $24;
 $25 = $18;
 HEAP32[$size>>2] = $newsize$0;
 STACKTOP = sp;return ($25|0);
}
function _luaM_realloc_($L,$block,$osize,$nsize) {
 $L = $L|0;
 $block = $block|0;
 $osize = $osize|0;
 $nsize = $nsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$3 & 15]($5,$block,$osize,$nsize)|0);
 $7 = ($6|0)==(0|0);
 $8 = ($nsize|0)!=(0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  _luaD_throw($L,4);
  // unreachable;
 } else {
  $9 = (($1) + 68|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($nsize) - ($osize))|0;
  $12 = (($11) + ($10))|0;
  HEAP32[$9>>2] = $12;
  STACKTOP = sp;return ($6|0);
 }
 return 0|0;
}
function _luaM_toobig($L) {
 $L = $L|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaG_runerror($L,1608,$vararg_buffer);
 STACKTOP = sp;return (0|0);
}
function _luaO_int2fb($x) {
 $x = $x|0;
 var $$0$lcssa = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $e$0$lcssa = 0, $e$03 = 0, $phitmp = 0, $phitmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)>(15);
 if ($0) {
  $$02 = $x;$e$03 = 1;
  while(1) {
   $1 = (($$02) + 1)|0;
   $2 = $1 >>> 1;
   $phitmp = (($e$03) + 1)|0;
   $3 = ($1>>>0)>(31);
   if ($3) {
    $$02 = $2;$e$03 = $phitmp;
   } else {
    break;
   }
  }
  $phitmp5 = $phitmp << 3;
  $$0$lcssa = $2;$e$0$lcssa = $phitmp5;
 } else {
  $$0$lcssa = $x;$e$0$lcssa = 8;
 }
 $4 = ($$0$lcssa>>>0)<(8);
 if ($4) {
  $$01 = $$0$lcssa;
  STACKTOP = sp;return ($$01|0);
 }
 $5 = (($$0$lcssa) + -8)|0;
 $6 = $e$0$lcssa | $5;
 $$01 = $6;
 STACKTOP = sp;return ($$01|0);
}
function _luaO_fb2int($x) {
 $x = $x|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x >>> 3;
 $1 = $0 & 31;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = $x;
 } else {
  $3 = $x & 7;
  $4 = $3 | 8;
  $5 = (($1) + -1)|0;
  $6 = $4 << $5;
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaO_log2($x) {
 $x = $x|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$0$lcssa = 0, $l$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)>(255);
 if ($0) {
  $$01 = $x;$l$02 = -1;
  while(1) {
   $1 = (($l$02) + 8)|0;
   $2 = $$01 >>> 8;
   $3 = ($$01>>>0)>(65535);
   if ($3) {
    $$01 = $2;$l$02 = $1;
   } else {
    $$0$lcssa = $2;$l$0$lcssa = $1;
    break;
   }
  }
 } else {
  $$0$lcssa = $x;$l$0$lcssa = -1;
 }
 $4 = (1664 + ($$0$lcssa)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($6) + ($l$0$lcssa))|0;
 STACKTOP = sp;return ($7|0);
}
function _luaO_rawequalObj($t1,$t2) {
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t2) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 do {
  if ($4) {
   if ((($1|0) == 2)) {
    $13 = HEAP32[$t1>>2]|0;
    $14 = HEAP32[$t2>>2]|0;
    $15 = ($13|0)==($14|0);
    $16 = $15&1;
    $$0 = $16;
    break;
   } else if ((($1|0) == 0)) {
    $$0 = 1;
    break;
   } else if ((($1|0) == 3)) {
    $5 = +HEAPF64[$t1>>3];
    $6 = +HEAPF64[$t2>>3];
    $7 = $5 == $6;
    $8 = $7&1;
    $$0 = $8;
    break;
   } else if ((($1|0) == 1)) {
    $9 = HEAP32[$t1>>2]|0;
    $10 = HEAP32[$t2>>2]|0;
    $11 = ($9|0)==($10|0);
    $12 = $11&1;
    $$0 = $12;
    break;
   } else {
    $17 = HEAP32[$t1>>2]|0;
    $18 = HEAP32[$t2>>2]|0;
    $19 = ($17|0)==($18|0);
    $20 = $19&1;
    $$0 = $20;
    break;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _luaO_str2d($s,$result) {
 $s = $s|0;
 $result = $result|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$pre = 0, $$pre3 = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endptr = sp;
 $0 = (+_strtod($s,$endptr));
 HEAPF64[$result>>3] = $0;
 $1 = HEAP32[$endptr>>2]|0;
 $2 = ($1|0)==($s|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP8[$1>>0]|0;
 if ((($3<<24>>24) == 88) | (($3<<24>>24) == 120)) {
  $4 = (_strtoul($s,$endptr,16)|0);
  $5 = (+($4>>>0));
  HEAPF64[$result>>3] = $5;
  $$pre = HEAP32[$endptr>>2]|0;
  $$pre3 = HEAP8[$$pre>>0]|0;
  $19 = $$pre;$6 = $$pre3;
 } else {
  $19 = $1;$6 = $3;
 }
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = $6&255;
 $9 = (_isspace($8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$lcssa = $19;
 } else {
  $12 = $19;
  while(1) {
   $11 = (($12) + 1|0);
   $13 = HEAP8[$11>>0]|0;
   $14 = $13&255;
   $15 = (_isspace($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    break;
   } else {
    $12 = $11;
   }
  }
  HEAP32[$endptr>>2] = $11;
  $$lcssa = $11;
 }
 $17 = HEAP8[$$lcssa>>0]|0;
 $18 = ($17<<24>>24)==(0);
 $$ = $18&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _luaO_pushvfstring($L,$fmt,$argp) {
 $L = $L|0;
 $fmt = $fmt|0;
 $argp = $argp|0;
 var $$ = 0, $$0$lcssa = 0, $$014 = 0, $$lcssa = 0, $$pre = 0, $$pre$i = 0, $$pre$i1 = 0, $$pre$i11 = 0, $$pre$i3 = 0, $$pre$i5 = 0, $$pre$i7 = 0, $$pre$i9 = 0, $$pre20 = 0, $$pre21 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $buff = 0, $buff3 = 0, $buff4 = 0, $n$0$lcssa = 0, $n$013 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buff = sp + 32|0;
 $buff3 = sp + 8|0;
 $buff4 = sp + 4|0;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaS_newlstr($L,1920,0)|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 8|0);
 HEAP32[$3>>2] = 4;
 $4 = (($L) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)<(17);
 if ($10) {
  _luaD_growstack($L,1);
  $$pre$i = HEAP32[$0>>2]|0;
  $12 = $$pre$i;
 } else {
  $12 = $6;
 }
 $11 = (($12) + 16|0);
 HEAP32[$0>>2] = $11;
 $13 = (_strchr($fmt,37)|0);
 $14 = ($13|0)==(0|0);
 L4: do {
  if ($14) {
   $$0$lcssa = $fmt;$$lcssa = $11;$n$0$lcssa = 1;
  } else {
   $15 = (($buff4) + 1|0);
   $16 = (($buff4) + 2|0);
   $17 = (($buff) + 1|0);
   $$014 = $fmt;$18 = $13;$23 = $11;$n$013 = 1;
   while(1) {
    $19 = $18;
    $20 = $$014;
    $21 = (($19) - ($20))|0;
    $22 = (_luaS_newlstr($L,$$014,$21)|0);
    HEAP32[$23>>2] = $22;
    $24 = (($23) + 8|0);
    HEAP32[$24>>2] = 4;
    $25 = HEAP32[$4>>2]|0;
    $26 = HEAP32[$0>>2]|0;
    $27 = $25;
    $28 = $26;
    $29 = (($27) - ($28))|0;
    $30 = ($29|0)<(17);
    if ($30) {
     _luaD_growstack($L,1);
     $$pre = HEAP32[$0>>2]|0;
     $32 = $$pre;
    } else {
     $32 = $26;
    }
    $31 = (($32) + 16|0);
    HEAP32[$0>>2] = $31;
    $33 = (($18) + 1|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    switch ($35|0) {
    case 37:  {
     $98 = (_luaS_newlstr($L,1944,1)|0);
     HEAP32[$31>>2] = $98;
     $99 = (($32) + 24|0);
     HEAP32[$99>>2] = 4;
     $100 = HEAP32[$4>>2]|0;
     $101 = HEAP32[$0>>2]|0;
     $102 = $100;
     $103 = $101;
     $104 = (($102) - ($103))|0;
     $105 = ($104|0)<(17);
     if ($105) {
      _luaD_growstack($L,1);
      $$pre$i7 = HEAP32[$0>>2]|0;
      $107 = $$pre$i7;
     } else {
      $107 = $101;
     }
     $106 = (($107) + 16|0);
     HEAP32[$0>>2] = $106;
     $149 = $106;
     break;
    }
    case 100:  {
     $arglist_current5 = HEAP32[$argp>>2]|0;
     $64 = HEAP32[$arglist_current5>>2]|0;
     $arglist_next6 = (($arglist_current5) + 4|0);
     HEAP32[$argp>>2] = $arglist_next6;
     $65 = (+($64|0));
     HEAPF64[$31>>3] = $65;
     $66 = (($32) + 24|0);
     HEAP32[$66>>2] = 3;
     $67 = HEAP32[$4>>2]|0;
     $68 = HEAP32[$0>>2]|0;
     $69 = $67;
     $70 = $68;
     $71 = (($69) - ($70))|0;
     $72 = ($71|0)<(17);
     if ($72) {
      _luaD_growstack($L,1);
      $$pre20 = HEAP32[$0>>2]|0;
      $74 = $$pre20;
     } else {
      $74 = $68;
     }
     $73 = (($74) + 16|0);
     HEAP32[$0>>2] = $73;
     $149 = $73;
     break;
    }
    case 112:  {
     $arglist_current11 = HEAP32[$argp>>2]|0;
     $85 = HEAP32[$arglist_current11>>2]|0;
     $arglist_next12 = (($arglist_current11) + 4|0);
     HEAP32[$argp>>2] = $arglist_next12;
     HEAP32[$vararg_buffer>>2] = $85;
     (_sprintf($buff3,1936,$vararg_buffer)|0);
     $86 = HEAP32[$0>>2]|0;
     $87 = (_strlen(($buff3|0))|0);
     $88 = (_luaS_newlstr($L,$buff3,$87)|0);
     HEAP32[$86>>2] = $88;
     $89 = (($86) + 8|0);
     HEAP32[$89>>2] = 4;
     $90 = HEAP32[$4>>2]|0;
     $91 = HEAP32[$0>>2]|0;
     $92 = $90;
     $93 = $91;
     $94 = (($92) - ($93))|0;
     $95 = ($94|0)<(17);
     if ($95) {
      _luaD_growstack($L,1);
      $$pre$i5 = HEAP32[$0>>2]|0;
      $97 = $$pre$i5;
     } else {
      $97 = $91;
     }
     $96 = (($97) + 16|0);
     HEAP32[$0>>2] = $96;
     $149 = $96;
     break;
    }
    case 99:  {
     $arglist_current2 = HEAP32[$argp>>2]|0;
     $50 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$argp>>2] = $arglist_next3;
     $51 = $50&255;
     HEAP8[$buff>>0] = $51;
     HEAP8[$17>>0] = 0;
     $52 = HEAP32[$0>>2]|0;
     $53 = (_strlen(($buff|0))|0);
     $54 = (_luaS_newlstr($L,$buff,$53)|0);
     HEAP32[$52>>2] = $54;
     $55 = (($52) + 8|0);
     HEAP32[$55>>2] = 4;
     $56 = HEAP32[$4>>2]|0;
     $57 = HEAP32[$0>>2]|0;
     $58 = $56;
     $59 = $57;
     $60 = (($58) - ($59))|0;
     $61 = ($60|0)<(17);
     if ($61) {
      _luaD_growstack($L,1);
      $$pre$i3 = HEAP32[$0>>2]|0;
      $63 = $$pre$i3;
     } else {
      $63 = $57;
     }
     $62 = (($63) + 16|0);
     HEAP32[$0>>2] = $62;
     $149 = $62;
     break;
    }
    case 115:  {
     $arglist_current = HEAP32[$argp>>2]|0;
     $36 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$argp>>2] = $arglist_next;
     $37 = ($36|0)==(0|0);
     $$ = $37 ? 1928 : $36;
     $38 = HEAP32[$0>>2]|0;
     $39 = (_strlen(($$|0))|0);
     $40 = (_luaS_newlstr($L,$$,$39)|0);
     HEAP32[$38>>2] = $40;
     $41 = (($38) + 8|0);
     HEAP32[$41>>2] = 4;
     $42 = HEAP32[$4>>2]|0;
     $43 = HEAP32[$0>>2]|0;
     $44 = $42;
     $45 = $43;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(17);
     if ($47) {
      _luaD_growstack($L,1);
      $$pre$i1 = HEAP32[$0>>2]|0;
      $49 = $$pre$i1;
     } else {
      $49 = $43;
     }
     $48 = (($49) + 16|0);
     HEAP32[$0>>2] = $48;
     $149 = $48;
     break;
    }
    case 102:  {
     $arglist_current8 = HEAP32[$argp>>2]|0;
     HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current8>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current8+4>>2];$75 = +HEAPF64[tempDoublePtr>>3];
     $arglist_next9 = (($arglist_current8) + 8|0);
     HEAP32[$argp>>2] = $arglist_next9;
     HEAPF64[$31>>3] = $75;
     $76 = (($32) + 24|0);
     HEAP32[$76>>2] = 3;
     $77 = HEAP32[$4>>2]|0;
     $78 = HEAP32[$0>>2]|0;
     $79 = $77;
     $80 = $78;
     $81 = (($79) - ($80))|0;
     $82 = ($81|0)<(17);
     if ($82) {
      _luaD_growstack($L,1);
      $$pre21 = HEAP32[$0>>2]|0;
      $84 = $$pre21;
     } else {
      $84 = $78;
     }
     $83 = (($84) + 16|0);
     HEAP32[$0>>2] = $83;
     $149 = $83;
     break;
    }
    default: {
     HEAP8[$buff4>>0] = 37;
     $108 = HEAP8[$33>>0]|0;
     HEAP8[$15>>0] = $108;
     HEAP8[$16>>0] = 0;
     $109 = (_strlen(($buff4|0))|0);
     $110 = (_luaS_newlstr($L,$buff4,$109)|0);
     HEAP32[$31>>2] = $110;
     $111 = (($32) + 24|0);
     HEAP32[$111>>2] = 4;
     $112 = HEAP32[$4>>2]|0;
     $113 = HEAP32[$0>>2]|0;
     $114 = $112;
     $115 = $113;
     $116 = (($114) - ($115))|0;
     $117 = ($116|0)<(17);
     if ($117) {
      _luaD_growstack($L,1);
      $$pre$i9 = HEAP32[$0>>2]|0;
      $119 = $$pre$i9;
     } else {
      $119 = $113;
     }
     $118 = (($119) + 16|0);
     HEAP32[$0>>2] = $118;
     $149 = $118;
    }
    }
    $120 = (($n$013) + 2)|0;
    $121 = (($18) + 2|0);
    $122 = (_strchr($121,37)|0);
    $123 = ($122|0)==(0|0);
    if ($123) {
     $$0$lcssa = $121;$$lcssa = $149;$n$0$lcssa = $120;
     break L4;
    } else {
     $$014 = $121;$18 = $122;$23 = $149;$n$013 = $120;
    }
   }
  }
 } while(0);
 $124 = (_strlen(($$0$lcssa|0))|0);
 $125 = (_luaS_newlstr($L,$$0$lcssa,$124)|0);
 HEAP32[$$lcssa>>2] = $125;
 $126 = (($$lcssa) + 8|0);
 HEAP32[$126>>2] = 4;
 $127 = HEAP32[$4>>2]|0;
 $128 = HEAP32[$0>>2]|0;
 $129 = $127;
 $130 = $128;
 $131 = (($129) - ($130))|0;
 $132 = ($131|0)<(17);
 if (!($132)) {
  $134 = $128;
  $133 = (($134) + 16|0);
  HEAP32[$0>>2] = $133;
  $135 = (($n$0$lcssa) + 1)|0;
  $136 = (($L) + 12|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $133;
  $139 = $137;
  $140 = (($138) - ($139))|0;
  $141 = $140 >> 4;
  $142 = (($141) + -1)|0;
  _luaV_concat($L,$135,$142);
  $143 = HEAP32[$0>>2]|0;
  $144 = (0 - ($n$0$lcssa))|0;
  $145 = (($143) + ($144<<4)|0);
  HEAP32[$0>>2] = $145;
  $$sum = $n$0$lcssa ^ -1;
  $146 = (($143) + ($$sum<<4)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + 16|0);
  STACKTOP = sp;return ($148|0);
 }
 _luaD_growstack($L,1);
 $$pre$i11 = HEAP32[$0>>2]|0;
 $134 = $$pre$i11;
 $133 = (($134) + 16|0);
 HEAP32[$0>>2] = $133;
 $135 = (($n$0$lcssa) + 1)|0;
 $136 = (($L) + 12|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $133;
 $139 = $137;
 $140 = (($138) - ($139))|0;
 $141 = $140 >> 4;
 $142 = (($141) + -1)|0;
 _luaV_concat($L,$135,$142);
 $143 = HEAP32[$0>>2]|0;
 $144 = (0 - ($n$0$lcssa))|0;
 $145 = (($143) + ($144<<4)|0);
 HEAP32[$0>>2] = $145;
 $$sum = $n$0$lcssa ^ -1;
 $146 = (($143) + ($$sum<<4)|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = (($147) + 16|0);
 STACKTOP = sp;return ($148|0);
}
function _luaO_pushfstring($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argp = sp;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($0|0);
}
function _luaO_chunkid($out,$source,$bufflen) {
 $out = $out|0;
 $source = $source|0;
 $bufflen = $bufflen|0;
 var $$ = 0, $$0 = 0, $$neg = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $endptr = 0, $endptr2 = 0, $endptr4 = 0, $strlen = 0, $strlen1 = 0, $strlen3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP8[$source>>0]|0;
 if ((($0<<24>>24) == 61)) {
  $1 = (($source) + 1|0);
  (_strncpy(($out|0),($1|0),($bufflen|0))|0);
  $2 = (($bufflen) + -1)|0;
  $3 = (($out) + ($2)|0);
  HEAP8[$3>>0] = 0;
  STACKTOP = sp;return;
 } else if ((($0<<24>>24) == 64)) {
  $4 = (($source) + 1|0);
  $5 = (($bufflen) + -8)|0;
  $6 = (_strlen(($4|0))|0);
  HEAP8[$out>>0] = 0;
  $7 = ($6>>>0)>($5>>>0);
  if ($7) {
   $$neg = (8 - ($bufflen))|0;
   $8 = (($$neg) + 1)|0;
   $$sum = (($8) + ($6))|0;
   $9 = (($source) + ($$sum)|0);
   $strlen3 = (_strlen(($out|0))|0);
   $endptr4 = (($out) + ($strlen3)|0);
   HEAP8[$endptr4>>0]=3026478&255;HEAP8[$endptr4+1>>0]=(3026478>>8)&255;HEAP8[$endptr4+2>>0]=(3026478>>16)&255;HEAP8[$endptr4+3>>0]=3026478>>24;
   $$0 = $9;
  } else {
   $$0 = $4;
  }
  (_strcat(($out|0),($$0|0))|0);
  STACKTOP = sp;return;
 } else {
  $10 = (_strcspn($source,1952)|0);
  $11 = (($bufflen) + -17)|0;
  $12 = ($10>>>0)>($11>>>0);
  $$ = $12 ? $11 : $10;
  dest=$out+0|0; src=1960+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $13 = (($source) + ($$)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   (_strcat(($out|0),($source|0))|0);
  } else {
   (_strncat($out,$source,$$)|0);
   $strlen1 = (_strlen(($out|0))|0);
   $endptr2 = (($out) + ($strlen1)|0);
   HEAP8[$endptr2>>0]=3026478&255;HEAP8[$endptr2+1>>0]=(3026478>>8)&255;HEAP8[$endptr2+2>>0]=(3026478>>16)&255;HEAP8[$endptr2+3>>0]=3026478>>24;
  }
  $strlen = (_strlen(($out|0))|0);
  $endptr = (($out) + ($strlen)|0);
  ;HEAP8[$endptr+0>>0]=HEAP8[1976+0>>0]|0;HEAP8[$endptr+1>>0]=HEAP8[1976+1>>0]|0;HEAP8[$endptr+2>>0]=HEAP8[1976+2>>0]|0;
  STACKTOP = sp;return;
 }
}
function _luaY_parser($L,$z,$buff,$name) {
 $L = $L|0;
 $z = $z|0;
 $buff = $buff|0;
 $name = $name|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $funcstate = 0, $lexstate = 0, $phitmp$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $lexstate = sp;
 $funcstate = sp + 76|0;
 $0 = (($lexstate) + 60|0);
 HEAP32[$0>>2] = $buff;
 $1 = (_strlen(($name|0))|0);
 $2 = (_luaS_newlstr($L,$name,$1)|0);
 _luaX_setinput($L,$lexstate,$z,$2);
 _open_func($lexstate,$funcstate);
 $3 = HEAP32[$funcstate>>2]|0;
 $4 = (($3) + 74|0);
 HEAP8[$4>>0] = 2;
 _luaX_next($lexstate);
 $5 = (($lexstate) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 52|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (($8) + 1)<<16>>16;
 HEAP16[$7>>1] = $9;
 $10 = ($9&65535)>(200);
 if ($10) {
  _luaX_lexerror($lexstate,3256,0);
 }
 $11 = (($lexstate) + 16|0);
 $12 = (($lexstate) + 48|0);
 L4: while(1) {
  $13 = HEAP32[$11>>2]|0;
  switch ($13|0) {
  case 287: case 276: case 262: case 261: case 260:  {
   $26 = $13;
   break L4;
   break;
  }
  default: {
  }
  }
  $14 = (_statement($lexstate)|0);
  $15 = HEAP32[$11>>2]|0;
  $16 = ($15|0)==(59);
  if ($16) {
   _luaX_next($lexstate);
  }
  $17 = HEAP32[$12>>2]|0;
  $18 = (($17) + 50|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($17) + 36|0);
  HEAP32[$21>>2] = $20;
  $phitmp$i = ($14|0)==(0);
  if (!($phitmp$i)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $$pre = HEAP32[$11>>2]|0;
  $26 = $$pre;
 }
 $22 = HEAP32[$5>>2]|0;
 $23 = (($22) + 52|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = (($24) + -1)<<16>>16;
 HEAP16[$23>>1] = $25;
 $27 = ($26|0)==(287);
 if ($27) {
  _close_func($lexstate);
  $30 = HEAP32[$funcstate>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 $28 = (_luaX_token2str($lexstate,287)|0);
 HEAP32[$vararg_buffer>>2] = $28;
 $29 = (_luaO_pushfstring($22,3240,$vararg_buffer)|0);
 _luaX_syntaxerror($lexstate,$29);
 _close_func($lexstate);
 $30 = HEAP32[$funcstate>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _open_func($ls,$fs) {
 $ls = $ls|0;
 $fs = $fs|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaF_newproto($1)|0);
 HEAP32[$fs>>2] = $2;
 $3 = (($ls) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($fs) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = (($fs) + 12|0);
 HEAP32[$6>>2] = $ls;
 $7 = (($fs) + 16|0);
 HEAP32[$7>>2] = $1;
 HEAP32[$3>>2] = $fs;
 $8 = (($fs) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = (($fs) + 28|0);
 HEAP32[$9>>2] = -1;
 $10 = (($fs) + 32|0);
 HEAP32[$10>>2] = -1;
 $11 = (($fs) + 36|0);
 $12 = (($fs) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = (($ls) + 64|0);
 ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP16[$11+12>>1]=0|0;HEAP8[$11+14>>0]=0|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($2) + 32|0);
 HEAP32[$15>>2] = $14;
 $16 = (($2) + 75|0);
 HEAP8[$16>>0] = 2;
 $17 = (_luaH_new($1,0,0)|0);
 $18 = (($fs) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = (($1) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$20>>2] = $17;
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = 5;
 $22 = (($1) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$19>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = ($27|0)<(17);
 if ($28) {
  _luaD_growstack($1,1);
  $$pre = HEAP32[$19>>2]|0;
  $30 = $$pre;
 } else {
  $30 = $24;
 }
 $29 = (($30) + 16|0);
 HEAP32[$19>>2] = $29;
 HEAP32[$29>>2] = $2;
 $31 = (($30) + 24|0);
 HEAP32[$31>>2] = 9;
 $32 = HEAP32[$22>>2]|0;
 $33 = HEAP32[$19>>2]|0;
 $34 = $32;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $37 = ($36|0)<(17);
 if (!($37)) {
  $39 = $33;
  $38 = (($39) + 16|0);
  HEAP32[$19>>2] = $38;
  STACKTOP = sp;return;
 }
 _luaD_growstack($1,1);
 $$pre1 = HEAP32[$19>>2]|0;
 $39 = $$pre1;
 $38 = (($39) + 16|0);
 HEAP32[$19>>2] = $38;
 STACKTOP = sp;return;
}
function _statement($ls) {
 $ls = $ls|0;
 var $$$i$i = 0, $$$i$i$i = 0, $$0 = 0, $$01$i$i32 = 0, $$idx$i$i = 0, $$idx$i$i14 = 0, $$idx$i$i2 = 0, $$idx$i1$i = 0, $$idx$i10$i = 0, $$idx$val$i$i = 0, $$idx$val$i$i15 = 0, $$idx$val$i$i3 = 0, $$idx$val$i11$i = 0, $$idx$val$i2$i = 0, $$off$i = 0, $$phi$trans$insert$i$i$i = 0, $$phi$trans$insert$i$i$i18 = 0, $$phi$trans$insert$i$i$i6 = 0, $$phi$trans$insert$i$i14$i = 0, $$phi$trans$insert$i$i5$i = 0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i4 = 0, $$pre$i$i12$i = 0, $$pre$i$i3$i = 0, $$pre1$i$i$i = 0, $$pre1$i$i$i17 = 0, $$pre1$i$i$i5 = 0, $$pre1$i$i13$i = 0, $$pre1$i$i4$i = 0, $$pre2$i$i$i = 0, $$pre2$i$i$i19 = 0, $$pre2$i$i$i7 = 0, $$pre2$i$i15$i = 0, $$pre2$i$i6$i = 0, $$pre77 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$i = 0, $b$i24 = 0, $bl$0$i = 0, $bl$0$i$i = 0, $bl$05$i = 0, $bl$05$i$i = 0, $bl$06$i = 0, $bl$06$i$i = 0, $bl$08$i = 0, $bl$08$i$i = 0, $bl$i = 0, $bl$i1 = 0, $bl1$i = 0, $bl2$i = 0, $e$i = 0, $e$i$i = 0;
 var $e$i33 = 0, $e$i42 = 0, $e$i43 = 0, $e$i44 = 0, $escapelist$i = 0, $first$0$i = 0, $flist$0$i = 0, $ls$idx$val$i = 0, $ls$idx$val$i$i = 0, $ls$idx$val$i30 = 0, $ls$idx1$i = 0, $ls$idx1$i78 = 0, $ls$idx1$i80 = 0, $ls$idx1$i81 = 0, $ls$idx1$val$i = 0, $ls$idx1$val$i79 = 0, $ls$idx1$val$i82 = 0, $n$0$i$i$lcssa = 0, $n$0$i$i35$lcssa = 0, $n$0$i$i3559 = 0;
 var $n$0$i$i54 = 0, $n$0$i$lcssa = 0, $n$0$i48 = 0, $needself$0$i$i = 0, $nret$0$i = 0, $nvars$0$i = 0, $nvars$0$i$i$lcssa = 0, $nvars$0$i$i49 = 0, $or$cond$i = 0, $phitmp = 0, $phitmp$i$i = 0, $switch$i = 0, $upval$0$lcssa$i = 0, $upval$0$lcssa$i$i = 0, $upval$03$i = 0, $upval$03$i$i = 0, $upval$07$i = 0, $upval$07$i$i = 0, $v$i = 0, $v$i$i = 0;
 var $v$i$i10 = 0, $v$i23 = 0, $v$i39 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 384|0;
 $vararg_buffer19 = sp + 376|0;
 $vararg_buffer16 = sp + 368|0;
 $vararg_buffer13 = sp + 360|0;
 $vararg_buffer10 = sp + 352|0;
 $vararg_buffer7 = sp + 344|0;
 $vararg_buffer4 = sp + 336|0;
 $vararg_buffer1 = sp + 328|0;
 $vararg_buffer = sp + 320|0;
 $e$i44 = sp + 296|0;
 $e$i43 = sp + 272|0;
 $e$i42 = sp + 248|0;
 $v$i39 = sp + 216|0;
 $e$i33 = sp + 192|0;
 $e$i = sp + 168|0;
 $v$i23 = sp + 144|0;
 $b$i24 = sp + 120|0;
 $v$i = sp + 96|0;
 $b$i = sp + 72|0;
 $v$i$i10 = sp + 48|0;
 $bl1$i = sp + 428|0;
 $bl2$i = sp + 416|0;
 $e$i$i = sp + 24|0;
 $bl$i1 = sp + 404|0;
 $v$i$i = sp;
 $bl$i = sp + 392|0;
 $escapelist$i = sp + 388|0;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 do {
  switch ($3|0) {
  case 277:  {
   $12 = (($ls) + 48|0);
   $13 = HEAP32[$12>>2]|0;
   _luaX_next($ls);
   $14 = (_luaK_getlabel($13)|0);
   (_subexpr($ls,$v$i$i,0)|0);
   $15 = HEAP32[$v$i$i>>2]|0;
   $16 = ($15|0)==(1);
   if ($16) {
    HEAP32[$v$i$i>>2] = 3;
   }
   $17 = HEAP32[$12>>2]|0;
   _luaK_goiftrue($17,$v$i$i);
   $18 = (($v$i$i) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($bl$i) + 4|0);
   HEAP32[$20>>2] = -1;
   $21 = (($bl$i) + 10|0);
   HEAP8[$21>>0] = 1;
   $22 = (($13) + 50|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = (($bl$i) + 8|0);
   HEAP8[$24>>0] = $23;
   $25 = (($bl$i) + 9|0);
   HEAP8[$25>>0] = 0;
   $26 = (($13) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$bl$i>>2] = $27;
   HEAP32[$26>>2] = $bl$i;
   $28 = HEAP32[$2>>2]|0;
   $29 = ($28|0)==(259);
   if (!($29)) {
    $30 = (($ls) + 52|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (_luaX_token2str($ls,259)|0);
    HEAP32[$vararg_buffer>>2] = $32;
    $33 = (_luaO_pushfstring($31,3240,$vararg_buffer)|0);
    _luaX_syntaxerror($ls,$33);
   }
   _luaX_next($ls);
   _block($ls);
   $34 = (_luaK_jump($13)|0);
   _luaK_patchlist($13,$34,$14);
   _check_match($ls,262,277,$1);
   $35 = HEAP32[$26>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$26>>2] = $36;
   $37 = (($13) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($35) + 8|0);
   $40 = HEAP8[$39>>0]|0;
   $$idx$i$i = (($38) + 48|0);
   $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
   $41 = (($$idx$val$i$i) + 50|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42&255)>($40&255);
   if ($43) {
    $44 = (($$idx$val$i$i) + 24|0);
    $$pre$i$i$i = HEAP32[$44>>2]|0;
    $$pre1$i$i$i = HEAP32[$$idx$val$i$i>>2]|0;
    $$phi$trans$insert$i$i$i = (($$pre1$i$i$i) + 24|0);
    $$pre2$i$i$i = HEAP32[$$phi$trans$insert$i$i$i>>2]|0;
    $46 = $42;
    while(1) {
     $45 = (($46) + -1)<<24>>24;
     HEAP8[$41>>0] = $45;
     $47 = $45&255;
     $48 = ((($$idx$val$i$i) + ($47<<1)|0) + 172|0);
     $49 = HEAP16[$48>>1]|0;
     $50 = $49&65535;
     $51 = ((($$pre2$i$i$i) + (($50*12)|0)|0) + 8|0);
     HEAP32[$51>>2] = $$pre$i$i$i;
     $52 = ($45&255)>($40&255);
     if ($52) {
      $46 = $45;
     } else {
      break;
     }
    }
   }
   $53 = (($35) + 9|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)==(0);
   if (!($55)) {
    $56 = $40&255;
    (_luaK_codeABC($13,35,$56,0,0)|0);
   }
   $57 = HEAP8[$22>>0]|0;
   $58 = $57&255;
   $59 = (($13) + 36|0);
   HEAP32[$59>>2] = $58;
   $60 = (($35) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   _luaK_patchtohere($13,$61);
   _luaK_patchtohere($13,$19);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 266:  {
   $4 = (($ls) + 48|0);
   $5 = HEAP32[$4>>2]|0;
   HEAP32[$escapelist$i>>2] = -1;
   $6 = (_test_then_block($ls)|0);
   $flist$0$i = $6;
   while(1) {
    $7 = HEAP32[$2>>2]|0;
    if ((($7|0) == 260)) {
     label = 5;
     break;
    } else if (!((($7|0) == 261))) {
     label = 6;
     break;
    }
    $8 = (_luaK_jump($5)|0);
    _luaK_concat($5,$escapelist$i,$8);
    _luaK_patchtohere($5,$flist$0$i);
    $9 = (_test_then_block($ls)|0);
    $flist$0$i = $9;
   }
   if ((label|0) == 5) {
    $10 = (_luaK_jump($5)|0);
    _luaK_concat($5,$escapelist$i,$10);
    _luaK_patchtohere($5,$flist$0$i);
    _luaX_next($ls);
    _block($ls);
   }
   else if ((label|0) == 6) {
    _luaK_concat($5,$escapelist$i,$flist$0$i);
   }
   $11 = HEAP32[$escapelist$i>>2]|0;
   _luaK_patchtohere($5,$11);
   _check_match($ls,262,266,$1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 265:  {
   _luaX_next($ls);
   $316 = HEAP32[$2>>2]|0;
   $317 = ($316|0)==(285);
   if (!($317)) {
    $318 = (($ls) + 52|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = (_luaX_token2str($ls,285)|0);
    HEAP32[$vararg_buffer16>>2] = $320;
    $321 = (_luaO_pushfstring($319,3240,$vararg_buffer16)|0);
    _luaX_syntaxerror($ls,$321);
   }
   $322 = (($ls) + 24|0);
   $323 = HEAP32[$322>>2]|0;
   _luaX_next($ls);
   $324 = (($ls) + 48|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (_singlevaraux($325,$323,$v$i,1)|0);
   $327 = ($326|0)==(8);
   if ($327) {
    $328 = (_luaK_stringK($325,$323)|0);
    $329 = (($v$i) + 8|0);
    HEAP32[$329>>2] = $328;
   }
   while(1) {
    $330 = HEAP32[$2>>2]|0;
    if ((($330|0) == 58)) {
     label = 93;
     break;
    } else if (!((($330|0) == 46))) {
     $needself$0$i$i = 0;
     break;
    }
    _field($ls,$v$i);
   }
   if ((label|0) == 93) {
    _field($ls,$v$i);
    $needself$0$i$i = 1;
   }
   _body($ls,$b$i,$needself$0$i$i,$1);
   $331 = HEAP32[$324>>2]|0;
   _luaK_storevar($331,$v$i,$b$i);
   $332 = HEAP32[$324>>2]|0;
   _luaK_fixline($332,$1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 268:  {
   _luaX_next($ls);
   $333 = HEAP32[$2>>2]|0;
   $334 = ($333|0)==(265);
   if ($334) {
    _luaX_next($ls);
    $335 = (($ls) + 48|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = HEAP32[$2>>2]|0;
    $338 = ($337|0)==(285);
    if (!($338)) {
     $339 = (($ls) + 52|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = (_luaX_token2str($ls,285)|0);
     HEAP32[$vararg_buffer19>>2] = $341;
     $342 = (_luaO_pushfstring($340,3240,$vararg_buffer19)|0);
     _luaX_syntaxerror($ls,$342);
    }
    $343 = (($ls) + 24|0);
    $344 = HEAP32[$343>>2]|0;
    _luaX_next($ls);
    _new_localvar($ls,$344,0);
    $345 = (($336) + 36|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = (($v$i23) + 16|0);
    HEAP32[$347>>2] = -1;
    $348 = (($v$i23) + 20|0);
    HEAP32[$348>>2] = -1;
    HEAP32[$v$i23>>2] = 6;
    $349 = (($v$i23) + 8|0);
    HEAP32[$349>>2] = $346;
    _luaK_reserveregs($336,1);
    $ls$idx$val$i = HEAP32[$335>>2]|0;
    $350 = (($ls$idx$val$i) + 50|0);
    $351 = HEAP8[$350>>0]|0;
    $352 = $351&255;
    $353 = (($352) + 1)|0;
    $354 = $353&255;
    HEAP8[$350>>0] = $354;
    $355 = (($ls$idx$val$i) + 24|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = $353 & 255;
    $358 = HEAP32[$ls$idx$val$i>>2]|0;
    $359 = (($358) + 24|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = (($357) + -1)|0;
    $362 = ((($ls$idx$val$i) + ($361<<1)|0) + 172|0);
    $363 = HEAP16[$362>>1]|0;
    $364 = $363&65535;
    $365 = ((($360) + (($364*12)|0)|0) + 4|0);
    HEAP32[$365>>2] = $356;
    $366 = HEAP32[$0>>2]|0;
    _body($ls,$b$i24,0,$366);
    _luaK_storevar($336,$v$i23,$b$i24);
    $367 = (($336) + 24|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = (($336) + 50|0);
    $370 = HEAP8[$369>>0]|0;
    $371 = $370&255;
    $372 = (($371) + -1)|0;
    $373 = ((($336) + ($372<<1)|0) + 172|0);
    $374 = HEAP16[$373>>1]|0;
    $375 = $374&65535;
    $376 = HEAP32[$336>>2]|0;
    $377 = (($376) + 24|0);
    $378 = HEAP32[$377>>2]|0;
    $379 = ((($378) + (($375*12)|0)|0) + 4|0);
    HEAP32[$379>>2] = $368;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $380 = (($ls) + 24|0);
   $381 = (($ls) + 52|0);
   $382 = $333;$nvars$0$i = 0;
   while(1) {
    $383 = ($382|0)==(285);
    if (!($383)) {
     $384 = HEAP32[$381>>2]|0;
     $385 = (_luaX_token2str($ls,285)|0);
     HEAP32[$vararg_buffer22>>2] = $385;
     $386 = (_luaO_pushfstring($384,3240,$vararg_buffer22)|0);
     _luaX_syntaxerror($ls,$386);
    }
    $387 = HEAP32[$380>>2]|0;
    _luaX_next($ls);
    $388 = (($nvars$0$i) + 1)|0;
    _new_localvar($ls,$387,$nvars$0$i);
    $389 = HEAP32[$2>>2]|0;
    if ((($389|0) == 61)) {
     label = 104;
     break;
    } else if (!((($389|0) == 44))) {
     label = 107;
     break;
    }
    _luaX_next($ls);
    $$pre = HEAP32[$2>>2]|0;
    $382 = $$pre;$nvars$0$i = $388;
   }
   do {
    if ((label|0) == 104) {
     _luaX_next($ls);
     (_subexpr($ls,$e$i,0)|0);
     $390 = HEAP32[$2>>2]|0;
     $391 = ($390|0)==(44);
     if ($391) {
      $392 = (($ls) + 48|0);
      $n$0$i$i54 = 1;
      while(1) {
       _luaX_next($ls);
       $393 = HEAP32[$392>>2]|0;
       _luaK_exp2nextreg($393,$e$i);
       (_subexpr($ls,$e$i,0)|0);
       $394 = (($n$0$i$i54) + 1)|0;
       $395 = HEAP32[$2>>2]|0;
       $396 = ($395|0)==(44);
       if ($396) {
        $n$0$i$i54 = $394;
       } else {
        $n$0$i$i$lcssa = $394;
        break;
       }
      }
     } else {
      $n$0$i$i$lcssa = 1;
     }
     $$pre77 = HEAP32[$e$i>>2]|0;
     $ls$idx1$i = (($ls) + 48|0);
     $ls$idx1$val$i = HEAP32[$ls$idx1$i>>2]|0;
     $397 = (($388) - ($n$0$i$i$lcssa))|0;
     if ((($$pre77|0) == 0)) {
      $402 = $397;$ls$idx1$i81 = $ls$idx1$i;$ls$idx1$val$i82 = $ls$idx1$val$i;
      label = 112;
      break;
     } else if (!((($$pre77|0) == 14) | (($$pre77|0) == 13))) {
      _luaK_exp2nextreg($ls$idx1$val$i,$e$i);
      $402 = $397;$ls$idx1$i81 = $ls$idx1$i;$ls$idx1$val$i82 = $ls$idx1$val$i;
      label = 112;
      break;
     }
     $398 = (($397) + 1)|0;
     $399 = ($398|0)<(0);
     $$$i$i = $399 ? 0 : $398;
     _luaK_setreturns($ls$idx1$val$i,$e$i,$$$i$i);
     $400 = ($$$i$i|0)>(1);
     if ($400) {
      $401 = (($$$i$i) + -1)|0;
      _luaK_reserveregs($ls$idx1$val$i,$401);
      $ls$idx1$i80 = $ls$idx1$i;
     } else {
      $ls$idx1$i80 = $ls$idx1$i;
     }
    }
    else if ((label|0) == 107) {
     HEAP32[$e$i>>2] = 0;
     $ls$idx1$i78 = (($ls) + 48|0);
     $ls$idx1$val$i79 = HEAP32[$ls$idx1$i78>>2]|0;
     $402 = $388;$ls$idx1$i81 = $ls$idx1$i78;$ls$idx1$val$i82 = $ls$idx1$val$i79;
     label = 112;
    }
   } while(0);
   if ((label|0) == 112) {
    $403 = ($402|0)>(0);
    if ($403) {
     $404 = (($ls$idx1$val$i82) + 36|0);
     $405 = HEAP32[$404>>2]|0;
     _luaK_reserveregs($ls$idx1$val$i82,$402);
     _luaK_nil($ls$idx1$val$i82,$405,$402);
     $ls$idx1$i80 = $ls$idx1$i81;
    } else {
     $ls$idx1$i80 = $ls$idx1$i81;
    }
   }
   $ls$idx$val$i30 = HEAP32[$ls$idx1$i80>>2]|0;
   $406 = (($ls$idx$val$i30) + 50|0);
   $407 = HEAP8[$406>>0]|0;
   $408 = $407&255;
   $409 = (($408) + ($388))|0;
   $410 = $409&255;
   HEAP8[$406>>0] = $410;
   $411 = ($388|0)==(0);
   if ($411) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $412 = (($ls$idx$val$i30) + 24|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = $409 & 255;
   $415 = HEAP32[$ls$idx$val$i30>>2]|0;
   $416 = (($415) + 24|0);
   $417 = HEAP32[$416>>2]|0;
   $$01$i$i32 = $388;
   while(1) {
    $418 = (($414) - ($$01$i$i32))|0;
    $419 = ((($ls$idx$val$i30) + ($418<<1)|0) + 172|0);
    $420 = HEAP16[$419>>1]|0;
    $421 = $420&65535;
    $422 = ((($417) + (($421*12)|0)|0) + 4|0);
    HEAP32[$422>>2] = $413;
    $423 = (($$01$i$i32) + -1)|0;
    $424 = ($423|0)==(0);
    if ($424) {
     $$0 = 0;
     break;
    } else {
     $$01$i$i32 = $423;
    }
   }
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 264:  {
   $62 = (($ls) + 48|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($bl$i1) + 4|0);
   HEAP32[$64>>2] = -1;
   $65 = (($bl$i1) + 10|0);
   HEAP8[$65>>0] = 1;
   $66 = (($63) + 50|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = (($bl$i1) + 8|0);
   HEAP8[$68>>0] = $67;
   $69 = (($bl$i1) + 9|0);
   HEAP8[$69>>0] = 0;
   $70 = (($63) + 20|0);
   $71 = HEAP32[$70>>2]|0;
   HEAP32[$bl$i1>>2] = $71;
   HEAP32[$70>>2] = $bl$i1;
   _luaX_next($ls);
   $72 = HEAP32[$2>>2]|0;
   $73 = ($72|0)==(285);
   if (!($73)) {
    $74 = (($ls) + 52|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (_luaX_token2str($ls,285)|0);
    HEAP32[$vararg_buffer1>>2] = $76;
    $77 = (_luaO_pushfstring($75,3240,$vararg_buffer1)|0);
    _luaX_syntaxerror($ls,$77);
   }
   $78 = (($ls) + 24|0);
   $79 = HEAP32[$78>>2]|0;
   _luaX_next($ls);
   $80 = HEAP32[$2>>2]|0;
   if ((($80|0) == 267) | (($80|0) == 44)) {
    $106 = HEAP32[$62>>2]|0;
    $107 = (($106) + 36|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (_luaX_newstring($ls,3096,15)|0);
    _new_localvar($ls,$109,0);
    $110 = (_luaX_newstring($ls,3112,11)|0);
    _new_localvar($ls,$110,1);
    $111 = (_luaX_newstring($ls,3128,13)|0);
    _new_localvar($ls,$111,2);
    _new_localvar($ls,$79,3);
    $112 = HEAP32[$2>>2]|0;
    $113 = ($112|0)==(44);
    if ($113) {
     $114 = (($ls) + 52|0);
     $nvars$0$i$i49 = 4;
     while(1) {
      _luaX_next($ls);
      $115 = HEAP32[$2>>2]|0;
      $116 = ($115|0)==(285);
      if (!($116)) {
       $117 = HEAP32[$114>>2]|0;
       $118 = (_luaX_token2str($ls,285)|0);
       HEAP32[$vararg_buffer10>>2] = $118;
       $119 = (_luaO_pushfstring($117,3240,$vararg_buffer10)|0);
       _luaX_syntaxerror($ls,$119);
      }
      $120 = HEAP32[$78>>2]|0;
      _luaX_next($ls);
      $121 = (($nvars$0$i$i49) + 1)|0;
      _new_localvar($ls,$120,$nvars$0$i$i49);
      $122 = HEAP32[$2>>2]|0;
      $123 = ($122|0)==(44);
      if ($123) {
       $nvars$0$i$i49 = $121;
      } else {
       break;
      }
     }
     $phitmp = (($nvars$0$i$i49) + -2)|0;
     $124 = $122;$nvars$0$i$i$lcssa = $phitmp;
    } else {
     $124 = $112;$nvars$0$i$i$lcssa = 1;
    }
    $125 = ($124|0)==(267);
    if (!($125)) {
     $126 = (($ls) + 52|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (_luaX_token2str($ls,267)|0);
     HEAP32[$vararg_buffer13>>2] = $128;
     $129 = (_luaO_pushfstring($127,3240,$vararg_buffer13)|0);
     _luaX_syntaxerror($ls,$129);
    }
    _luaX_next($ls);
    $130 = HEAP32[$0>>2]|0;
    (_subexpr($ls,$e$i$i,0)|0);
    $131 = HEAP32[$2>>2]|0;
    $132 = ($131|0)==(44);
    if ($132) {
     $n$0$i48 = 1;
     while(1) {
      _luaX_next($ls);
      $133 = HEAP32[$62>>2]|0;
      _luaK_exp2nextreg($133,$e$i$i);
      (_subexpr($ls,$e$i$i,0)|0);
      $134 = (($n$0$i48) + 1)|0;
      $135 = HEAP32[$2>>2]|0;
      $136 = ($135|0)==(44);
      if ($136) {
       $n$0$i48 = $134;
      } else {
       $n$0$i$lcssa = $134;
       break;
      }
     }
    } else {
     $n$0$i$lcssa = 1;
    }
    $ls$idx$val$i$i = HEAP32[$62>>2]|0;
    $137 = (3 - ($n$0$i$lcssa))|0;
    $138 = HEAP32[$e$i$i>>2]|0;
    if ((($138|0) == 14) | (($138|0) == 13)) {
     $139 = (($137) + 1)|0;
     $140 = ($139|0)<(0);
     $$$i$i$i = $140 ? 0 : $139;
     _luaK_setreturns($ls$idx$val$i$i,$e$i$i,$$$i$i$i);
     $141 = ($$$i$i$i|0)>(1);
     if ($141) {
      $142 = (($$$i$i$i) + -1)|0;
      _luaK_reserveregs($ls$idx$val$i$i,$142);
     }
    } else if ((($138|0) == 0)) {
     label = 44;
    } else {
     _luaK_exp2nextreg($ls$idx$val$i$i,$e$i$i);
     label = 44;
    }
    if ((label|0) == 44) {
     $143 = ($137|0)>(0);
     if ($143) {
      $144 = (($ls$idx$val$i$i) + 36|0);
      $145 = HEAP32[$144>>2]|0;
      _luaK_reserveregs($ls$idx$val$i$i,$137);
      _luaK_nil($ls$idx$val$i$i,$145,$137);
     }
    }
    _luaK_checkstack($106,3);
    _forbody($ls,$108,$130,$nvars$0$i$i$lcssa,0);
   } else if ((($80|0) == 61)) {
    $81 = HEAP32[$62>>2]|0;
    $82 = (($81) + 36|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (_luaX_newstring($ls,3144,11)|0);
    _new_localvar($ls,$84,0);
    $85 = (_luaX_newstring($ls,3160,11)|0);
    _new_localvar($ls,$85,1);
    $86 = (_luaX_newstring($ls,3176,10)|0);
    _new_localvar($ls,$86,2);
    _new_localvar($ls,$79,3);
    $87 = HEAP32[$2>>2]|0;
    $88 = ($87|0)==(61);
    if (!($88)) {
     $89 = (($ls) + 52|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (_luaX_token2str($ls,61)|0);
     HEAP32[$vararg_buffer4>>2] = $91;
     $92 = (_luaO_pushfstring($90,3240,$vararg_buffer4)|0);
     _luaX_syntaxerror($ls,$92);
    }
    _luaX_next($ls);
    (_subexpr($ls,$e$i42,0)|0);
    $93 = HEAP32[$62>>2]|0;
    _luaK_exp2nextreg($93,$e$i42);
    $94 = HEAP32[$2>>2]|0;
    $95 = ($94|0)==(44);
    if (!($95)) {
     $96 = (($ls) + 52|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (_luaX_token2str($ls,44)|0);
     HEAP32[$vararg_buffer7>>2] = $98;
     $99 = (_luaO_pushfstring($97,3240,$vararg_buffer7)|0);
     _luaX_syntaxerror($ls,$99);
    }
    _luaX_next($ls);
    (_subexpr($ls,$e$i43,0)|0);
    $100 = HEAP32[$62>>2]|0;
    _luaK_exp2nextreg($100,$e$i43);
    $101 = HEAP32[$2>>2]|0;
    $102 = ($101|0)==(44);
    if ($102) {
     _luaX_next($ls);
     (_subexpr($ls,$e$i44,0)|0);
     $103 = HEAP32[$62>>2]|0;
     _luaK_exp2nextreg($103,$e$i44);
    } else {
     $104 = HEAP32[$82>>2]|0;
     $105 = (_luaK_numberK($81,1.0)|0);
     (_luaK_codeABx($81,1,$104,$105)|0);
     _luaK_reserveregs($81,1);
    }
    _forbody($ls,$83,$1,1,1);
   } else {
    _luaX_syntaxerror($ls,3072);
   }
   _check_match($ls,262,264,$1);
   $146 = HEAP32[$70>>2]|0;
   $147 = HEAP32[$146>>2]|0;
   HEAP32[$70>>2] = $147;
   $148 = (($63) + 12|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($146) + 8|0);
   $151 = HEAP8[$150>>0]|0;
   $$idx$i$i2 = (($149) + 48|0);
   $$idx$val$i$i3 = HEAP32[$$idx$i$i2>>2]|0;
   $152 = (($$idx$val$i$i3) + 50|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = ($153&255)>($151&255);
   if ($154) {
    $155 = (($$idx$val$i$i3) + 24|0);
    $$pre$i$i$i4 = HEAP32[$155>>2]|0;
    $$pre1$i$i$i5 = HEAP32[$$idx$val$i$i3>>2]|0;
    $$phi$trans$insert$i$i$i6 = (($$pre1$i$i$i5) + 24|0);
    $$pre2$i$i$i7 = HEAP32[$$phi$trans$insert$i$i$i6>>2]|0;
    $157 = $153;
    while(1) {
     $156 = (($157) + -1)<<24>>24;
     HEAP8[$152>>0] = $156;
     $158 = $156&255;
     $159 = ((($$idx$val$i$i3) + ($158<<1)|0) + 172|0);
     $160 = HEAP16[$159>>1]|0;
     $161 = $160&65535;
     $162 = ((($$pre2$i$i$i7) + (($161*12)|0)|0) + 8|0);
     HEAP32[$162>>2] = $$pre$i$i$i4;
     $163 = ($156&255)>($151&255);
     if ($163) {
      $157 = $156;
     } else {
      break;
     }
    }
   }
   $164 = (($146) + 9|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = ($165<<24>>24)==(0);
   if (!($166)) {
    $167 = $151&255;
    (_luaK_codeABC($63,35,$167,0,0)|0);
   }
   $168 = HEAP8[$66>>0]|0;
   $169 = $168&255;
   $170 = (($63) + 36|0);
   HEAP32[$170>>2] = $169;
   $171 = (($146) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   _luaK_patchtohere($63,$172);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 259:  {
   _luaX_next($ls);
   _block($ls);
   _check_match($ls,262,259,$1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 272:  {
   $173 = (($ls) + 48|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (_luaK_getlabel($174)|0);
   $176 = (($bl1$i) + 4|0);
   HEAP32[$176>>2] = -1;
   $177 = (($bl1$i) + 10|0);
   HEAP8[$177>>0] = 1;
   $178 = (($174) + 50|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = (($bl1$i) + 8|0);
   HEAP8[$180>>0] = $179;
   $181 = (($bl1$i) + 9|0);
   HEAP8[$181>>0] = 0;
   $182 = (($174) + 20|0);
   $183 = HEAP32[$182>>2]|0;
   HEAP32[$bl1$i>>2] = $183;
   $184 = (($bl2$i) + 4|0);
   HEAP32[$184>>2] = -1;
   $185 = (($bl2$i) + 10|0);
   HEAP8[$185>>0] = 0;
   $186 = (($bl2$i) + 8|0);
   HEAP8[$186>>0] = $179;
   $187 = (($bl2$i) + 9|0);
   HEAP8[$187>>0] = 0;
   HEAP32[$bl2$i>>2] = $bl1$i;
   HEAP32[$182>>2] = $bl2$i;
   _luaX_next($ls);
   $188 = (($ls) + 52|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = (($189) + 52|0);
   $191 = HEAP16[$190>>1]|0;
   $192 = (($191) + 1)<<16>>16;
   HEAP16[$190>>1] = $192;
   $193 = ($192&65535)>(200);
   if ($193) {
    _luaX_lexerror($ls,3256,0);
   }
   L133: while(1) {
    $194 = HEAP32[$2>>2]|0;
    switch ($194|0) {
    case 287: case 276: case 262: case 261: case 260:  {
     break L133;
     break;
    }
    default: {
    }
    }
    $195 = (_statement($ls)|0);
    $196 = HEAP32[$2>>2]|0;
    $197 = ($196|0)==(59);
    if ($197) {
     _luaX_next($ls);
    }
    $198 = HEAP32[$173>>2]|0;
    $199 = (($198) + 50|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    $202 = (($198) + 36|0);
    HEAP32[$202>>2] = $201;
    $phitmp$i$i = ($195|0)==(0);
    if (!($phitmp$i$i)) {
     break;
    }
   }
   $203 = HEAP32[$188>>2]|0;
   $204 = (($203) + 52|0);
   $205 = HEAP16[$204>>1]|0;
   $206 = (($205) + -1)<<16>>16;
   HEAP16[$204>>1] = $206;
   _check_match($ls,276,272,$1);
   (_subexpr($ls,$v$i$i10,0)|0);
   $207 = HEAP32[$v$i$i10>>2]|0;
   $208 = ($207|0)==(1);
   if ($208) {
    HEAP32[$v$i$i10>>2] = 3;
   }
   $209 = HEAP32[$173>>2]|0;
   _luaK_goiftrue($209,$v$i$i10);
   $210 = (($v$i$i10) + 20|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = HEAP8[$187>>0]|0;
   $213 = ($212<<24>>24)==(0);
   if ($213) {
    $214 = HEAP32[$182>>2]|0;
    $215 = HEAP32[$214>>2]|0;
    HEAP32[$182>>2] = $215;
    $216 = (($174) + 12|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($214) + 8|0);
    $219 = HEAP8[$218>>0]|0;
    $$idx$i$i14 = (($217) + 48|0);
    $$idx$val$i$i15 = HEAP32[$$idx$i$i14>>2]|0;
    $220 = (($$idx$val$i$i15) + 50|0);
    $221 = HEAP8[$220>>0]|0;
    $222 = ($221&255)>($219&255);
    if ($222) {
     $223 = (($$idx$val$i$i15) + 24|0);
     $$pre$i$i$i16 = HEAP32[$223>>2]|0;
     $$pre1$i$i$i17 = HEAP32[$$idx$val$i$i15>>2]|0;
     $$phi$trans$insert$i$i$i18 = (($$pre1$i$i$i17) + 24|0);
     $$pre2$i$i$i19 = HEAP32[$$phi$trans$insert$i$i$i18>>2]|0;
     $225 = $221;
     while(1) {
      $224 = (($225) + -1)<<24>>24;
      HEAP8[$220>>0] = $224;
      $226 = $224&255;
      $227 = ((($$idx$val$i$i15) + ($226<<1)|0) + 172|0);
      $228 = HEAP16[$227>>1]|0;
      $229 = $228&65535;
      $230 = ((($$pre2$i$i$i19) + (($229*12)|0)|0) + 8|0);
      HEAP32[$230>>2] = $$pre$i$i$i16;
      $231 = ($224&255)>($219&255);
      if ($231) {
       $225 = $224;
      } else {
       break;
      }
     }
    }
    $232 = (($214) + 9|0);
    $233 = HEAP8[$232>>0]|0;
    $234 = ($233<<24>>24)==(0);
    if (!($234)) {
     $235 = $219&255;
     (_luaK_codeABC($174,35,$235,0,0)|0);
    }
    $236 = HEAP8[$178>>0]|0;
    $237 = $236&255;
    $238 = (($174) + 36|0);
    HEAP32[$238>>2] = $237;
    $239 = (($214) + 4|0);
    $240 = HEAP32[$239>>2]|0;
    _luaK_patchtohere($174,$240);
    $241 = HEAP32[$173>>2]|0;
    _luaK_patchlist($241,$211,$175);
   } else {
    $242 = HEAP32[$173>>2]|0;
    $243 = (($242) + 20|0);
    $bl$06$i$i = HEAP32[$243>>2]|0;
    $244 = ($bl$06$i$i|0)==(0|0);
    L154: do {
     if ($244) {
      $upval$0$lcssa$i$i = 0;
      label = 72;
     } else {
      $bl$08$i$i = $bl$06$i$i;$upval$07$i$i = 0;
      while(1) {
       $245 = (($bl$08$i$i) + 10|0);
       $246 = HEAP8[$245>>0]|0;
       $247 = ($246<<24>>24)==(0);
       if (!($247)) {
        $bl$05$i$i = $bl$08$i$i;$upval$03$i$i = $upval$07$i$i;
        break L154;
       }
       $248 = (($bl$08$i$i) + 9|0);
       $249 = HEAP8[$248>>0]|0;
       $250 = $249&255;
       $251 = $250 | $upval$07$i$i;
       $bl$0$i$i = HEAP32[$bl$08$i$i>>2]|0;
       $252 = ($bl$0$i$i|0)==(0|0);
       if ($252) {
        $upval$0$lcssa$i$i = $251;
        label = 72;
        break;
       } else {
        $bl$08$i$i = $bl$0$i$i;$upval$07$i$i = $251;
       }
      }
     }
    } while(0);
    if ((label|0) == 72) {
     _luaX_syntaxerror($ls,3048);
     $bl$05$i$i = 0;$upval$03$i$i = $upval$0$lcssa$i$i;
    }
    $253 = ($upval$03$i$i|0)==(0);
    if (!($253)) {
     $254 = (($bl$05$i$i) + 8|0);
     $255 = HEAP8[$254>>0]|0;
     $256 = $255&255;
     (_luaK_codeABC($242,35,$256,0,0)|0);
    }
    $257 = (($bl$05$i$i) + 4|0);
    $258 = (_luaK_jump($242)|0);
    _luaK_concat($242,$257,$258);
    $259 = HEAP32[$173>>2]|0;
    _luaK_patchtohere($259,$211);
    $260 = HEAP32[$182>>2]|0;
    $261 = HEAP32[$260>>2]|0;
    HEAP32[$182>>2] = $261;
    $262 = (($174) + 12|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = (($260) + 8|0);
    $265 = HEAP8[$264>>0]|0;
    $$idx$i1$i = (($263) + 48|0);
    $$idx$val$i2$i = HEAP32[$$idx$i1$i>>2]|0;
    $266 = (($$idx$val$i2$i) + 50|0);
    $267 = HEAP8[$266>>0]|0;
    $268 = ($267&255)>($265&255);
    if ($268) {
     $269 = (($$idx$val$i2$i) + 24|0);
     $$pre$i$i3$i = HEAP32[$269>>2]|0;
     $$pre1$i$i4$i = HEAP32[$$idx$val$i2$i>>2]|0;
     $$phi$trans$insert$i$i5$i = (($$pre1$i$i4$i) + 24|0);
     $$pre2$i$i6$i = HEAP32[$$phi$trans$insert$i$i5$i>>2]|0;
     $271 = $267;
     while(1) {
      $270 = (($271) + -1)<<24>>24;
      HEAP8[$266>>0] = $270;
      $272 = $270&255;
      $273 = ((($$idx$val$i2$i) + ($272<<1)|0) + 172|0);
      $274 = HEAP16[$273>>1]|0;
      $275 = $274&65535;
      $276 = ((($$pre2$i$i6$i) + (($275*12)|0)|0) + 8|0);
      HEAP32[$276>>2] = $$pre$i$i3$i;
      $277 = ($270&255)>($265&255);
      if ($277) {
       $271 = $270;
      } else {
       break;
      }
     }
    }
    $278 = (($260) + 9|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = ($279<<24>>24)==(0);
    if (!($280)) {
     $281 = $265&255;
     (_luaK_codeABC($174,35,$281,0,0)|0);
    }
    $282 = HEAP8[$178>>0]|0;
    $283 = $282&255;
    $284 = (($174) + 36|0);
    HEAP32[$284>>2] = $283;
    $285 = (($260) + 4|0);
    $286 = HEAP32[$285>>2]|0;
    _luaK_patchtohere($174,$286);
    $287 = HEAP32[$173>>2]|0;
    $288 = (_luaK_jump($174)|0);
    _luaK_patchlist($287,$288,$175);
   }
   $289 = HEAP32[$182>>2]|0;
   $290 = HEAP32[$289>>2]|0;
   HEAP32[$182>>2] = $290;
   $291 = (($174) + 12|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (($289) + 8|0);
   $294 = HEAP8[$293>>0]|0;
   $$idx$i10$i = (($292) + 48|0);
   $$idx$val$i11$i = HEAP32[$$idx$i10$i>>2]|0;
   $295 = (($$idx$val$i11$i) + 50|0);
   $296 = HEAP8[$295>>0]|0;
   $297 = ($296&255)>($294&255);
   if ($297) {
    $298 = (($$idx$val$i11$i) + 24|0);
    $$pre$i$i12$i = HEAP32[$298>>2]|0;
    $$pre1$i$i13$i = HEAP32[$$idx$val$i11$i>>2]|0;
    $$phi$trans$insert$i$i14$i = (($$pre1$i$i13$i) + 24|0);
    $$pre2$i$i15$i = HEAP32[$$phi$trans$insert$i$i14$i>>2]|0;
    $300 = $296;
    while(1) {
     $299 = (($300) + -1)<<24>>24;
     HEAP8[$295>>0] = $299;
     $301 = $299&255;
     $302 = ((($$idx$val$i11$i) + ($301<<1)|0) + 172|0);
     $303 = HEAP16[$302>>1]|0;
     $304 = $303&65535;
     $305 = ((($$pre2$i$i15$i) + (($304*12)|0)|0) + 8|0);
     HEAP32[$305>>2] = $$pre$i$i12$i;
     $306 = ($299&255)>($294&255);
     if ($306) {
      $300 = $299;
     } else {
      break;
     }
    }
   }
   $307 = (($289) + 9|0);
   $308 = HEAP8[$307>>0]|0;
   $309 = ($308<<24>>24)==(0);
   if (!($309)) {
    $310 = $294&255;
    (_luaK_codeABC($174,35,$310,0,0)|0);
   }
   $311 = HEAP8[$178>>0]|0;
   $312 = $311&255;
   $313 = (($174) + 36|0);
   HEAP32[$313>>2] = $312;
   $314 = (($289) + 4|0);
   $315 = HEAP32[$314>>2]|0;
   _luaK_patchtohere($174,$315);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 273:  {
   $425 = (($ls) + 48|0);
   $426 = HEAP32[$425>>2]|0;
   _luaX_next($ls);
   $427 = HEAP32[$2>>2]|0;
   L183: do {
    switch ($427|0) {
    case 59: case 287: case 276: case 262: case 261: case 260:  {
     $first$0$i = 0;$nret$0$i = 0;
     break;
    }
    default: {
     (_subexpr($ls,$e$i33,0)|0);
     $428 = HEAP32[$2>>2]|0;
     $429 = ($428|0)==(44);
     if ($429) {
      $n$0$i$i3559 = 1;
      while(1) {
       _luaX_next($ls);
       $430 = HEAP32[$425>>2]|0;
       _luaK_exp2nextreg($430,$e$i33);
       (_subexpr($ls,$e$i33,0)|0);
       $431 = (($n$0$i$i3559) + 1)|0;
       $432 = HEAP32[$2>>2]|0;
       $433 = ($432|0)==(44);
       if ($433) {
        $n$0$i$i3559 = $431;
       } else {
        $n$0$i$i35$lcssa = $431;
        break;
       }
      }
     } else {
      $n$0$i$i35$lcssa = 1;
     }
     $434 = HEAP32[$e$i33>>2]|0;
     $$off$i = (($434) + -13)|0;
     $switch$i = ($$off$i>>>0)<(2);
     if ($switch$i) {
      _luaK_setreturns($426,$e$i33,-1);
      $435 = HEAP32[$e$i33>>2]|0;
      $436 = ($435|0)==(13);
      $437 = ($n$0$i$i35$lcssa|0)==(1);
      $or$cond$i = $436 & $437;
      if ($or$cond$i) {
       $438 = (($e$i33) + 8|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = HEAP32[$426>>2]|0;
       $441 = (($440) + 12|0);
       $442 = HEAP32[$441>>2]|0;
       $443 = (($442) + ($439<<2)|0);
       $444 = HEAP32[$443>>2]|0;
       $445 = $444 & -64;
       $446 = $445 | 29;
       HEAP32[$443>>2] = $446;
      }
      $447 = (($426) + 50|0);
      $448 = HEAP8[$447>>0]|0;
      $449 = $448&255;
      $first$0$i = $449;$nret$0$i = -1;
      break L183;
     } else {
      $450 = ($n$0$i$i35$lcssa|0)==(1);
      if ($450) {
       $451 = (_luaK_exp2anyreg($426,$e$i33)|0);
       $first$0$i = $451;$nret$0$i = 1;
       break L183;
      } else {
       _luaK_exp2nextreg($426,$e$i33);
       $452 = (($426) + 50|0);
       $453 = HEAP8[$452>>0]|0;
       $454 = $453&255;
       $first$0$i = $454;$nret$0$i = $n$0$i$i35$lcssa;
       break L183;
      }
     }
    }
    }
   } while(0);
   _luaK_ret($426,$first$0$i,$nret$0$i);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 258:  {
   _luaX_next($ls);
   $455 = (($ls) + 48|0);
   $456 = HEAP32[$455>>2]|0;
   $457 = (($456) + 20|0);
   $bl$06$i = HEAP32[$457>>2]|0;
   $458 = ($bl$06$i|0)==(0|0);
   L201: do {
    if ($458) {
     $upval$0$lcssa$i = 0;
     label = 131;
    } else {
     $bl$08$i = $bl$06$i;$upval$07$i = 0;
     while(1) {
      $459 = (($bl$08$i) + 10|0);
      $460 = HEAP8[$459>>0]|0;
      $461 = ($460<<24>>24)==(0);
      if (!($461)) {
       $bl$05$i = $bl$08$i;$upval$03$i = $upval$07$i;
       break L201;
      }
      $462 = (($bl$08$i) + 9|0);
      $463 = HEAP8[$462>>0]|0;
      $464 = $463&255;
      $465 = $464 | $upval$07$i;
      $bl$0$i = HEAP32[$bl$08$i>>2]|0;
      $466 = ($bl$0$i|0)==(0|0);
      if ($466) {
       $upval$0$lcssa$i = $465;
       label = 131;
       break;
      } else {
       $bl$08$i = $bl$0$i;$upval$07$i = $465;
      }
     }
    }
   } while(0);
   if ((label|0) == 131) {
    _luaX_syntaxerror($ls,3048);
    $bl$05$i = 0;$upval$03$i = $upval$0$lcssa$i;
   }
   $467 = ($upval$03$i|0)==(0);
   if (!($467)) {
    $468 = (($bl$05$i) + 8|0);
    $469 = HEAP8[$468>>0]|0;
    $470 = $469&255;
    (_luaK_codeABC($456,35,$470,0,0)|0);
   }
   $471 = (($bl$05$i) + 4|0);
   $472 = (_luaK_jump($456)|0);
   _luaK_concat($456,$471,$472);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $473 = (($ls) + 48|0);
   $474 = HEAP32[$473>>2]|0;
   $475 = (($v$i39) + 8|0);
   _primaryexp($ls,$475);
   $476 = HEAP32[$475>>2]|0;
   $477 = ($476|0)==(13);
   if ($477) {
    $478 = (($v$i39) + 16|0);
    $479 = HEAP32[$478>>2]|0;
    $480 = HEAP32[$474>>2]|0;
    $481 = (($480) + 12|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = (($482) + ($479<<2)|0);
    $484 = HEAP32[$483>>2]|0;
    $485 = $484 & -8372225;
    $486 = $485 | 16384;
    HEAP32[$483>>2] = $486;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$v$i39>>2] = 0;
    _assignment($ls,$v$i39,1);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  }
 } while(0);
 return 0|0;
}
function _close_func($ls) {
 $ls = $ls|0;
 var $$off$i = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi10Z2D = 0, $$pre$phi12Z2D = 0, $$pre$phi14Z2D = 0, $$pre$phi16Z2D = 0, $$pre$phi18Z2D = 0, $$pre$phi2Z2D = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $$pre11 = 0, $$pre13 = 0, $$pre15 = 0, $$pre17 = 0, $$pre19 = 0;
 var $$pre2$i = 0, $$pre3 = 0, $$pre5 = 0, $$pre7 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($3) + 50|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 $$pre19 = (($3) + 24|0);
 if (!($7)) {
  $$pre$i = HEAP32[$$pre19>>2]|0;
  $$phi$trans$insert$i = (($4) + 24|0);
  $$pre2$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $9 = $6;
  while(1) {
   $8 = (($9) + -1)<<24>>24;
   HEAP8[$5>>0] = $8;
   $10 = $8&255;
   $11 = ((($3) + ($10<<1)|0) + 172|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12&65535;
   $14 = ((($$pre2$i) + (($13*12)|0)|0) + 8|0);
   HEAP32[$14>>2] = $$pre$i;
   $15 = ($8<<24>>24)==(0);
   if ($15) {
    break;
   } else {
    $9 = $8;
   }
  }
 }
 _luaK_ret($3,0,0);
 $16 = HEAP32[$$pre19>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = ($17>>>0)<(1073741824);
 if ($18) {
  $19 = (($4) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($4) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 << 2;
  $24 = $16 << 2;
  $25 = (_luaM_realloc_($1,$20,$23,$24)|0);
  $$pre$phi2Z2D = $21;$$pre$phiZ2D = $19;$27 = $25;
 } else {
  $26 = (_luaM_toobig($1)|0);
  $$pre = (($4) + 12|0);
  $$pre1 = (($4) + 44|0);
  $$pre$phi2Z2D = $$pre1;$$pre$phiZ2D = $$pre;$27 = $26;
 }
 HEAP32[$$pre$phiZ2D>>2] = $27;
 $28 = HEAP32[$$pre19>>2]|0;
 HEAP32[$$pre$phi2Z2D>>2] = $28;
 $29 = (($28) + 1)|0;
 $30 = ($29>>>0)<(1073741824);
 if ($30) {
  $31 = (($4) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($4) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 << 2;
  $36 = $28 << 2;
  $37 = (_luaM_realloc_($1,$32,$35,$36)|0);
  $$pre$phi4Z2D = $31;$$pre$phi6Z2D = $33;$39 = $37;
 } else {
  $38 = (_luaM_toobig($1)|0);
  $$pre3 = (($4) + 20|0);
  $$pre5 = (($4) + 48|0);
  $$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $$pre5;$39 = $38;
 }
 HEAP32[$$pre$phi4Z2D>>2] = $39;
 $40 = HEAP32[$$pre19>>2]|0;
 HEAP32[$$pre$phi6Z2D>>2] = $40;
 $41 = (($3) + 40|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 $44 = ($43>>>0)<(268435456);
 if ($44) {
  $45 = (($4) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($4) + 40|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 << 4;
  $50 = $42 << 4;
  $51 = (_luaM_realloc_($1,$46,$49,$50)|0);
  $$pre$phi10Z2D = $47;$$pre$phi8Z2D = $45;$53 = $51;
 } else {
  $52 = (_luaM_toobig($1)|0);
  $$pre7 = (($4) + 8|0);
  $$pre9 = (($4) + 40|0);
  $$pre$phi10Z2D = $$pre9;$$pre$phi8Z2D = $$pre7;$53 = $52;
 }
 HEAP32[$$pre$phi8Z2D>>2] = $53;
 $54 = HEAP32[$41>>2]|0;
 HEAP32[$$pre$phi10Z2D>>2] = $54;
 $55 = (($3) + 44|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + 1)|0;
 $58 = ($57>>>0)<(1073741824);
 if ($58) {
  $59 = (($4) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($4) + 52|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $62 << 2;
  $64 = $56 << 2;
  $65 = (_luaM_realloc_($1,$60,$63,$64)|0);
  $$pre$phi12Z2D = $59;$$pre$phi14Z2D = $61;$67 = $65;
 } else {
  $66 = (_luaM_toobig($1)|0);
  $$pre11 = (($4) + 16|0);
  $$pre13 = (($4) + 52|0);
  $$pre$phi12Z2D = $$pre11;$$pre$phi14Z2D = $$pre13;$67 = $66;
 }
 HEAP32[$$pre$phi12Z2D>>2] = $67;
 $68 = HEAP32[$55>>2]|0;
 HEAP32[$$pre$phi14Z2D>>2] = $68;
 $69 = (($3) + 48|0);
 $70 = HEAP16[$69>>1]|0;
 $71 = $70 << 16 >> 16;
 $72 = (($71) + 1)|0;
 $73 = ($72>>>0)<(357913942);
 if ($73) {
  $74 = (($4) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($4) + 56|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77*12)|0;
  $79 = ($71*12)|0;
  $80 = (_luaM_realloc_($1,$75,$78,$79)|0);
  $$pre$phi16Z2D = $74;$$pre$phi18Z2D = $76;$82 = $80;
 } else {
  $81 = (_luaM_toobig($1)|0);
  $$pre15 = (($4) + 24|0);
  $$pre17 = (($4) + 56|0);
  $$pre$phi16Z2D = $$pre15;$$pre$phi18Z2D = $$pre17;$82 = $81;
 }
 HEAP32[$$pre$phi16Z2D>>2] = $82;
 $83 = HEAP16[$69>>1]|0;
 $84 = $83 << 16 >> 16;
 HEAP32[$$pre$phi18Z2D>>2] = $84;
 $85 = (($4) + 72|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 $88 = (($4) + 28|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($4) + 36|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 << 2;
 $93 = $87 << 2;
 $94 = (_luaM_realloc_($1,$89,$92,$93)|0);
 HEAP32[$88>>2] = $94;
 $95 = HEAP8[$85>>0]|0;
 $96 = $95&255;
 HEAP32[$90>>2] = $96;
 $97 = (($3) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 HEAP32[$2>>2] = $98;
 $99 = ($3|0)==(0|0);
 if ($99) {
  $107 = (($1) + 8|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + -32|0);
  HEAP32[$107>>2] = $109;
  STACKTOP = sp;return;
 }
 $100 = (($ls) + 16|0);
 $101 = HEAP32[$100>>2]|0;
 $$off$i = (($101) + -285)|0;
 $switch$i = ($$off$i>>>0)<(2);
 if (!($switch$i)) {
  $107 = (($1) + 8|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + -32|0);
  HEAP32[$107>>2] = $109;
  STACKTOP = sp;return;
 }
 $102 = (($ls) + 24|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($103) + 16|0);
 $105 = (($103) + 12|0);
 $106 = HEAP32[$105>>2]|0;
 (_luaX_newstring($ls,$104,$106)|0);
 $107 = (($1) + 8|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + -32|0);
 HEAP32[$107>>2] = $109;
 STACKTOP = sp;return;
}
function _test_then_block($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $v$i = sp;
 _luaX_next($ls);
 (_subexpr($ls,$v$i,0)|0);
 $0 = HEAP32[$v$i>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  HEAP32[$v$i>>2] = 3;
 }
 $2 = (($ls) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 _luaK_goiftrue($3,$v$i);
 $4 = (($v$i) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ls) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(274);
 if ($8) {
  _luaX_next($ls);
  _block($ls);
  STACKTOP = sp;return ($5|0);
 }
 $9 = (($ls) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_luaX_token2str($ls,274)|0);
 HEAP32[$vararg_buffer>>2] = $11;
 $12 = (_luaO_pushfstring($10,3240,$vararg_buffer)|0);
 _luaX_syntaxerror($ls,$12);
 _luaX_next($ls);
 _block($ls);
 STACKTOP = sp;return ($5|0);
}
function _block($ls) {
 $ls = $ls|0;
 var $$idx$i = 0, $$idx$val$i = 0, $$phi$trans$insert$i$i = 0, $$pre$i$i = 0, $$pre1$i$i = 0, $$pre2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bl = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bl = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($bl) + 4|0);
 HEAP32[$2>>2] = -1;
 $3 = (($bl) + 10|0);
 HEAP8[$3>>0] = 0;
 $4 = (($1) + 50|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (($bl) + 8|0);
 HEAP8[$6>>0] = $5;
 $7 = (($bl) + 9|0);
 HEAP8[$7>>0] = 0;
 $8 = (($1) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$bl>>2] = $9;
 HEAP32[$8>>2] = $bl;
 $10 = (($ls) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 52|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (($13) + 1)<<16>>16;
 HEAP16[$12>>1] = $14;
 $15 = ($14&65535)>(200);
 if ($15) {
  _luaX_lexerror($ls,3256,0);
 }
 $16 = (($ls) + 16|0);
 L4: while(1) {
  $17 = HEAP32[$16>>2]|0;
  switch ($17|0) {
  case 287: case 276: case 262: case 261: case 260:  {
   break L4;
   break;
  }
  default: {
  }
  }
  $18 = (_statement($ls)|0);
  $19 = HEAP32[$16>>2]|0;
  $20 = ($19|0)==(59);
  if ($20) {
   _luaX_next($ls);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 50|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($21) + 36|0);
  HEAP32[$25>>2] = $24;
  $phitmp$i = ($18|0)==(0);
  if (!($phitmp$i)) {
   break;
  }
 }
 $26 = HEAP32[$10>>2]|0;
 $27 = (($26) + 52|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = (($28) + -1)<<16>>16;
 HEAP16[$27>>1] = $29;
 $30 = HEAP32[$8>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$8>>2] = $31;
 $32 = (($1) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($30) + 8|0);
 $35 = HEAP8[$34>>0]|0;
 $$idx$i = (($33) + 48|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $36 = (($$idx$val$i) + 50|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37&255)>($35&255);
 if ($38) {
  $39 = (($$idx$val$i) + 24|0);
  $$pre$i$i = HEAP32[$39>>2]|0;
  $$pre1$i$i = HEAP32[$$idx$val$i>>2]|0;
  $$phi$trans$insert$i$i = (($$pre1$i$i) + 24|0);
  $$pre2$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
  $41 = $37;
  while(1) {
   $40 = (($41) + -1)<<24>>24;
   HEAP8[$36>>0] = $40;
   $42 = $40&255;
   $43 = ((($$idx$val$i) + ($42<<1)|0) + 172|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = $44&65535;
   $46 = ((($$pre2$i$i) + (($45*12)|0)|0) + 8|0);
   HEAP32[$46>>2] = $$pre$i$i;
   $47 = ($40&255)>($35&255);
   if ($47) {
    $41 = $40;
   } else {
    break;
   }
  }
 }
 $48 = (($30) + 9|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = ($49<<24>>24)==(0);
 if ($50) {
  $52 = HEAP8[$4>>0]|0;
  $53 = $52&255;
  $54 = (($1) + 36|0);
  HEAP32[$54>>2] = $53;
  $55 = (($30) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  _luaK_patchtohere($1,$56);
  STACKTOP = sp;return;
 }
 $51 = $35&255;
 (_luaK_codeABC($1,35,$51,0,0)|0);
 $52 = HEAP8[$4>>0]|0;
 $53 = $52&255;
 $54 = (($1) + 36|0);
 HEAP32[$54>>2] = $53;
 $55 = (($30) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 _luaK_patchtohere($1,$56);
 STACKTOP = sp;return;
}
function _check_match($ls,$what,$who,$where) {
 $ls = $ls|0;
 $what = $what|0;
 $who = $who|0;
 $where = $where|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($what|0);
 if ($2) {
  _luaX_next($ls);
  STACKTOP = sp;return;
 }
 $3 = (($ls) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($where|0);
 $6 = (($ls) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_luaX_token2str($ls,$what)|0);
 if ($5) {
  HEAP32[$vararg_buffer>>2] = $8;
  $9 = (_luaO_pushfstring($7,3240,$vararg_buffer)|0);
  _luaX_syntaxerror($ls,$9);
  STACKTOP = sp;return;
 } else {
  $10 = (_luaX_token2str($ls,$who)|0);
  HEAP32[$vararg_buffer1>>2] = $8;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $10;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $where;
  $11 = (_luaO_pushfstring($7,3192,$vararg_buffer1)|0);
  _luaX_syntaxerror($ls,$11);
  STACKTOP = sp;return;
 }
}
function _subexpr($ls,$v,$limit) {
 $ls = $ls|0;
 $v = $v|0;
 $limit = $limit|0;
 var $$0$i1$ph = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $ls$idx$i = 0, $ls$idx$val$i = 0, $op$0$lcssa = 0, $op$0$ph$ph = 0, $op$03 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v2 = sp;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 52|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = (($3) + 1)<<16>>16;
 HEAP16[$2>>1] = $4;
 $5 = ($4&65535)>(200);
 if ($5) {
  _luaX_lexerror($ls,3256,0);
 }
 $6 = (($ls) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 do {
  switch ($7|0) {
  case 123:  {
   _constructor($ls,$v);
   break;
  }
  case 35:  {
   $$0$i1$ph = 2;
   label = 6;
   break;
  }
  case 263:  {
   $28 = (($v) + 16|0);
   HEAP32[$28>>2] = -1;
   $29 = (($v) + 20|0);
   HEAP32[$29>>2] = -1;
   HEAP32[$v>>2] = 3;
   $30 = (($v) + 8|0);
   HEAP32[$30>>2] = 0;
   label = 18;
   break;
  }
  case 275:  {
   $25 = (($v) + 16|0);
   HEAP32[$25>>2] = -1;
   $26 = (($v) + 20|0);
   HEAP32[$26>>2] = -1;
   HEAP32[$v>>2] = 2;
   $27 = (($v) + 8|0);
   HEAP32[$27>>2] = 0;
   label = 18;
   break;
  }
  case 279:  {
   $31 = (($ls) + 48|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 74|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    _luaX_syntaxerror($ls,2640);
    $$pre = HEAP32[$32>>2]|0;
    $$phi$trans$insert = (($$pre) + 74|0);
    $$pre5 = HEAP8[$$phi$trans$insert>>0]|0;
    $38 = $$pre;$40 = $$pre5;
   } else {
    $38 = $33;$40 = $35;
   }
   $37 = (($38) + 74|0);
   $39 = $40&255;
   $41 = $39 & 251;
   $42 = $41&255;
   HEAP8[$37>>0] = $42;
   $43 = (_luaK_codeABC($32,37,0,1,0)|0);
   $44 = (($v) + 16|0);
   HEAP32[$44>>2] = -1;
   $45 = (($v) + 20|0);
   HEAP32[$45>>2] = -1;
   HEAP32[$v>>2] = 14;
   $46 = (($v) + 8|0);
   HEAP32[$46>>2] = $43;
   label = 18;
   break;
  }
  case 45:  {
   $$0$i1$ph = 0;
   label = 6;
   break;
  }
  case 284:  {
   $10 = (($v) + 16|0);
   HEAP32[$10>>2] = -1;
   $11 = (($v) + 20|0);
   HEAP32[$11>>2] = -1;
   HEAP32[$v>>2] = 5;
   $12 = (($v) + 8|0);
   HEAP32[$12>>2] = 0;
   $13 = (($ls) + 24|0);
   $14 = +HEAPF64[$13>>3];
   $15 = (($v) + 8|0);
   HEAPF64[$15>>3] = $14;
   label = 18;
   break;
  }
  case 269:  {
   $22 = (($v) + 16|0);
   HEAP32[$22>>2] = -1;
   $23 = (($v) + 20|0);
   HEAP32[$23>>2] = -1;
   HEAP32[$v>>2] = 1;
   $24 = (($v) + 8|0);
   HEAP32[$24>>2] = 0;
   label = 18;
   break;
  }
  case 286:  {
   $16 = (($ls) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $ls$idx$i = (($ls) + 48|0);
   $ls$idx$val$i = HEAP32[$ls$idx$i>>2]|0;
   $18 = (_luaK_stringK($ls$idx$val$i,$17)|0);
   $19 = (($v) + 16|0);
   HEAP32[$19>>2] = -1;
   $20 = (($v) + 20|0);
   HEAP32[$20>>2] = -1;
   HEAP32[$v>>2] = 4;
   $21 = (($v) + 8|0);
   HEAP32[$21>>2] = $18;
   label = 18;
   break;
  }
  case 270:  {
   $$0$i1$ph = 1;
   label = 6;
   break;
  }
  case 265:  {
   _luaX_next($ls);
   $47 = (($ls) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   _body($ls,$v,0,$48);
   break;
  }
  default: {
   _primaryexp($ls,$v);
  }
  }
 } while(0);
 if ((label|0) == 6) {
  _luaX_next($ls);
  (_subexpr($ls,$v,8)|0);
  $8 = (($ls) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  _luaK_prefix($9,$$0$i1$ph,$v);
 }
 else if ((label|0) == 18) {
  _luaX_next($ls);
 }
 $49 = HEAP32[$6>>2]|0;
 do {
  switch ($49|0) {
  case 283:  {
   $op$0$ph$ph = 7;
   break;
  }
  case 280:  {
   $op$0$ph$ph = 8;
   break;
  }
  case 60:  {
   $op$0$ph$ph = 9;
   break;
  }
  case 94:  {
   $op$0$ph$ph = 5;
   break;
  }
  case 278:  {
   $op$0$ph$ph = 6;
   break;
  }
  case 45:  {
   $op$0$ph$ph = 1;
   break;
  }
  case 43:  {
   $op$0$ph$ph = 0;
   break;
  }
  case 42:  {
   $op$0$ph$ph = 2;
   break;
  }
  case 47:  {
   $op$0$ph$ph = 3;
   break;
  }
  case 37:  {
   $op$0$ph$ph = 4;
   break;
  }
  case 257:  {
   $op$0$ph$ph = 13;
   break;
  }
  case 271:  {
   $op$0$ph$ph = 14;
   break;
  }
  case 282:  {
   $op$0$ph$ph = 10;
   break;
  }
  case 62:  {
   $op$0$ph$ph = 11;
   break;
  }
  case 281:  {
   $op$0$ph$ph = 12;
   break;
  }
  default: {
   $op$0$lcssa = 15;
   $62 = HEAP32[$0>>2]|0;
   $63 = (($62) + 52|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = (($64) + -1)<<16>>16;
   HEAP16[$63>>1] = $65;
   STACKTOP = sp;return ($op$0$lcssa|0);
  }
  }
 } while(0);
 $50 = (($ls) + 48|0);
 $op$03 = $op$0$ph$ph;
 while(1) {
  $51 = (2608 + ($op$03<<1)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($53>>>0)>($limit>>>0);
  if (!($54)) {
   $op$0$lcssa = $op$03;
   label = 37;
   break;
  }
  _luaX_next($ls);
  $55 = HEAP32[$50>>2]|0;
  _luaK_infix($55,$op$03,$v);
  $56 = ((2608 + ($op$03<<1)|0) + 1|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = (_subexpr($ls,$v2,$58)|0);
  $60 = HEAP32[$50>>2]|0;
  _luaK_posfix($60,$op$03,$v,$v2);
  $61 = ($59|0)==(15);
  if ($61) {
   $op$0$lcssa = 15;
   label = 37;
   break;
  } else {
   $op$03 = $59;
  }
 }
 if ((label|0) == 37) {
  $62 = HEAP32[$0>>2]|0;
  $63 = (($62) + 52|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = (($64) + -1)<<16>>16;
  HEAP16[$63>>1] = $65;
  STACKTOP = sp;return ($op$0$lcssa|0);
 }
 return 0|0;
}
function _new_localvar($ls,$name,$n) {
 $ls = $ls|0;
 $name = $name|0;
 $n = $n|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre1 = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $oldsize$01$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 50|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + ($n))|0;
 $6 = ($5|0)>(199);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  $11 = (($1) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  if ($10) {
   HEAP32[$vararg_buffer>>2] = 200;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 2760;
   $13 = (_luaO_pushfstring($12,2832,$vararg_buffer)|0);
   $17 = $13;
  } else {
   HEAP32[$vararg_buffer2>>2] = $9;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = 200;
   $vararg_ptr6 = (($vararg_buffer2) + 8|0);
   HEAP32[$vararg_ptr6>>2] = 2760;
   $14 = (_luaO_pushfstring($12,2872,$vararg_buffer2)|0);
   $17 = $14;
  }
  $15 = (($1) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  _luaX_lexerror($16,$17,0);
  $$pre = HEAP32[$0>>2]|0;
  $19 = $$pre;
 } else {
  $19 = $1;
 }
 $18 = HEAP32[$19>>2]|0;
 $20 = (($18) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 48|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = ($24|0)<($21|0);
 if ($25) {
  $$phi$trans$insert = (($18) + 24|0);
  $$pre1 = HEAP32[$$phi$trans$insert>>2]|0;
  $32 = $21;$35 = $$pre1;
 } else {
  $26 = (($ls) + 52|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($18) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_luaM_growaux_($27,$29,$20,12,32767,2776)|0);
  HEAP32[$28>>2] = $30;
  $$pre$i = HEAP32[$20>>2]|0;
  $32 = $$pre$i;$35 = $30;
 }
 $31 = ($21|0)<($32|0);
 if ($31) {
  $oldsize$01$i = $21;
  while(1) {
   $33 = (($oldsize$01$i) + 1)|0;
   $34 = (($35) + (($oldsize$01$i*12)|0)|0);
   HEAP32[$34>>2] = 0;
   $exitcond = ($33|0)==($32|0);
   if ($exitcond) {
    break;
   } else {
    $oldsize$01$i = $33;
   }
  }
 }
 $36 = HEAP16[$22>>1]|0;
 $37 = $36 << 16 >> 16;
 $38 = (($35) + (($37*12)|0)|0);
 HEAP32[$38>>2] = $name;
 $39 = (($name) + 5|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40 & 3;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $50 = $36;
  $49 = (($50) + 1)<<16>>16;
  HEAP16[$22>>1] = $49;
  $51 = HEAP8[$2>>0]|0;
  $52 = $51&255;
  $53 = (($52) + ($n))|0;
  $54 = ((($1) + ($53<<1)|0) + 172|0);
  HEAP16[$54>>1] = $50;
  STACKTOP = sp;return;
 }
 $43 = (($18) + 5|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44 & 4;
 $46 = ($45<<24>>24)==(0);
 if ($46) {
  $50 = $36;
  $49 = (($50) + 1)<<16>>16;
  HEAP16[$22>>1] = $49;
  $51 = HEAP8[$2>>0]|0;
  $52 = $51&255;
  $53 = (($52) + ($n))|0;
  $54 = ((($1) + ($53<<1)|0) + 172|0);
  HEAP16[$54>>1] = $50;
  STACKTOP = sp;return;
 }
 $47 = (($ls) + 52|0);
 $48 = HEAP32[$47>>2]|0;
 _luaC_barrierf($48,$18,$name);
 $$pre3$i = HEAP16[$22>>1]|0;
 $50 = $$pre3$i;
 $49 = (($50) + 1)<<16>>16;
 HEAP16[$22>>1] = $49;
 $51 = HEAP8[$2>>0]|0;
 $52 = $51&255;
 $53 = (($52) + ($n))|0;
 $54 = ((($1) + ($53<<1)|0) + 172|0);
 HEAP16[$54>>1] = $50;
 STACKTOP = sp;return;
}
function _forbody($ls,$base,$line,$nvars,$isnum) {
 $ls = $ls|0;
 $base = $base|0;
 $line = $line|0;
 $nvars = $nvars|0;
 $isnum = $isnum|0;
 var $$01$i2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$phi$trans$insert$i$i = 0, $$pre$i$i = 0, $$pre1$i$i = 0, $$pre2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $bl = 0, $ls$idx$val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $bl = sp + 4|0;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 50|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + 3)|0;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = (($1) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5 & 255;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) + -3)|0;
 $14 = ((($1) + ($13<<1)|0) + 172|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ((($12) + (($16*12)|0)|0) + 4|0);
 HEAP32[$17>>2] = $8;
 $18 = (($9) + -2)|0;
 $19 = ((($1) + ($18<<1)|0) + 172|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ((($12) + (($21*12)|0)|0) + 4|0);
 HEAP32[$22>>2] = $8;
 $23 = (($9) + -1)|0;
 $24 = ((($1) + ($23<<1)|0) + 172|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = ((($12) + (($26*12)|0)|0) + 4|0);
 HEAP32[$27>>2] = $8;
 $28 = (($ls) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(259);
 if (!($30)) {
  $31 = (($ls) + 52|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_luaX_token2str($ls,259)|0);
  HEAP32[$vararg_buffer>>2] = $33;
  $34 = (_luaO_pushfstring($32,3240,$vararg_buffer)|0);
  _luaX_syntaxerror($ls,$34);
 }
 _luaX_next($ls);
 $35 = ($isnum|0)!=(0);
 if ($35) {
  $36 = (_luaK_codeABx($1,32,$base,131070)|0);
  $91 = $36;
 } else {
  $37 = (_luaK_jump($1)|0);
  $91 = $37;
 }
 $38 = (($bl) + 4|0);
 HEAP32[$38>>2] = -1;
 $39 = (($bl) + 10|0);
 HEAP8[$39>>0] = 0;
 $40 = HEAP8[$2>>0]|0;
 $41 = (($bl) + 8|0);
 HEAP8[$41>>0] = $40;
 $42 = (($bl) + 9|0);
 HEAP8[$42>>0] = 0;
 $43 = (($1) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$bl>>2] = $44;
 HEAP32[$43>>2] = $bl;
 $ls$idx$val = HEAP32[$0>>2]|0;
 $45 = (($ls$idx$val) + 50|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (($47) + ($nvars))|0;
 $49 = $48&255;
 HEAP8[$45>>0] = $49;
 $50 = ($nvars|0)==(0);
 if (!($50)) {
  $51 = (($ls$idx$val) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $48 & 255;
  $54 = HEAP32[$ls$idx$val>>2]|0;
  $55 = (($54) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  $$01$i2 = $nvars;
  while(1) {
   $57 = (($53) - ($$01$i2))|0;
   $58 = ((($ls$idx$val) + ($57<<1)|0) + 172|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = ((($56) + (($60*12)|0)|0) + 4|0);
   HEAP32[$61>>2] = $52;
   $62 = (($$01$i2) + -1)|0;
   $63 = ($62|0)==(0);
   if ($63) {
    break;
   } else {
    $$01$i2 = $62;
   }
  }
 }
 _luaK_reserveregs($1,$nvars);
 _block($ls);
 $64 = HEAP32[$43>>2]|0;
 $65 = HEAP32[$64>>2]|0;
 HEAP32[$43>>2] = $65;
 $66 = (($1) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($64) + 8|0);
 $69 = HEAP8[$68>>0]|0;
 $$idx$i = (($67) + 48|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $70 = (($$idx$val$i) + 50|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = ($71&255)>($69&255);
 if ($72) {
  $73 = (($$idx$val$i) + 24|0);
  $$pre$i$i = HEAP32[$73>>2]|0;
  $$pre1$i$i = HEAP32[$$idx$val$i>>2]|0;
  $$phi$trans$insert$i$i = (($$pre1$i$i) + 24|0);
  $$pre2$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
  $75 = $71;
  while(1) {
   $74 = (($75) + -1)<<24>>24;
   HEAP8[$70>>0] = $74;
   $76 = $74&255;
   $77 = ((($$idx$val$i) + ($76<<1)|0) + 172|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78&65535;
   $80 = ((($$pre2$i$i) + (($79*12)|0)|0) + 8|0);
   HEAP32[$80>>2] = $$pre$i$i;
   $81 = ($74&255)>($69&255);
   if ($81) {
    $75 = $74;
   } else {
    break;
   }
  }
 }
 $82 = (($64) + 9|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = ($83<<24>>24)==(0);
 if (!($84)) {
  $85 = $69&255;
  (_luaK_codeABC($1,35,$85,0,0)|0);
 }
 $86 = HEAP8[$2>>0]|0;
 $87 = $86&255;
 $88 = (($1) + 36|0);
 HEAP32[$88>>2] = $87;
 $89 = (($64) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 _luaK_patchtohere($1,$90);
 _luaK_patchtohere($1,$91);
 if ($35) {
  $92 = (_luaK_codeABx($1,31,$base,131070)|0);
  _luaK_fixline($1,$line);
  $95 = $92;
  $94 = (($91) + 1)|0;
  _luaK_patchlist($1,$95,$94);
  STACKTOP = sp;return;
 } else {
  (_luaK_codeABC($1,33,$base,0,$nvars)|0);
  _luaK_fixline($1,$line);
  $93 = (_luaK_jump($1)|0);
  $95 = $93;
  $94 = (($91) + 1)|0;
  _luaK_patchlist($1,$95,$94);
  STACKTOP = sp;return;
 }
}
function _singlevaraux($fs,$n,$var,$base) {
 $fs = $fs|0;
 $n = $n|0;
 $var = $var|0;
 $base = $base|0;
 var $$0 = 0, $$0$i1 = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $$pre12$i = 0, $$pre13$i = 0, $$pre14$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bl$0$i = 0, $bl$03$i = 0, $bl$04$i = 0, $exitcond = 0, $i$0$i = 0, $i$0$in$i = 0, $i$06$i = 0;
 var $oldsize$01$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($fs|0)==(0|0);
 if ($0) {
  $1 = (($var) + 16|0);
  HEAP32[$1>>2] = -1;
  $2 = (($var) + 20|0);
  HEAP32[$2>>2] = -1;
  HEAP32[$var>>2] = 8;
  $3 = (($var) + 8|0);
  HEAP32[$3>>2] = 255;
  $$0 = 8;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($fs) + 50|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $i$0$in$i = $6;
 while(1) {
  $i$0$i = (($i$0$in$i) + -1)|0;
  $7 = ($i$0$in$i|0)>(0);
  if (!($7)) {
   break;
  }
  $8 = ((($fs) + ($i$0$i<<1)|0) + 172|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = HEAP32[$fs>>2]|0;
  $12 = (($11) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + (($10*12)|0)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($n|0);
  if ($16) {
   label = 6;
   break;
  } else {
   $i$0$in$i = $i$0$i;
  }
 }
 if ((label|0) == 6) {
  $17 = (($var) + 16|0);
  HEAP32[$17>>2] = -1;
  $18 = (($var) + 20|0);
  HEAP32[$18>>2] = -1;
  HEAP32[$var>>2] = 6;
  $19 = (($var) + 8|0);
  HEAP32[$19>>2] = $i$0$i;
  $20 = ($base|0)==(0);
  if (!($20)) {
   $$0 = 6;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = (($fs) + 20|0);
  $bl$03$i = HEAP32[$21>>2]|0;
  $22 = ($bl$03$i|0)==(0|0);
  if ($22) {
   $$0 = 6;
   STACKTOP = sp;return ($$0|0);
  } else {
   $bl$04$i = $bl$03$i;
  }
  while(1) {
   $24 = (($bl$04$i) + 8|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ($26|0)>($i$0$i|0);
   if (!($27)) {
    break;
   }
   $bl$0$i = HEAP32[$bl$04$i>>2]|0;
   $23 = ($bl$0$i|0)==(0|0);
   if ($23) {
    $$0 = 6;
    label = 32;
    break;
   } else {
    $bl$04$i = $bl$0$i;
   }
  }
  if ((label|0) == 32) {
   STACKTOP = sp;return ($$0|0);
  }
  $28 = (($bl$04$i) + 9|0);
  HEAP8[$28>>0] = 1;
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (($fs) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_singlevaraux($30,$n,$var,0)|0);
 $32 = ($31|0)==(8);
 if ($32) {
  $$0 = 8;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = HEAP32[$fs>>2]|0;
 $34 = (($33) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 72|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = ($37<<24>>24)==(0);
 L26: do {
  if ($39) {
   $104 = 0;
   label = 17;
  } else {
   $40 = HEAP32[$var>>2]|0;
   $41 = (($var) + 8|0);
   $i$06$i = 0;
   while(1) {
    $42 = ((($fs) + ($i$06$i<<1)|0) + 51|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = ($44|0)==($40|0);
    if ($45) {
     $46 = ((($fs) + ($i$06$i<<1)|0) + 52|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $49 = HEAP32[$41>>2]|0;
     $50 = ($48|0)==($49|0);
     if ($50) {
      $$0$i1 = $i$06$i;
      break L26;
     }
    }
    $51 = (($i$06$i) + 1)|0;
    $52 = ($51|0)<($38|0);
    if ($52) {
     $i$06$i = $51;
    } else {
     $104 = $37;
     label = 17;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $53 = (($38) + 1)|0;
  $54 = ($53>>>0)>(60);
  if ($54) {
   $55 = (($33) + 60|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0);
   $58 = (($fs) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   if ($57) {
    HEAP32[$vararg_buffer>>2] = 60;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 3024;
    $60 = (_luaO_pushfstring($59,2832,$vararg_buffer)|0);
    $64 = $60;
   } else {
    HEAP32[$vararg_buffer2>>2] = $56;
    $vararg_ptr5 = (($vararg_buffer2) + 4|0);
    HEAP32[$vararg_ptr5>>2] = 60;
    $vararg_ptr6 = (($vararg_buffer2) + 8|0);
    HEAP32[$vararg_ptr6>>2] = 3024;
    $61 = (_luaO_pushfstring($59,2872,$vararg_buffer2)|0);
    $64 = $61;
   }
   $62 = (($fs) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   _luaX_lexerror($63,$64,0);
   $$pre$i = HEAP8[$36>>0]|0;
   $$pre12$i = HEAP32[$34>>2]|0;
   $66 = $$pre$i;$68 = $$pre12$i;
  } else {
   $66 = $104;$68 = $35;
  }
  $65 = $66&255;
  $67 = ($65|0)<($68|0);
  if ($67) {
   $$pre = (($33) + 28|0);
   $$pre$phiZ2D = $$pre;$75 = $68;
  } else {
   $69 = (($fs) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($33) + 28|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (_luaM_growaux_($70,$72,$34,4,2147483645,3040)|0);
   HEAP32[$71>>2] = $73;
   $$pre13$i = HEAP32[$34>>2]|0;
   $$pre$phiZ2D = $71;$75 = $$pre13$i;
  }
  $74 = ($35|0)<($75|0);
  if ($74) {
   $oldsize$01$i = $35;
   while(1) {
    $76 = (($oldsize$01$i) + 1)|0;
    $77 = HEAP32[$$pre$phiZ2D>>2]|0;
    $78 = (($77) + ($oldsize$01$i<<2)|0);
    HEAP32[$78>>2] = 0;
    $exitcond = ($76|0)==($75|0);
    if ($exitcond) {
     break;
    } else {
     $oldsize$01$i = $76;
    }
   }
  }
  $79 = HEAP8[$36>>0]|0;
  $80 = $79&255;
  $81 = HEAP32[$$pre$phiZ2D>>2]|0;
  $82 = (($81) + ($80<<2)|0);
  HEAP32[$82>>2] = $n;
  $83 = (($n) + 5|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84 & 3;
  $86 = ($85<<24>>24)==(0);
  if ($86) {
   $96 = $79;
  } else {
   $87 = (($33) + 5|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88 & 4;
   $90 = ($89<<24>>24)==(0);
   if ($90) {
    $96 = $79;
   } else {
    $91 = (($fs) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    _luaC_barrierf($92,$33,$n);
    $$pre14$i = HEAP8[$36>>0]|0;
    $96 = $$pre14$i;
   }
  }
  $93 = HEAP32[$var>>2]|0;
  $94 = $93&255;
  $95 = $96&255;
  $97 = ((($fs) + ($95<<1)|0) + 51|0);
  HEAP8[$97>>0] = $94;
  $98 = (($var) + 8|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $99&255;
  $101 = ((($fs) + ($95<<1)|0) + 52|0);
  HEAP8[$101>>0] = $100;
  $102 = (($96) + 1)<<24>>24;
  HEAP8[$36>>0] = $102;
  $$0$i1 = $95;
 }
 $103 = (($var) + 8|0);
 HEAP32[$103>>2] = $$0$i1;
 HEAP32[$var>>2] = 7;
 $$0 = 7;
 STACKTOP = sp;return ($$0|0);
}
function _field($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $ls$idx$val$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $key = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 (_luaK_exp2anyreg($1,$v)|0);
 _luaX_next($ls);
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(285);
 if (!($4)) {
  $5 = (($ls) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_luaX_token2str($ls,285)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $8 = (_luaO_pushfstring($6,3240,$vararg_buffer)|0);
  _luaX_syntaxerror($ls,$8);
 }
 $9 = (($ls) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 _luaX_next($ls);
 $ls$idx$val$i = HEAP32[$0>>2]|0;
 $11 = (_luaK_stringK($ls$idx$val$i,$10)|0);
 $12 = (($key) + 16|0);
 HEAP32[$12>>2] = -1;
 $13 = (($key) + 20|0);
 HEAP32[$13>>2] = -1;
 HEAP32[$key>>2] = 4;
 $14 = (($key) + 8|0);
 HEAP32[$14>>2] = $11;
 _luaK_indexed($1,$v,$key);
 STACKTOP = sp;return;
}
function _body($ls,$e,$needself,$line) {
 $ls = $ls|0;
 $e = $e|0;
 $needself = $needself|0;
 $line = $line|0;
 var $$01$i$i = 0, $$phi$trans$insert = 0, $$pr$i = 0, $$pr2$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi13Z2D = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre5$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, $i$01$i = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $new_fs = 0, $nparams$0$i = 0, $nparams$1$ph$i = 0, $nparams$2$i = 0, $oldsize$02$i = 0, $phitmp$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $new_fs = sp + 12|0;
 _open_func($ls,$new_fs);
 $0 = HEAP32[$new_fs>>2]|0;
 $1 = (($0) + 60|0);
 HEAP32[$1>>2] = $line;
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(40);
 if (!($4)) {
  $5 = (($ls) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_luaX_token2str($ls,40)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $8 = (_luaO_pushfstring($6,3240,$vararg_buffer)|0);
  _luaX_syntaxerror($ls,$8);
 }
 _luaX_next($ls);
 $9 = ($needself|0)==(0);
 if ($9) {
  $$phi$trans$insert = (($ls) + 48|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre10 = HEAP32[$$pre>>2]|0;
  $29 = $$pre10;$60 = $$pre;
 } else {
  $10 = (_luaX_newstring($ls,2688,4)|0);
  _new_localvar($ls,$10,0);
  $ls$idx = (($ls) + 48|0);
  $ls$idx$val = HEAP32[$ls$idx>>2]|0;
  $11 = (($ls$idx$val) + 50|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($13) + 1)|0;
  $15 = $14&255;
  HEAP8[$11>>0] = $15;
  $16 = (($ls$idx$val) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 & 255;
  $19 = HEAP32[$ls$idx$val>>2]|0;
  $20 = (($19) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($18) + -1)|0;
  $23 = ((($ls$idx$val) + ($22<<1)|0) + 172|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = ((($21) + (($25*12)|0)|0) + 4|0);
  HEAP32[$26>>2] = $17;
  $29 = $19;$60 = $ls$idx$val;
 }
 $27 = (($ls) + 48|0);
 $28 = (($29) + 74|0);
 HEAP8[$28>>0] = 0;
 $30 = HEAP32[$2>>2]|0;
 $31 = ($30|0)==(41);
 L8: do {
  if ($31) {
   $64 = 0;$nparams$2$i = 0;
  } else {
   $32 = (($ls) + 24|0);
   $150 = $30;$nparams$0$i = 0;
   while(1) {
    if ((($150|0) == 279)) {
     break;
    } else if ((($150|0) == 285)) {
     $33 = HEAP32[$32>>2]|0;
     _luaX_next($ls);
     $34 = (($nparams$0$i) + 1)|0;
     _new_localvar($ls,$33,$nparams$0$i);
     $nparams$1$ph$i = $34;
    } else {
     _luaX_syntaxerror($ls,2728);
     $nparams$1$ph$i = $nparams$0$i;
    }
    $$pr2$i = HEAP8[$28>>0]|0;
    $37 = ($$pr2$i<<24>>24)==(0);
    if (!($37)) {
     $64 = $$pr2$i;$nparams$2$i = $nparams$1$ph$i;
     break L8;
    }
    $38 = HEAP32[$2>>2]|0;
    $39 = ($38|0)==(44);
    if (!($39)) {
     $64 = 0;$nparams$2$i = $nparams$1$ph$i;
     break L8;
    }
    _luaX_next($ls);
    $$pr$i = HEAP32[$2>>2]|0;
    $150 = $$pr$i;$nparams$0$i = $nparams$1$ph$i;
   }
   _luaX_next($ls);
   $35 = (_luaX_newstring($ls,2720,3)|0);
   $36 = (($nparams$0$i) + 1)|0;
   _new_localvar($ls,$35,$nparams$0$i);
   HEAP8[$28>>0] = 7;
   $64 = 7;$nparams$2$i = $36;
  }
 } while(0);
 $ls$idx$val$i = HEAP32[$27>>2]|0;
 $40 = (($ls$idx$val$i) + 50|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = (($42) + ($nparams$2$i))|0;
 $44 = $43&255;
 HEAP8[$40>>0] = $44;
 $45 = ($nparams$2$i|0)==(0);
 if (!($45)) {
  $46 = (($ls$idx$val$i) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $43 & 255;
  $49 = HEAP32[$ls$idx$val$i>>2]|0;
  $50 = (($49) + 24|0);
  $51 = HEAP32[$50>>2]|0;
  $$01$i$i = $nparams$2$i;
  while(1) {
   $52 = (($48) - ($$01$i$i))|0;
   $53 = ((($ls$idx$val$i) + ($52<<1)|0) + 172|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = ((($51) + (($55*12)|0)|0) + 4|0);
   HEAP32[$56>>2] = $47;
   $57 = (($$01$i$i) + -1)|0;
   $58 = ($57|0)==(0);
   if ($58) {
    break;
   } else {
    $$01$i$i = $57;
   }
  }
 }
 $59 = (($60) + 50|0);
 $61 = HEAP8[$59>>0]|0;
 $62 = $61&255;
 $63 = $64&255;
 $65 = $63 & 1;
 $66 = (($62) - ($65))|0;
 $67 = $66&255;
 $68 = (($29) + 73|0);
 HEAP8[$68>>0] = $67;
 _luaK_reserveregs($60,$62);
 $69 = HEAP32[$2>>2]|0;
 $70 = ($69|0)==(41);
 $$pre11 = (($ls) + 52|0);
 if (!($70)) {
  $71 = HEAP32[$$pre11>>2]|0;
  $72 = (_luaX_token2str($ls,41)|0);
  HEAP32[$vararg_buffer1>>2] = $72;
  $73 = (_luaO_pushfstring($71,3240,$vararg_buffer1)|0);
  _luaX_syntaxerror($ls,$73);
 }
 _luaX_next($ls);
 $74 = HEAP32[$$pre11>>2]|0;
 $75 = (($74) + 52|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = (($76) + 1)<<16>>16;
 HEAP16[$75>>1] = $77;
 $78 = ($77&65535)>(200);
 if ($78) {
  _luaX_lexerror($ls,3256,0);
 }
 L30: while(1) {
  $79 = HEAP32[$2>>2]|0;
  switch ($79|0) {
  case 287: case 276: case 262: case 261: case 260:  {
   break L30;
   break;
  }
  default: {
  }
  }
  $80 = (_statement($ls)|0);
  $81 = HEAP32[$2>>2]|0;
  $82 = ($81|0)==(59);
  if ($82) {
   _luaX_next($ls);
  }
  $83 = HEAP32[$27>>2]|0;
  $84 = (($83) + 50|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($83) + 36|0);
  HEAP32[$87>>2] = $86;
  $phitmp$i = ($80|0)==(0);
  if (!($phitmp$i)) {
   break;
  }
 }
 $88 = HEAP32[$$pre11>>2]|0;
 $89 = (($88) + 52|0);
 $90 = HEAP16[$89>>1]|0;
 $91 = (($90) + -1)<<16>>16;
 HEAP16[$89>>1] = $91;
 $92 = (($ls) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$new_fs>>2]|0;
 $95 = (($94) + 64|0);
 HEAP32[$95>>2] = $93;
 _check_match($ls,262,265,$line);
 _close_func($ls);
 $96 = HEAP32[$27>>2]|0;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($97) + 52|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($96) + 44|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)<($99|0);
 if ($102) {
  $$pre12 = (($97) + 16|0);
  $$pre$phi13Z2D = $$pre12;$108 = $99;
 } else {
  $103 = HEAP32[$$pre11>>2]|0;
  $104 = (($97) + 16|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (_luaM_growaux_($103,$105,$98,4,262143,2696)|0);
  HEAP32[$104>>2] = $106;
  $$pre$i = HEAP32[$98>>2]|0;
  $$pre$phi13Z2D = $104;$108 = $$pre$i;
 }
 $107 = ($99|0)<($108|0);
 if ($107) {
  $oldsize$02$i = $99;
  while(1) {
   $109 = (($oldsize$02$i) + 1)|0;
   $110 = HEAP32[$$pre$phi13Z2D>>2]|0;
   $111 = (($110) + ($oldsize$02$i<<2)|0);
   HEAP32[$111>>2] = 0;
   $exitcond = ($109|0)==($108|0);
   if ($exitcond) {
    break;
   } else {
    $oldsize$02$i = $109;
   }
  }
 }
 $112 = HEAP32[$new_fs>>2]|0;
 $113 = HEAP32[$100>>2]|0;
 $114 = (($113) + 1)|0;
 HEAP32[$100>>2] = $114;
 $115 = HEAP32[$$pre$phi13Z2D>>2]|0;
 $116 = (($115) + ($113<<2)|0);
 HEAP32[$116>>2] = $112;
 $117 = HEAP32[$new_fs>>2]|0;
 $118 = (($117) + 5|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119 & 3;
 $121 = ($120<<24>>24)==(0);
 if ($121) {
  $128 = $114;
 } else {
  $122 = (($97) + 5|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $123 & 4;
  $125 = ($124<<24>>24)==(0);
  if ($125) {
   $128 = $114;
  } else {
   $126 = HEAP32[$$pre11>>2]|0;
   _luaC_barrierf($126,$97,$117);
   $$pre5$i = HEAP32[$100>>2]|0;
   $128 = $$pre5$i;
  }
 }
 $127 = (($128) + -1)|0;
 $129 = (_luaK_codeABx($96,36,0,$127)|0);
 $130 = (($e) + 16|0);
 HEAP32[$130>>2] = -1;
 $131 = (($e) + 20|0);
 HEAP32[$131>>2] = -1;
 HEAP32[$e>>2] = 11;
 $132 = (($e) + 8|0);
 HEAP32[$132>>2] = $129;
 $133 = HEAP32[$new_fs>>2]|0;
 $134 = (($133) + 72|0);
 $135 = HEAP8[$134>>0]|0;
 $136 = ($135<<24>>24)==(0);
 if ($136) {
  STACKTOP = sp;return;
 } else {
  $i$01$i = 0;
 }
 while(1) {
  $137 = ((($new_fs) + ($i$01$i<<1)|0) + 51|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = ($138<<24>>24)==(6);
  $140 = $139 ? 0 : 4;
  $141 = ((($new_fs) + ($i$01$i<<1)|0) + 52|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  (_luaK_codeABC($96,$140,0,$143,0)|0);
  $144 = (($i$01$i) + 1)|0;
  $145 = HEAP32[$new_fs>>2]|0;
  $146 = (($145) + 72|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147&255;
  $149 = ($144|0)<($148|0);
  if ($149) {
   $i$01$i = $144;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _primaryexp($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $key1 = 0, $ls$idx$val$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 48|0;
 $key = sp + 24|0;
 $key1 = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 285)) {
  $7 = (($ls) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  _luaX_next($ls);
  $9 = HEAP32[$0>>2]|0;
  $10 = (_singlevaraux($9,$8,$v,1)|0);
  $11 = ($10|0)==(8);
  if ($11) {
   $12 = (_luaK_stringK($9,$8)|0);
   $13 = (($v) + 8|0);
   HEAP32[$13>>2] = $12;
  }
 } else if ((($3|0) == 40)) {
  $4 = (($ls) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  _luaX_next($ls);
  (_subexpr($ls,$v,0)|0);
  _check_match($ls,41,40,$5);
  $6 = HEAP32[$0>>2]|0;
  _luaK_dischargevars($6,$v);
 } else {
  _luaX_syntaxerror($ls,3000);
 }
 $14 = (($ls) + 24|0);
 $15 = (($key1) + 16|0);
 $16 = (($key1) + 20|0);
 $17 = (($key1) + 8|0);
 $18 = (($ls) + 52|0);
 L7: while(1) {
  $19 = HEAP32[$2>>2]|0;
  switch ($19|0) {
  case 46:  {
   _field($ls,$v);
   continue L7;
   break;
  }
  case 58:  {
   _luaX_next($ls);
   $20 = HEAP32[$2>>2]|0;
   $21 = ($20|0)==(285);
   if (!($21)) {
    $22 = HEAP32[$18>>2]|0;
    $23 = (_luaX_token2str($ls,285)|0);
    HEAP32[$vararg_buffer>>2] = $23;
    $24 = (_luaO_pushfstring($22,3240,$vararg_buffer)|0);
    _luaX_syntaxerror($ls,$24);
   }
   $25 = HEAP32[$14>>2]|0;
   _luaX_next($ls);
   $ls$idx$val$i = HEAP32[$0>>2]|0;
   $26 = (_luaK_stringK($ls$idx$val$i,$25)|0);
   HEAP32[$15>>2] = -1;
   HEAP32[$16>>2] = -1;
   HEAP32[$key1>>2] = 4;
   HEAP32[$17>>2] = $26;
   _luaK_self($1,$v,$key1);
   _funcargs($ls,$v);
   continue L7;
   break;
  }
  case 91:  {
   (_luaK_exp2anyreg($1,$v)|0);
   _yindex($ls,$key);
   _luaK_indexed($1,$v,$key);
   continue L7;
   break;
  }
  case 123: case 286: case 40:  {
   _luaK_exp2nextreg($1,$v);
   _funcargs($ls,$v);
   continue L7;
   break;
  }
  default: {
   break L7;
  }
  }
 }
 STACKTOP = sp;return;
}
function _assignment($ls,$lh,$nvars) {
 $ls = $ls|0;
 $lh = $lh|0;
 $nvars = $nvars|0;
 var $$$i = 0, $$01$i = 0, $$off = 0, $$pre$i = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $conflict$02$i = 0, $conflict$1$i = 0, $conflict$2$i = 0, $e = 0, $ls$idx1 = 0, $ls$idx1$val = 0, $n$0$i$lcssa = 0, $n$0$i2 = 0, $nv = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 80|0;
 $vararg_buffer2 = sp + 64|0;
 $vararg_buffer = sp + 56|0;
 $e = sp + 32|0;
 $nv = sp;
 $0 = (($lh) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -6)|0;
 $2 = ($$off>>>0)<(4);
 if (!($2)) {
  _luaX_syntaxerror($ls,2568);
 }
 $3 = (($ls) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 if ((($4|0) == 44)) {
  _luaX_next($ls);
  HEAP32[$nv>>2] = $lh;
  $5 = (($nv) + 8|0);
  _primaryexp($ls,$5);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(6);
  if ($7) {
   $ls$idx1 = (($ls) + 48|0);
   $ls$idx1$val = HEAP32[$ls$idx1>>2]|0;
   $8 = (($ls$idx1$val) + 36|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($lh|0)==(0|0);
   if (!($10)) {
    $11 = (($nv) + 16|0);
    $$01$i = $lh;$conflict$02$i = 0;
    while(1) {
     $12 = (($$01$i) + 8|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(9);
     if ($14) {
      $15 = (($$01$i) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = HEAP32[$11>>2]|0;
      $18 = ($16|0)==($17|0);
      if ($18) {
       HEAP32[$15>>2] = $9;
       $$pre$i = HEAP32[$11>>2]|0;
       $22 = $$pre$i;$conflict$1$i = 1;
      } else {
       $22 = $17;$conflict$1$i = $conflict$02$i;
      }
      $19 = (($15) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==($22|0);
      if ($21) {
       HEAP32[$19>>2] = $9;
       $conflict$2$i = 1;
      } else {
       $conflict$2$i = $conflict$1$i;
      }
     } else {
      $conflict$2$i = $conflict$02$i;
     }
     $23 = HEAP32[$$01$i>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      break;
     } else {
      $$01$i = $23;$conflict$02$i = $conflict$2$i;
     }
    }
    $25 = ($conflict$2$i|0)==(0);
    if (!($25)) {
     $26 = HEAP32[$11>>2]|0;
     (_luaK_codeABC($ls$idx1$val,0,$9,$26,0)|0);
     _luaK_reserveregs($ls$idx1$val,1);
    }
   }
  }
  $27 = (($ls) + 52|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 52|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = (200 - ($31))|0;
  $33 = ($32|0)<($nvars|0);
  $34 = (($ls) + 48|0);
  if ($33) {
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0);
   $40 = (($35) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   if ($39) {
    HEAP32[$vararg_buffer>>2] = $32;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2584;
    $42 = (_luaO_pushfstring($41,2832,$vararg_buffer)|0);
    $46 = $42;
   } else {
    HEAP32[$vararg_buffer2>>2] = $38;
    $vararg_ptr5 = (($vararg_buffer2) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $32;
    $vararg_ptr6 = (($vararg_buffer2) + 8|0);
    HEAP32[$vararg_ptr6>>2] = 2584;
    $43 = (_luaO_pushfstring($41,2872,$vararg_buffer2)|0);
    $46 = $43;
   }
   $44 = (($35) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   _luaX_lexerror($45,$46,0);
  }
  $47 = (($nvars) + 1)|0;
  _assignment($ls,$nv,$47);
  $$pre$phi4Z2D = $e;$$pre$phiZ2D = $34;
 } else if ((($4|0) == 61)) {
  label = 22;
 } else {
  $48 = (($ls) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_luaX_token2str($ls,61)|0);
  HEAP32[$vararg_buffer7>>2] = $50;
  $51 = (_luaO_pushfstring($49,3240,$vararg_buffer7)|0);
  _luaX_syntaxerror($ls,$51);
  label = 22;
 }
 if ((label|0) == 22) {
  _luaX_next($ls);
  (_subexpr($ls,$e,0)|0);
  $52 = HEAP32[$3>>2]|0;
  $53 = ($52|0)==(44);
  $54 = (($ls) + 48|0);
  if ($53) {
   $n$0$i2 = 1;
   while(1) {
    _luaX_next($ls);
    $55 = HEAP32[$54>>2]|0;
    _luaK_exp2nextreg($55,$e);
    (_subexpr($ls,$e,0)|0);
    $56 = (($n$0$i2) + 1)|0;
    $57 = HEAP32[$3>>2]|0;
    $58 = ($57|0)==(44);
    if ($58) {
     $n$0$i2 = $56;
    } else {
     $n$0$i$lcssa = $56;
     break;
    }
   }
  } else {
   $n$0$i$lcssa = 1;
  }
  $59 = ($n$0$i$lcssa|0)==($nvars|0);
  $60 = HEAP32[$54>>2]|0;
  if ($59) {
   _luaK_setoneret($60,$e);
   $75 = HEAP32[$54>>2]|0;
   _luaK_storevar($75,$0,$e);
   STACKTOP = sp;return;
  }
  $61 = (($nvars) - ($n$0$i$lcssa))|0;
  $62 = HEAP32[$e>>2]|0;
  if ((($62|0) == 14) | (($62|0) == 13)) {
   $63 = (($61) + 1)|0;
   $64 = ($63|0)<(0);
   $$$i = $64 ? 0 : $63;
   _luaK_setreturns($60,$e,$$$i);
   $65 = ($$$i|0)>(1);
   if ($65) {
    $66 = (($$$i) + -1)|0;
    _luaK_reserveregs($60,$66);
   }
  } else if ((($62|0) == 0)) {
   label = 29;
  } else {
   _luaK_exp2nextreg($60,$e);
   label = 29;
  }
  if ((label|0) == 29) {
   $67 = ($61|0)>(0);
   if ($67) {
    $68 = (($60) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    _luaK_reserveregs($60,$61);
    _luaK_nil($60,$69,$61);
   }
  }
  $70 = ($n$0$i$lcssa|0)>($nvars|0);
  if ($70) {
   $71 = HEAP32[$54>>2]|0;
   $72 = (($71) + 36|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($61) + ($73))|0;
   HEAP32[$72>>2] = $74;
   $$pre$phi4Z2D = $e;$$pre$phiZ2D = $54;
  } else {
   $$pre$phi4Z2D = $e;$$pre$phiZ2D = $54;
  }
 }
 $76 = HEAP32[$$pre$phiZ2D>>2]|0;
 $77 = (($76) + 36|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + -1)|0;
 $80 = (($e) + 16|0);
 HEAP32[$80>>2] = -1;
 $81 = (($e) + 20|0);
 HEAP32[$81>>2] = -1;
 HEAP32[$$pre$phi4Z2D>>2] = 12;
 $82 = (($e) + 8|0);
 HEAP32[$82>>2] = $79;
 _luaK_storevar($76,$0,$e);
 STACKTOP = sp;return;
}
function _constructor($ls,$t) {
 $ls = $ls|0;
 $t = $t|0;
 var $$pre = 0, $$pre$i = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer5 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 80|0;
 $vararg_buffer10 = sp + 72|0;
 $vararg_buffer5 = sp + 56|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $cc = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaK_codeABC($1,10,0,0,0)|0);
 $5 = (($cc) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = (($cc) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = (($cc) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = (($cc) + 24|0);
 HEAP32[$8>>2] = $t;
 $9 = (($t) + 16|0);
 HEAP32[$9>>2] = -1;
 $10 = (($t) + 20|0);
 HEAP32[$10>>2] = -1;
 HEAP32[$t>>2] = 11;
 $11 = (($t) + 8|0);
 HEAP32[$11>>2] = $4;
 $12 = (($cc) + 16|0);
 HEAP32[$12>>2] = -1;
 $13 = (($cc) + 20|0);
 HEAP32[$13>>2] = -1;
 HEAP32[$cc>>2] = 0;
 $14 = (($cc) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 _luaK_exp2nextreg($15,$t);
 $16 = (($ls) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(123);
 if (!($18)) {
  $19 = (($ls) + 52|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_luaX_token2str($ls,123)|0);
  HEAP32[$vararg_buffer>>2] = $21;
  $22 = (_luaO_pushfstring($20,3240,$vararg_buffer)|0);
  _luaX_syntaxerror($ls,$22);
 }
 _luaX_next($ls);
 $23 = HEAP32[$16>>2]|0;
 $24 = ($23|0)==(125);
 L4: do {
  if (!($24)) {
   $25 = (($ls) + 32|0);
   while(1) {
    $26 = HEAP32[$cc>>2]|0;
    $27 = ($26|0)==(0);
    if (!($27)) {
     _luaK_exp2nextreg($1,$cc);
     HEAP32[$cc>>2] = 0;
     $28 = HEAP32[$5>>2]|0;
     $29 = ($28|0)==(50);
     if ($29) {
      $30 = HEAP32[$8>>2]|0;
      $31 = (($30) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = HEAP32[$7>>2]|0;
      _luaK_setlist($1,$32,$33,50);
      HEAP32[$5>>2] = 0;
     }
    }
    $34 = HEAP32[$16>>2]|0;
    do {
     if ((($34|0) == 91)) {
      _recfield($ls,$cc);
     } else if ((($34|0) == 285)) {
      _luaX_lookahead($ls);
      $35 = HEAP32[$25>>2]|0;
      $36 = ($35|0)==(61);
      if ($36) {
       _recfield($ls,$cc);
       break;
      }
      (_subexpr($ls,$cc,0)|0);
      $37 = HEAP32[$7>>2]|0;
      $38 = ($37|0)>(2147483645);
      if ($38) {
       $39 = HEAP32[$0>>2]|0;
       $40 = HEAP32[$39>>2]|0;
       $41 = (($40) + 60|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(0);
       $44 = (($39) + 16|0);
       $45 = HEAP32[$44>>2]|0;
       if ($43) {
        HEAP32[$vararg_buffer1>>2] = 2147483645;
        $vararg_ptr4 = (($vararg_buffer1) + 4|0);
        HEAP32[$vararg_ptr4>>2] = 2808;
        $46 = (_luaO_pushfstring($45,2832,$vararg_buffer1)|0);
        $50 = $46;
       } else {
        HEAP32[$vararg_buffer5>>2] = $42;
        $vararg_ptr8 = (($vararg_buffer5) + 4|0);
        HEAP32[$vararg_ptr8>>2] = 2147483645;
        $vararg_ptr9 = (($vararg_buffer5) + 8|0);
        HEAP32[$vararg_ptr9>>2] = 2808;
        $47 = (_luaO_pushfstring($45,2872,$vararg_buffer5)|0);
        $50 = $47;
       }
       $48 = (($39) + 12|0);
       $49 = HEAP32[$48>>2]|0;
       _luaX_lexerror($49,$50,0);
       $$pre5 = HEAP32[$7>>2]|0;
       $52 = $$pre5;
      } else {
       $52 = $37;
      }
      $51 = (($52) + 1)|0;
      HEAP32[$7>>2] = $51;
      $53 = HEAP32[$5>>2]|0;
      $54 = (($53) + 1)|0;
      HEAP32[$5>>2] = $54;
     } else {
      (_subexpr($ls,$cc,0)|0);
      $55 = HEAP32[$7>>2]|0;
      $56 = ($55|0)>(2147483645);
      if ($56) {
       $57 = HEAP32[$0>>2]|0;
       $58 = HEAP32[$57>>2]|0;
       $59 = (($58) + 60|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0);
       $62 = (($57) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       if ($61) {
        HEAP32[$vararg_buffer10>>2] = 2147483645;
        $vararg_ptr13 = (($vararg_buffer10) + 4|0);
        HEAP32[$vararg_ptr13>>2] = 2808;
        $64 = (_luaO_pushfstring($63,2832,$vararg_buffer10)|0);
        $68 = $64;
       } else {
        HEAP32[$vararg_buffer14>>2] = $60;
        $vararg_ptr17 = (($vararg_buffer14) + 4|0);
        HEAP32[$vararg_ptr17>>2] = 2147483645;
        $vararg_ptr18 = (($vararg_buffer14) + 8|0);
        HEAP32[$vararg_ptr18>>2] = 2808;
        $65 = (_luaO_pushfstring($63,2872,$vararg_buffer14)|0);
        $68 = $65;
       }
       $66 = (($57) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       _luaX_lexerror($67,$68,0);
       $$pre = HEAP32[$7>>2]|0;
       $70 = $$pre;
      } else {
       $70 = $55;
      }
      $69 = (($70) + 1)|0;
      HEAP32[$7>>2] = $69;
      $71 = HEAP32[$5>>2]|0;
      $72 = (($71) + 1)|0;
      HEAP32[$5>>2] = $72;
     }
    } while(0);
    $73 = HEAP32[$16>>2]|0;
    if ((($73|0) == 44)) {
     _luaX_next($ls);
    } else if ((($73|0) == 59)) {
     _luaX_next($ls);
    } else {
     break L4;
    }
    $74 = HEAP32[$16>>2]|0;
    $75 = ($74|0)==(125);
    if ($75) {
     break;
    }
   }
  }
 } while(0);
 _check_match($ls,125,123,$3);
 $76 = HEAP32[$5>>2]|0;
 $77 = ($76|0)==(0);
 do {
  if (!($77)) {
   $78 = HEAP32[$cc>>2]|0;
   if ((($78|0) == 0)) {
    $89 = $76;
   } else if ((($78|0) == 14) | (($78|0) == 13)) {
    _luaK_setreturns($1,$cc,-1);
    $79 = HEAP32[$8>>2]|0;
    $80 = (($79) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = HEAP32[$7>>2]|0;
    _luaK_setlist($1,$81,$82,-1);
    $83 = HEAP32[$7>>2]|0;
    $84 = (($83) + -1)|0;
    HEAP32[$7>>2] = $84;
    break;
   } else {
    _luaK_exp2nextreg($1,$cc);
    $$pre$i = HEAP32[$5>>2]|0;
    $89 = $$pre$i;
   }
   $85 = HEAP32[$8>>2]|0;
   $86 = (($85) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = HEAP32[$7>>2]|0;
   _luaK_setlist($1,$87,$88,$89);
  }
 } while(0);
 $90 = HEAP32[$1>>2]|0;
 $91 = (($90) + 12|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + ($4<<2)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 8388607;
 $96 = HEAP32[$7>>2]|0;
 $97 = (_luaO_int2fb($96)|0);
 $98 = $97 << 23;
 $99 = $98 | $95;
 $100 = HEAP32[$1>>2]|0;
 $101 = (($100) + 12|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + ($4<<2)|0);
 HEAP32[$103>>2] = $99;
 $104 = $99 & -8372225;
 $105 = HEAP32[$6>>2]|0;
 $106 = (_luaO_int2fb($105)|0);
 $107 = $106 << 14;
 $108 = $107 & 8372224;
 $109 = $108 | $104;
 $110 = HEAP32[$1>>2]|0;
 $111 = (($110) + 12|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (($112) + ($4<<2)|0);
 HEAP32[$113>>2] = $109;
 STACKTOP = sp;return;
}
function _yindex($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaX_next($ls);
 (_subexpr($ls,$v,0)|0);
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaK_exp2val($1,$v);
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(93);
 if ($4) {
  _luaX_next($ls);
  STACKTOP = sp;return;
 }
 $5 = (($ls) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_luaX_token2str($ls,93)|0);
 HEAP32[$vararg_buffer>>2] = $7;
 $8 = (_luaO_pushfstring($6,3240,$vararg_buffer)|0);
 _luaX_syntaxerror($ls,$8);
 _luaX_next($ls);
 STACKTOP = sp;return;
}
function _funcargs($ls,$f) {
 $ls = $ls|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $nparams$0 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ls) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 if ((($5|0) == 40)) {
  $6 = (($ls) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($3|0)==($7|0);
  if (!($8)) {
   _luaX_syntaxerror($ls,2912);
  }
  _luaX_next($ls);
  $9 = HEAP32[$4>>2]|0;
  $10 = ($9|0)==(41);
  if ($10) {
   HEAP32[$args>>2] = 0;
  } else {
   (_subexpr($ls,$args,0)|0);
   $11 = HEAP32[$4>>2]|0;
   $12 = ($11|0)==(44);
   if ($12) {
    while(1) {
     _luaX_next($ls);
     $13 = HEAP32[$0>>2]|0;
     _luaK_exp2nextreg($13,$args);
     (_subexpr($ls,$args,0)|0);
     $14 = HEAP32[$4>>2]|0;
     $15 = ($14|0)==(44);
     if (!($15)) {
      break;
     }
    }
   }
   _luaK_setreturns($1,$args,-1);
  }
  _check_match($ls,41,40,$3);
 } else if ((($5|0) == 286)) {
  $16 = (($ls) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_luaK_stringK($1,$17)|0);
  $19 = (($args) + 16|0);
  HEAP32[$19>>2] = -1;
  $20 = (($args) + 20|0);
  HEAP32[$20>>2] = -1;
  HEAP32[$args>>2] = 4;
  $21 = (($args) + 8|0);
  HEAP32[$21>>2] = $18;
  _luaX_next($ls);
 } else if ((($5|0) == 123)) {
  _constructor($ls,$args);
 } else {
  _luaX_syntaxerror($ls,2968);
  STACKTOP = sp;return;
 }
 $22 = (($f) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$args>>2]|0;
 if ((($24|0) == 14) | (($24|0) == 13)) {
  $nparams$0 = 0;
 } else if ((($24|0) == 0)) {
  label = 15;
 } else {
  _luaK_exp2nextreg($1,$args);
  label = 15;
 }
 if ((label|0) == 15) {
  $25 = (($1) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $phitmp = (($26) - ($23))|0;
  $nparams$0 = $phitmp;
 }
 $27 = (_luaK_codeABC($1,28,$23,$nparams$0,2)|0);
 $28 = (($f) + 16|0);
 HEAP32[$28>>2] = -1;
 $29 = (($f) + 20|0);
 HEAP32[$29>>2] = -1;
 HEAP32[$f>>2] = 13;
 HEAP32[$22>>2] = $27;
 _luaK_fixline($1,$3);
 $30 = (($23) + 1)|0;
 $31 = (($1) + 36|0);
 HEAP32[$31>>2] = $30;
 STACKTOP = sp;return;
}
function _recfield($ls,$cc) {
 $ls = $ls|0;
 $cc = $cc|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $ls$idx$val$i = 0, $phitmp = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 80|0;
 $vararg_buffer7 = sp + 72|0;
 $vararg_buffer2 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $key = sp + 24|0;
 $val = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ls) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(285);
 if ($6) {
  $7 = (($cc) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)>(2147483645);
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 60|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   $14 = (($1) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   if ($13) {
    HEAP32[$vararg_buffer>>2] = 2147483645;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2808;
    $16 = (_luaO_pushfstring($15,2832,$vararg_buffer)|0);
    $20 = $16;
   } else {
    HEAP32[$vararg_buffer2>>2] = $12;
    $vararg_ptr5 = (($vararg_buffer2) + 4|0);
    HEAP32[$vararg_ptr5>>2] = 2147483645;
    $vararg_ptr6 = (($vararg_buffer2) + 8|0);
    HEAP32[$vararg_ptr6>>2] = 2808;
    $17 = (_luaO_pushfstring($15,2872,$vararg_buffer2)|0);
    $20 = $17;
   }
   $18 = (($1) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   _luaX_lexerror($19,$20,0);
   $$pre = HEAP32[$4>>2]|0;
   $phitmp = ($$pre|0)==(285);
   if (!($phitmp)) {
    $21 = (($ls) + 52|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_luaX_token2str($ls,285)|0);
    HEAP32[$vararg_buffer7>>2] = $23;
    $24 = (_luaO_pushfstring($22,3240,$vararg_buffer7)|0);
    _luaX_syntaxerror($ls,$24);
   }
  }
  $25 = (($ls) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  _luaX_next($ls);
  $ls$idx$val$i = HEAP32[$0>>2]|0;
  $27 = (_luaK_stringK($ls$idx$val$i,$26)|0);
  $28 = (($key) + 16|0);
  HEAP32[$28>>2] = -1;
  $29 = (($key) + 20|0);
  HEAP32[$29>>2] = -1;
  HEAP32[$key>>2] = 4;
  $30 = (($key) + 8|0);
  HEAP32[$30>>2] = $27;
  $$pre$phiZ2D = $7;
 } else {
  _yindex($ls,$key);
  $$pre1 = (($cc) + 28|0);
  $$pre$phiZ2D = $$pre1;
 }
 $31 = HEAP32[$$pre$phiZ2D>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $32;
 $33 = HEAP32[$4>>2]|0;
 $34 = ($33|0)==(61);
 if ($34) {
  _luaX_next($ls);
  $39 = (_luaK_exp2RK($1,$key)|0);
  (_subexpr($ls,$val,0)|0);
  $40 = (($cc) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_luaK_exp2RK($1,$val)|0);
  (_luaK_codeABC($1,9,$43,$39,$44)|0);
  HEAP32[$2>>2] = $3;
  STACKTOP = sp;return;
 }
 $35 = (($ls) + 52|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (_luaX_token2str($ls,61)|0);
 HEAP32[$vararg_buffer10>>2] = $37;
 $38 = (_luaO_pushfstring($36,3240,$vararg_buffer10)|0);
 _luaX_syntaxerror($ls,$38);
 _luaX_next($ls);
 $39 = (_luaK_exp2RK($1,$key)|0);
 (_subexpr($ls,$val,0)|0);
 $40 = (($cc) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_luaK_exp2RK($1,$val)|0);
 (_luaK_codeABC($1,9,$43,$39,$44)|0);
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function _luaE_freethread($L,$L1) {
 $L = $L|0;
 $L1 = $L1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L1) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 _luaF_close($L1,$1);
 $2 = (($L1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($L1) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5*24)|0;
 (_luaM_realloc_($L,$3,$6,0)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($L1) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 4;
 (_luaM_realloc_($L,$7,$10,0)|0);
 (_luaM_realloc_($L,$L1,120,0)|0);
 STACKTOP = sp;return;
}
function _lua_newstate($f,$ud) {
 $f = $f|0;
 $ud = $ud|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (FUNCTION_TABLE_iiiii[$f & 15]($ud,0,0,376)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($0) + 120|0);
 HEAP32[$0>>2] = 0;
 $3 = (($0) + 4|0);
 HEAP8[$3>>0] = 8;
 $4 = (($0) + 140|0);
 HEAP8[$4>>0] = 33;
 $5 = (($0) + 5|0);
 HEAP8[$5>>0] = 97;
 $6 = (($0) + 16|0);
 HEAP32[$6>>2] = $2;
 $7 = (($0) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = (($0) + 44|0);
 HEAP32[$8>>2] = 0;
 $9 = (($0) + 112|0);
 HEAP32[$9>>2] = 0;
 $10 = (($0) + 68|0);
 HEAP32[$10>>2] = 0;
 $11 = (($0) + 56|0);
 HEAP8[$11>>0] = 0;
 $12 = (($0) + 60|0);
 HEAP32[$12>>2] = 0;
 $13 = (($0) + 57|0);
 HEAP8[$13>>0] = 1;
 $14 = (($0) + 64|0);
 HEAP32[$14>>2] = 0;
 $15 = (($0) + 104|0);
 HEAP32[$15>>2] = 0;
 $16 = (($0) + 48|0);
 HEAP32[$16>>2] = 0;
 $17 = (($0) + 54|0);
 HEAP16[$17>>1] = 0;
 $18 = (($0) + 52|0);
 HEAP16[$18>>1] = 0;
 $19 = (($0) + 6|0);
 HEAP8[$19>>0] = 0;
 $20 = (($0) + 20|0);
 HEAP32[$20>>2] = 0;
 $21 = (($0) + 40|0);
 HEAP32[$21>>2] = 0;
 $22 = (($0) + 24|0);
 HEAP32[$22>>2] = 0;
 $23 = (($0) + 116|0);
 HEAP32[$23>>2] = 0;
 $24 = (($0) + 80|0);
 HEAP32[$24>>2] = 0;
 $25 = (($0) + 132|0);
 HEAP32[$25>>2] = $f;
 $26 = (($0) + 136|0);
 HEAP32[$26>>2] = $ud;
 $27 = (($0) + 232|0);
 HEAP32[$27>>2] = $0;
 $28 = (($0) + 240|0);
 $29 = (($0) + 256|0);
 HEAP32[$29>>2] = $28;
 $30 = (($0) + 260|0);
 HEAP32[$30>>2] = $28;
 $31 = (($0) + 184|0);
 HEAP32[$31>>2] = 0;
 $32 = (($0) + 128|0);
 HEAP32[$32>>2] = 0;
 $33 = (($0) + 124|0);
 HEAP32[$33>>2] = 0;
 HEAP32[$2>>2] = 0;
 $34 = (($0) + 224|0);
 HEAP32[$34>>2] = 0;
 $35 = (($0) + 172|0);
 HEAP32[$35>>2] = 0;
 $36 = (($0) + 180|0);
 HEAP32[$36>>2] = 0;
 $37 = (($0) + 208|0);
 HEAP32[$37>>2] = 0;
 $38 = (($0) + 141|0);
 HEAP8[$38>>0] = 0;
 $39 = (($0) + 148|0);
 HEAP32[$39>>2] = $0;
 $40 = (($0) + 144|0);
 HEAP32[$40>>2] = 0;
 $41 = (($0) + 152|0);
 HEAP32[$41>>2] = $39;
 $42 = (($0) + 156|0);
 $43 = (($0) + 188|0);
 ;HEAP32[$42+0>>2]=0|0;HEAP32[$42+4>>2]=0|0;HEAP32[$42+8>>2]=0|0;HEAP32[$42+12>>2]=0|0;
 HEAP32[$43>>2] = 376;
 $44 = (($0) + 200|0);
 HEAP32[$44>>2] = 200;
 $45 = (($0) + 204|0);
 HEAP32[$45>>2] = 200;
 $46 = (($0) + 196|0);
 HEAP32[$46>>2] = 0;
 $scevgep = (($0) + 272|0);
 dest=$scevgep+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $47 = (_luaD_rawrunprotected($0,8,0)|0);
 $48 = ($47|0)==(0);
 if ($48) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = HEAP32[$6>>2]|0;
 $50 = HEAP32[$7>>2]|0;
 _luaF_close($0,$50);
 _luaC_freeall($0);
 $51 = HEAP32[$6>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($51) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 << 2;
 (_luaM_realloc_($0,$52,$55,0)|0);
 $56 = (($49) + 52|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($49) + 60|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (_luaM_realloc_($0,$57,$59,0)|0);
 HEAP32[$56>>2] = $60;
 HEAP32[$58>>2] = 0;
 $61 = HEAP32[$21>>2]|0;
 $62 = HEAP32[$16>>2]|0;
 $63 = ($62*24)|0;
 (_luaM_realloc_($0,$61,$63,0)|0);
 $64 = HEAP32[$7>>2]|0;
 $65 = HEAP32[$8>>2]|0;
 $66 = $65 << 4;
 (_luaM_realloc_($0,$64,$66,0)|0);
 $67 = (($49) + 12|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($49) + 16|0);
 $70 = HEAP32[$69>>2]|0;
 (FUNCTION_TABLE_iiiii[$68 & 15]($70,$0,376,0)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lua_close($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 _luaF_close($3,$5);
 (_luaC_separateudata($3,1)|0);
 $6 = (($3) + 116|0);
 HEAP32[$6>>2] = 0;
 $7 = (($3) + 40|0);
 $8 = (($3) + 20|0);
 $9 = (($3) + 8|0);
 $10 = (($3) + 12|0);
 $11 = (($3) + 54|0);
 $12 = (($3) + 52|0);
 while(1) {
  $13 = HEAP32[$7>>2]|0;
  HEAP32[$8>>2] = $13;
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$9>>2] = $14;
  HEAP32[$10>>2] = $14;
  HEAP16[$11>>1] = 0;
  HEAP16[$12>>1] = 0;
  $15 = (_luaD_rawrunprotected($3,9,0)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   break;
  }
 }
 $17 = (($3) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$4>>2]|0;
 _luaF_close($3,$19);
 _luaC_freeall($3);
 $20 = HEAP32[$17>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($20) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 << 2;
 (_luaM_realloc_($3,$21,$24,0)|0);
 $25 = (($18) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($18) + 60|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_luaM_realloc_($3,$26,$28,0)|0);
 HEAP32[$25>>2] = $29;
 HEAP32[$27>>2] = 0;
 $30 = HEAP32[$7>>2]|0;
 $31 = (($3) + 48|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32*24)|0;
 (_luaM_realloc_($3,$30,$33,0)|0);
 $34 = HEAP32[$4>>2]|0;
 $35 = (($3) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 << 4;
 (_luaM_realloc_($3,$34,$37,0)|0);
 $38 = (($18) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($18) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 (FUNCTION_TABLE_iiiii[$39 & 15]($41,$3,376,0)|0);
 STACKTOP = sp;return;
}
function _f_luaopen($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaM_realloc_($L,0,0,192)|0);
 $3 = (($L) + 40|0);
 HEAP32[$3>>2] = $2;
 $4 = (($L) + 20|0);
 HEAP32[$4>>2] = $2;
 $5 = (($L) + 48|0);
 HEAP32[$5>>2] = 8;
 $6 = (($2) + 168|0);
 $7 = (($L) + 36|0);
 HEAP32[$7>>2] = $6;
 $8 = (_luaM_realloc_($L,0,0,720)|0);
 $9 = (($L) + 32|0);
 HEAP32[$9>>2] = $8;
 $10 = (($L) + 44|0);
 HEAP32[$10>>2] = 45;
 $11 = (($L) + 8|0);
 $12 = (($8) + 624|0);
 $13 = (($L) + 28|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$4>>2]|0;
 $15 = (($14) + 4|0);
 HEAP32[$15>>2] = $8;
 $16 = (($8) + 16|0);
 HEAP32[$11>>2] = $16;
 $17 = (($8) + 8|0);
 HEAP32[$17>>2] = 0;
 HEAP32[$14>>2] = $16;
 $18 = (($L) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = (($8) + 336|0);
 $20 = (($14) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = (($L) + 72|0);
 $22 = (_luaH_new($L,0,2)|0);
 HEAP32[$21>>2] = $22;
 $23 = (($L) + 80|0);
 HEAP32[$23>>2] = 5;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + 96|0);
 $26 = (_luaH_new($L,0,2)|0);
 HEAP32[$25>>2] = $26;
 $27 = (($24) + 104|0);
 HEAP32[$27>>2] = 5;
 _luaS_resize($L,32);
 _luaT_init($L);
 _luaX_init($L);
 $28 = (_luaS_newlstr($L,3296,17)|0);
 $29 = (($28) + 5|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 | 32;
 $33 = $32&255;
 HEAP8[$29>>0] = $33;
 $34 = (($1) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 << 2;
 $37 = (($1) + 64|0);
 HEAP32[$37>>2] = $36;
 STACKTOP = sp;return;
}
function _callallgcTM($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaC_callGCTM($L);
 STACKTOP = sp;return;
}
function _luaS_resize($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$lcssa4 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$15 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 21|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(2);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($newsize) + 1)|0;
 $6 = ($5>>>0)<(1073741824);
 if ($6) {
  $7 = $newsize << 2;
  $8 = (_luaM_realloc_($L,0,0,$7)|0);
  $13 = $8;
 } else {
  $9 = (_luaM_toobig($L)|0);
  $13 = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($newsize|0)>(0);
 if ($11) {
  $12 = $newsize << 2;
  _memset(($13|0),0,($12|0))|0;
 }
 $14 = (($10) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)>(0);
 $17 = HEAP32[$10>>2]|0;
 if ($16) {
  $18 = (($newsize) + -1)|0;
  $20 = $17;$i$15 = 0;
  while(1) {
   $19 = (($20) + ($i$15<<2)|0);
   $21 = HEAP32[$19>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $33 = $20;
   } else {
    $p$01 = $21;
    while(1) {
     $23 = HEAP32[$p$01>>2]|0;
     $24 = (($p$01) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $25 & $18;
     $27 = (($13) + ($26<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     HEAP32[$p$01>>2] = $28;
     HEAP32[$27>>2] = $p$01;
     $29 = ($23|0)==(0|0);
     if ($29) {
      break;
     } else {
      $p$01 = $23;
     }
    }
    $$pre = HEAP32[$10>>2]|0;
    $33 = $$pre;
   }
   $30 = (($i$15) + 1)|0;
   $31 = ($30|0)<($15|0);
   if ($31) {
    $20 = $33;$i$15 = $30;
   } else {
    $$lcssa4 = $33;
    break;
   }
  }
 } else {
  $$lcssa4 = $17;
 }
 $32 = $15 << 2;
 (_luaM_realloc_($L,$$lcssa4,$32,0)|0);
 HEAP32[$14>>2] = $newsize;
 HEAP32[$10>>2] = $13;
 STACKTOP = sp;return;
}
function _luaS_newlstr($L,$str,$l) {
 $L = $L|0;
 $str = $str|0;
 $l = $l|0;
 var $$0 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $h$0$lcssa = 0, $h$04 = 0, $l1$05 = 0, $o$0 = 0, $o$02 = 0;
 var $o$03 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $l >>> 5;
 $1 = (($0) + 1)|0;
 $2 = ($1>>>0)>($l>>>0);
 if ($2) {
  $h$0$lcssa = $l;
 } else {
  $h$04 = $l;$l1$05 = $l;
  while(1) {
   $3 = $h$04 << 5;
   $4 = $h$04 >>> 2;
   $5 = (($3) + ($4))|0;
   $6 = (($l1$05) + -1)|0;
   $7 = (($str) + ($6)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = (($5) + ($9))|0;
   $11 = $10 ^ $h$04;
   $12 = (($l1$05) - ($1))|0;
   $13 = ($12>>>0)<($1>>>0);
   if ($13) {
    $h$0$lcssa = $11;
    break;
   } else {
    $h$04 = $11;$l1$05 = $12;
   }
  }
 }
 $14 = (($L) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -1)|0;
 $19 = $18 & $h$0$lcssa;
 $20 = HEAP32[$15>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 $o$02 = HEAP32[$21>>2]|0;
 $22 = ($o$02|0)==(0|0);
 L5: do {
  if (!($22)) {
   $o$03 = $o$02;
   while(1) {
    $23 = (($o$03) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($l|0);
    if ($25) {
     $26 = (($o$03) + 16|0);
     $27 = (_memcmp($str,$26,$l)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      break;
     }
    }
    $o$0 = HEAP32[$o$03>>2]|0;
    $41 = ($o$0|0)==(0|0);
    if ($41) {
     break L5;
    } else {
     $o$03 = $o$0;
    }
   }
   $29 = (($o$03) + 5|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (($15) + 20|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $34 ^ 3;
   $36 = $31 & 3;
   $37 = $36 & $35;
   $38 = ($37|0)==(0);
   if ($38) {
    $$0 = $o$03;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $31 ^ 3;
   $40 = $39&255;
   HEAP8[$29>>0] = $40;
   $$0 = $o$03;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $42 = (($l) + 1)|0;
 $43 = ($42>>>0)>(4294967277);
 if ($43) {
  (_luaM_toobig($L)|0);
 }
 $44 = (($l) + 17)|0;
 $45 = (_luaM_realloc_($L,0,0,$44)|0);
 $46 = (($45) + 12|0);
 HEAP32[$46>>2] = $l;
 $47 = (($45) + 8|0);
 HEAP32[$47>>2] = $h$0$lcssa;
 $48 = HEAP32[$14>>2]|0;
 $49 = (($48) + 20|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 & 3;
 $53 = $52&255;
 $54 = (($45) + 5|0);
 HEAP8[$54>>0] = $53;
 $55 = (($45) + 4|0);
 HEAP8[$55>>0] = 4;
 $56 = (($45) + 6|0);
 HEAP8[$56>>0] = 0;
 $57 = (($45) + 16|0);
 _memcpy(($57|0),($str|0),($l|0))|0;
 $$sum$i = (($l) + 16)|0;
 $58 = (($45) + ($$sum$i)|0);
 HEAP8[$58>>0] = 0;
 $59 = HEAP32[$14>>2]|0;
 $60 = (($59) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + -1)|0;
 $63 = $62 & $h$0$lcssa;
 $64 = HEAP32[$59>>2]|0;
 $65 = (($64) + ($63<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$45>>2] = $66;
 HEAP32[$65>>2] = $45;
 $67 = (($59) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 1)|0;
 HEAP32[$67>>2] = $69;
 $70 = ($69>>>0)>($61>>>0);
 $71 = ($61|0)<(1073741823);
 $or$cond$i = $70 & $71;
 if (!($or$cond$i)) {
  $$0 = $45;
  STACKTOP = sp;return ($$0|0);
 }
 $72 = $61 << 1;
 _luaS_resize($L,$72);
 $$0 = $45;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_resizearray($L,$t,$nasize) {
 $L = $L|0;
 $t = $t|0;
 $nasize = $nasize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3384|0);
 if ($2) {
  $7 = 0;
 } else {
  $3 = (($t) + 7|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = 1 << $5;
  $7 = $6;
 }
 _resize($L,$t,$nasize,$7);
 STACKTOP = sp;return;
}
function _luaH_new($L,$narray,$nhash) {
 $L = $L|0;
 $narray = $narray|0;
 $nhash = $nhash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$01$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_luaM_realloc_($L,0,0,32)|0);
 _luaC_link($L,$0,5);
 $1 = (($0) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 6|0);
 HEAP8[$2>>0] = -1;
 $3 = (($0) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (($0) + 28|0);
 HEAP32[$4>>2] = 0;
 $5 = (($0) + 7|0);
 HEAP8[$5>>0] = 0;
 $6 = (($0) + 16|0);
 HEAP32[$6>>2] = 3384;
 $7 = (($narray) + 1)|0;
 $8 = ($7>>>0)<(268435456);
 if ($8) {
  $9 = $narray << 4;
  $10 = (_luaM_realloc_($L,0,0,$9)|0);
  $12 = $10;
 } else {
  $11 = (_luaM_toobig($L)|0);
  $12 = $11;
 }
 HEAP32[$3>>2] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13|0)<($narray|0);
 if ($14) {
  $i$01$i = $13;
 } else {
  HEAP32[$4>>2] = $narray;
  _setnodevector($L,$0,$nhash);
  STACKTOP = sp;return ($0|0);
 }
 while(1) {
  $15 = ((($12) + ($i$01$i<<4)|0) + 8|0);
  HEAP32[$15>>2] = 0;
  $16 = (($i$01$i) + 1)|0;
  $exitcond$i = ($16|0)==($narray|0);
  if ($exitcond$i) {
   break;
  } else {
   $i$01$i = $16;
  }
 }
 HEAP32[$4>>2] = $narray;
 _setnodevector($L,$0,$nhash);
 STACKTOP = sp;return ($0|0);
}
function _luaH_free($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3384|0);
 if (!($2)) {
  $3 = (($t) + 7|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = 32 << $5;
  (_luaM_realloc_($L,$1,$6,0)|0);
 }
 $7 = (($t) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($t) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 4;
 (_luaM_realloc_($L,$8,$11,0)|0);
 (_luaM_realloc_($L,$t,32,0)|0);
 STACKTOP = sp;return;
}
function _luaH_getstr($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = 1 << $4;
 $6 = (($5) + -1)|0;
 $7 = $6 & $1;
 $8 = (($t) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<5)|0);
 $n$0 = $10;
 while(1) {
  $11 = (($n$0) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(4);
  if ($13) {
   $14 = (($n$0) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($key|0);
   if ($16) {
    break;
   }
  }
  $17 = (($n$0) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $$0 = 1648;
   label = 6;
   break;
  } else {
   $n$0 = $18;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $n$0;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_get($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n$0$i = 0, $n$0$i3 = 0, $n1$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 L1: do {
  switch ($1|0) {
  case 4:  {
   $2 = HEAP32[$key>>2]|0;
   $3 = (($2) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($t) + 7|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = 1 << $7;
   $9 = (($8) + -1)|0;
   $10 = $9 & $4;
   $11 = (($t) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($10<<5)|0);
   $n$0$i = $13;
   while(1) {
    $14 = (($n$0$i) + 24|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(4);
    if ($16) {
     $17 = (($n$0$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==($2|0);
     if ($19) {
      break;
     }
    }
    $20 = (($n$0$i) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1648;
     label = 26;
     break;
    } else {
     $n$0$i = $21;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   $$0 = $n$0$i;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 3:  {
   $23 = +HEAPF64[$key>>3];
   $24 = (~~(($23)));
   $25 = (+($24|0));
   $26 = $25 == $23;
   if (!($26)) {
    $59 = +HEAPF64[$key>>3];
    $60 = $59 == 0.0;
    if ($60) {
     $61 = (($t) + 16|0);
     $62 = HEAP32[$61>>2]|0;
     $n1$0 = $62;
     break L1;
    } else {
     HEAPF64[tempDoublePtr>>3] = $59;$63 = HEAP32[tempDoublePtr>>2]|0;
     $64 = HEAP32[tempDoublePtr+4>>2]|0;
     $65 = (($64) + ($63))|0;
     $66 = (($t) + 7|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = 1 << $68;
     $70 = (($69) + -1)|0;
     $71 = $70 | 1;
     $72 = (($65>>>0) % ($71>>>0))&-1;
     $73 = (($t) + 16|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + ($72<<5)|0);
     $n1$0 = $75;
     break L1;
    }
   }
   $27 = (($24) + -1)|0;
   $28 = (($t) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($27>>>0)<($29>>>0);
   if ($30) {
    $31 = (($t) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + ($27<<4)|0);
    $$0 = $33;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = ($24|0)==(0);
   if ($34) {
    $35 = (($t) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $n$0$i3 = $36;
   } else {
    HEAPF64[tempDoublePtr>>3] = $25;$37 = HEAP32[tempDoublePtr>>2]|0;
    $38 = HEAP32[tempDoublePtr+4>>2]|0;
    $39 = (($38) + ($37))|0;
    $40 = (($t) + 7|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = 1 << $42;
    $44 = (($43) + -1)|0;
    $45 = $44 | 1;
    $46 = (($39>>>0) % ($45>>>0))&-1;
    $47 = (($t) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($46<<5)|0);
    $n$0$i3 = $49;
   }
   while(1) {
    $50 = (($n$0$i3) + 24|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==(3);
    if ($52) {
     $53 = (($n$0$i3) + 16|0);
     $54 = +HEAPF64[$53>>3];
     $55 = $54 == $25;
     if ($55) {
      break;
     }
    }
    $56 = (($n$0$i3) + 28|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(0|0);
    if ($58) {
     $$0 = 1648;
     label = 26;
     break;
    } else {
     $n$0$i3 = $57;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   $$0 = $n$0$i3;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 2:  {
   $86 = HEAP32[$key>>2]|0;
   $87 = $86;
   $88 = (($t) + 7|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = 1 << $90;
   $92 = (($91) + -1)|0;
   $93 = $92 | 1;
   $94 = (($87>>>0) % ($93>>>0))&-1;
   $95 = (($t) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + ($94<<5)|0);
   $n1$0 = $97;
   break;
  }
  case 0:  {
   $$0 = 1648;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 1:  {
   $76 = HEAP32[$key>>2]|0;
   $77 = (($t) + 7|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = 1 << $79;
   $81 = (($80) + -1)|0;
   $82 = $81 & $76;
   $83 = (($t) + 16|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($82<<5)|0);
   $n1$0 = $85;
   break;
  }
  default: {
   $98 = HEAP32[$key>>2]|0;
   $99 = $98;
   $100 = (($t) + 7|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = 1 << $102;
   $104 = (($103) + -1)|0;
   $105 = $104 | 1;
   $106 = (($99>>>0) % ($105>>>0))&-1;
   $107 = (($t) + 16|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + ($106<<5)|0);
   $n1$0 = $109;
  }
  }
 } while(0);
 while(1) {
  $110 = (($n1$0) + 16|0);
  $111 = (_luaO_rawequalObj($110,$key)|0);
  $112 = ($111|0)==(0);
  if (!($112)) {
   break;
  }
  $113 = (($n1$0) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)==(0|0);
  if ($115) {
   $$0 = 1648;
   label = 26;
   break;
  } else {
   $n1$0 = $114;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $n1$0;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_set($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_luaH_get($t,$key)|0);
 $1 = (($t) + 6|0);
 HEAP8[$1>>0] = 0;
 $2 = ($0|0)==(1648|0);
 if (!($2)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($key) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 if ((($4|0) == 0)) {
  _luaG_runerror($L,3320,$vararg_buffer);
 } else if ((($4|0) == 3)) {
  $5 = +HEAPF64[$key>>3];
  $6 = ($5 == $5) & (0.0 == 0.0);
  if (!($6)) {
   _luaG_runerror($L,3344,$vararg_buffer1);
  }
 }
 $7 = (_newkey($L,$t,$key)|0);
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_setnum($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$0$i = 0, $$pre = 0.0, $$pre$phiZ2D = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0;
 var $k = 0, $n$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp;
 $0 = (($key) + -1)|0;
 $1 = (($t) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 L1: do {
  if ($3) {
   $4 = (($t) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($0<<4)|0);
   $$0$i = $6;
   label = 10;
  } else {
   $7 = (+($key|0));
   $8 = ($key|0)==(0);
   if ($8) {
    $9 = (($t) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $n$0$i = $10;
   } else {
    HEAPF64[tempDoublePtr>>3] = $7;$11 = HEAP32[tempDoublePtr>>2]|0;
    $12 = HEAP32[tempDoublePtr+4>>2]|0;
    $13 = (($12) + ($11))|0;
    $14 = (($t) + 7|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = 1 << $16;
    $18 = (($17) + -1)|0;
    $19 = $18 | 1;
    $20 = (($13>>>0) % ($19>>>0))&-1;
    $21 = (($t) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + ($20<<5)|0);
    $n$0$i = $23;
   }
   while(1) {
    $24 = (($n$0$i) + 24|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(3);
    if ($26) {
     $27 = (($n$0$i) + 16|0);
     $28 = +HEAPF64[$27>>3];
     $29 = $28 == $7;
     if ($29) {
      break;
     }
    }
    $30 = (($n$0$i) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0|0);
    if ($32) {
     $$pre$phiZ2D = $7;
     break L1;
    } else {
     $n$0$i = $31;
    }
   }
   $$0$i = $n$0$i;
   label = 10;
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   $33 = ($$0$i|0)==(1648|0);
   if ($33) {
    $$pre = (+($key|0));
    $$pre$phiZ2D = $$pre;
    break;
   } else {
    $$0 = $$0$i;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAPF64[$k>>3] = $$pre$phiZ2D;
 $34 = (($k) + 8|0);
 HEAP32[$34>>2] = 3;
 $35 = (_newkey($L,$t,$k)|0);
 $$0 = $35;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_setstr($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $n$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = 1 << $4;
 $6 = (($5) + -1)|0;
 $7 = $6 & $1;
 $8 = (($t) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<5)|0);
 $n$0$i = $10;
 while(1) {
  $11 = (($n$0$i) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(4);
  if ($13) {
   $14 = (($n$0$i) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($key|0);
   if ($16) {
    label = 5;
    break;
   }
  }
  $17 = (($n$0$i) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   break;
  } else {
   $n$0$i = $18;
  }
 }
 if ((label|0) == 5) {
  $20 = ($n$0$i|0)==(1648|0);
  if (!($20)) {
   $$0 = $n$0$i;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$k>>2] = $key;
 $21 = (($k) + 8|0);
 HEAP32[$21>>2] = 4;
 $22 = (_newkey($L,$t,$k)|0);
 $$0 = $22;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_getn($t) {
 $t = $t|0;
 var $$$1$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i10$i = 0, $$0$i5$i = 0, $$01$i = 0, $$113$i = 0, $$j$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$ = 0, $i$0$i = 0, $i$0$i$phi = 0, $i$09 = 0, $i$1$i = 0, $i$2$$i = 0, $i$214$i = 0, $j$08 = 0, $n$0$i$i = 0, $n$0$i3$i = 0, $n$0$i8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($1) + -1)|0;
  $4 = (($t) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5) + ($3<<4)|0) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ($1>>>0)>(1);
   if ($9) {
    $i$09 = 0;$j$08 = $1;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $10 = (($i$09) + ($j$08))|0;
    $11 = $10 >>> 1;
    $12 = (($11) + -1)|0;
    $13 = ((($5) + ($12<<4)|0) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    $$j$0 = $15 ? $11 : $j$08;
    $i$0$ = $15 ? $i$09 : $11;
    $16 = (($$j$0) - ($i$0$))|0;
    $17 = ($16>>>0)>(1);
    if ($17) {
     $i$09 = $i$0$;$j$08 = $$j$0;
    } else {
     $$0 = $i$0$;
     break;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = (($t) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(3384|0);
 if ($20) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($1) + 1)|0;
 $22 = (($t) + 12|0);
 $23 = (($t) + 7|0);
 $$01$i = $21;$i$0$i = $1;
 while(1) {
  $24 = (($$01$i) + -1)|0;
  $25 = ($24>>>0)<($1>>>0);
  L15: do {
   if ($25) {
    $26 = HEAP32[$22>>2]|0;
    $27 = (($26) + ($24<<4)|0);
    $$0$i$i = $27;
   } else {
    $28 = (+($$01$i|0));
    $29 = ($$01$i|0)==(0);
    if ($29) {
     $n$0$i$i = $19;
    } else {
     HEAPF64[tempDoublePtr>>3] = $28;$30 = HEAP32[tempDoublePtr>>2]|0;
     $31 = HEAP32[tempDoublePtr+4>>2]|0;
     $32 = (($31) + ($30))|0;
     $33 = HEAP8[$23>>0]|0;
     $34 = $33&255;
     $35 = 1 << $34;
     $36 = (($35) + -1)|0;
     $37 = $36 | 1;
     $38 = (($32>>>0) % ($37>>>0))&-1;
     $39 = (($19) + ($38<<5)|0);
     $n$0$i$i = $39;
    }
    while(1) {
     $40 = (($n$0$i$i) + 24|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(3);
     if ($42) {
      $43 = (($n$0$i$i) + 16|0);
      $44 = +HEAPF64[$43>>3];
      $45 = $44 == $28;
      if ($45) {
       break;
      }
     }
     $46 = (($n$0$i$i) + 28|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0|0);
     if ($48) {
      $$0$i$i = 1648;
      break L15;
     } else {
      $n$0$i$i = $47;
     }
    }
    $$0$i$i = $n$0$i$i;
   }
  } while(0);
  $49 = (($$0$i$i) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(0);
  if ($51) {
   break;
  }
  $54 = $$01$i << 1;
  $55 = ($54>>>0)>(2147483645);
  if ($55) {
   $i$1$i = 1;
   label = 18;
   break;
  } else {
   $i$0$i$phi = $$01$i;$$01$i = $54;$i$0$i = $i$0$i$phi;
  }
 }
 if ((label|0) == 18) {
  while(1) {
   label = 0;
   $56 = (($i$1$i) + -1)|0;
   $57 = ($56>>>0)<($1>>>0);
   L31: do {
    if ($57) {
     $58 = HEAP32[$22>>2]|0;
     $59 = (($58) + ($56<<4)|0);
     $$0$i10$i = $59;
    } else {
     $60 = (+($i$1$i|0));
     $61 = ($i$1$i|0)==(0);
     if ($61) {
      $n$0$i8$i = $19;
     } else {
      HEAPF64[tempDoublePtr>>3] = $60;$62 = HEAP32[tempDoublePtr>>2]|0;
      $63 = HEAP32[tempDoublePtr+4>>2]|0;
      $64 = (($63) + ($62))|0;
      $65 = HEAP8[$23>>0]|0;
      $66 = $65&255;
      $67 = 1 << $66;
      $68 = (($67) + -1)|0;
      $69 = $68 | 1;
      $70 = (($64>>>0) % ($69>>>0))&-1;
      $71 = (($19) + ($70<<5)|0);
      $n$0$i8$i = $71;
     }
     while(1) {
      $72 = (($n$0$i8$i) + 24|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)==(3);
      if ($74) {
       $75 = (($n$0$i8$i) + 16|0);
       $76 = +HEAPF64[$75>>3];
       $77 = $76 == $60;
       if ($77) {
        break;
       }
      }
      $78 = (($n$0$i8$i) + 28|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$0$i10$i = 1648;
       break L31;
      } else {
       $n$0$i8$i = $79;
      }
     }
     $$0$i10$i = $n$0$i8$i;
    }
   } while(0);
   $81 = (($$0$i10$i) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(0);
   $84 = (($i$1$i) + 1)|0;
   if ($83) {
    $$0 = $56;
    break;
   } else {
    $i$1$i = $84;
    label = 18;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $52 = (($$01$i) - ($i$0$i))|0;
 $53 = ($52>>>0)>(1);
 if ($53) {
  $$113$i = $$01$i;$i$214$i = $i$0$i;
 } else {
  $$0 = $i$0$i;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $85 = (($$113$i) + ($i$214$i))|0;
  $86 = $85 >>> 1;
  $87 = (($86) + -1)|0;
  $88 = ($87>>>0)<($1>>>0);
  L49: do {
   if ($88) {
    $89 = HEAP32[$22>>2]|0;
    $90 = (($89) + ($87<<4)|0);
    $$0$i5$i = $90;
   } else {
    $91 = (+($86|0));
    $92 = ($86|0)==(0);
    if ($92) {
     $n$0$i3$i = $19;
    } else {
     HEAPF64[tempDoublePtr>>3] = $91;$93 = HEAP32[tempDoublePtr>>2]|0;
     $94 = HEAP32[tempDoublePtr+4>>2]|0;
     $95 = (($94) + ($93))|0;
     $96 = HEAP8[$23>>0]|0;
     $97 = $96&255;
     $98 = 1 << $97;
     $99 = (($98) + -1)|0;
     $100 = $99 | 1;
     $101 = (($95>>>0) % ($100>>>0))&-1;
     $102 = (($19) + ($101<<5)|0);
     $n$0$i3$i = $102;
    }
    while(1) {
     $103 = (($n$0$i3$i) + 24|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==(3);
     if ($105) {
      $106 = (($n$0$i3$i) + 16|0);
      $107 = +HEAPF64[$106>>3];
      $108 = $107 == $91;
      if ($108) {
       break;
      }
     }
     $109 = (($n$0$i3$i) + 28|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$0$i5$i = 1648;
      break L49;
     } else {
      $n$0$i3$i = $110;
     }
    }
    $$0$i5$i = $n$0$i3$i;
   }
  } while(0);
  $112 = (($$0$i5$i) + 8|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($113|0)==(0);
  $$$1$i = $114 ? $86 : $$113$i;
  $i$2$$i = $114 ? $i$214$i : $86;
  $115 = (($$$1$i) - ($i$2$$i))|0;
  $116 = ($115>>>0)>(1);
  if ($116) {
   $$113$i = $$$1$i;$i$214$i = $i$2$$i;
  } else {
   $$0 = $i$2$$i;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _resize($L,$t,$nasize,$nhsize) {
 $L = $L|0;
 $t = $t|0;
 $nasize = $nasize|0;
 $nhsize = $nhsize|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i1 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi16Z2D = 0.0, $$pre$phiZ2D = 0, $$pre13 = 0, $$pre15 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0;
 var $i$01$i = 0, $i$05 = 0, $i$13 = 0, $i$13$in = 0, $k$i = 0, $n$0$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $k$i = sp;
 $0 = (($t) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($t) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($1|0)<($nasize|0);
 if ($7) {
  $8 = (($nasize) + 1)|0;
  $9 = ($8>>>0)<(268435456);
  if ($9) {
   $10 = (($t) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $1 << 4;
   $13 = $nasize << 4;
   $14 = (_luaM_realloc_($L,$11,$12,$13)|0);
   $$pre$phi$iZ2D = $10;$16 = $14;
  } else {
   $15 = (_luaM_toobig($L)|0);
   $$pre$i = (($t) + 12|0);
   $$pre$phi$iZ2D = $$pre$i;$16 = $15;
  }
  HEAP32[$$pre$phi$iZ2D>>2] = $16;
  $17 = HEAP32[$0>>2]|0;
  $18 = ($17|0)<($nasize|0);
  if ($18) {
   $i$01$i = $17;
   while(1) {
    $19 = ((($16) + ($i$01$i<<4)|0) + 8|0);
    HEAP32[$19>>2] = 0;
    $20 = (($i$01$i) + 1)|0;
    $exitcond$i = ($20|0)==($nasize|0);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i = $20;
    }
   }
  }
  HEAP32[$0>>2] = $nasize;
 }
 _setnodevector($L,$t,$nhsize);
 $21 = ($1|0)>($nasize|0);
 if ($21) {
  HEAP32[$0>>2] = $nasize;
  $22 = (($t) + 12|0);
  $23 = (($k$i) + 8|0);
  $i$05 = $nasize;
  while(1) {
   $24 = HEAP32[$22>>2]|0;
   $25 = ((($24) + ($i$05<<4)|0) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   $$pre13 = (($i$05) + 1)|0;
   if (!($27)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = ($i$05>>>0)<($28>>>0);
    L18: do {
     if ($29) {
      $30 = (($24) + ($i$05<<4)|0);
      $$0$i$i = $30;
      label = 20;
     } else {
      $31 = (+($$pre13|0));
      $32 = ($$pre13|0)==(0);
      if ($32) {
       $33 = HEAP32[$5>>2]|0;
       $n$0$i$i = $33;
      } else {
       HEAPF64[tempDoublePtr>>3] = $31;$34 = HEAP32[tempDoublePtr>>2]|0;
       $35 = HEAP32[tempDoublePtr+4>>2]|0;
       $36 = (($35) + ($34))|0;
       $37 = HEAP8[$2>>0]|0;
       $38 = $37&255;
       $39 = 1 << $38;
       $40 = (($39) + -1)|0;
       $41 = $40 | 1;
       $42 = (($36>>>0) % ($41>>>0))&-1;
       $43 = HEAP32[$5>>2]|0;
       $44 = (($43) + ($42<<5)|0);
       $n$0$i$i = $44;
      }
      while(1) {
       $45 = (($n$0$i$i) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(3);
       if ($47) {
        $48 = (($n$0$i$i) + 16|0);
        $49 = +HEAPF64[$48>>3];
        $50 = $49 == $31;
        if ($50) {
         break;
        }
       }
       $51 = (($n$0$i$i) + 28|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0|0);
       if ($53) {
        $$pre$phi16Z2D = $31;
        label = 22;
        break L18;
       } else {
        $n$0$i$i = $52;
       }
      }
      $$0$i$i = $n$0$i$i;
      label = 20;
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     $54 = ($$0$i$i|0)==(1648|0);
     if ($54) {
      $$pre15 = (+($$pre13|0));
      $$pre$phi16Z2D = $$pre15;
      label = 22;
     } else {
      $$0$i = $$0$i$i;
     }
    }
    if ((label|0) == 22) {
     label = 0;
     HEAPF64[$k$i>>3] = $$pre$phi16Z2D;
     HEAP32[$23>>2] = 3;
     $55 = (_newkey($L,$t,$k$i)|0);
     $$0$i = $55;
    }
    $56 = (($24) + ($i$05<<4)|0);
    $57 = $56;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = (($57) + 4)|0;
    $61 = $60;
    $62 = HEAP32[$61>>2]|0;
    $63 = $$0$i;
    $64 = $63;
    HEAP32[$64>>2] = $59;
    $65 = (($63) + 4)|0;
    $66 = $65;
    HEAP32[$66>>2] = $62;
    $67 = HEAP32[$25>>2]|0;
    $68 = (($$0$i) + 8|0);
    HEAP32[$68>>2] = $67;
   }
   $exitcond = ($$pre13|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $i$05 = $$pre13;
   }
  }
  $69 = (($nasize) + 1)|0;
  $70 = ($69>>>0)<(268435456);
  if ($70) {
   $71 = (($t) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1 << 4;
   $74 = $nasize << 4;
   $75 = (_luaM_realloc_($L,$72,$73,$74)|0);
   $$pre$phiZ2D = $71;$77 = $75;
  } else {
   $76 = (_luaM_toobig($L)|0);
   $$pre = (($t) + 12|0);
   $$pre$phiZ2D = $$pre;$77 = $76;
  }
  HEAP32[$$pre$phiZ2D>>2] = $77;
 }
 $78 = 1 << $4;
 $79 = ($3<<24>>24)==(31);
 if (!($79)) {
  $80 = (($t) + 6|0);
  $i$13$in = $78;
  while(1) {
   $i$13 = (($i$13$in) + -1)|0;
   $81 = ((($6) + ($i$13<<5)|0) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(0);
   if (!($83)) {
    $85 = (($6) + ($i$13<<5)|0);
    $86 = ((($6) + ($i$13<<5)|0) + 16|0);
    $87 = (_luaH_get($t,$86)|0);
    HEAP8[$80>>0] = 0;
    $88 = ($87|0)==(1648|0);
    if ($88) {
     $89 = ((($6) + ($i$13<<5)|0) + 24|0);
     $90 = HEAP32[$89>>2]|0;
     if ((($90|0) == 3)) {
      $91 = +HEAPF64[$86>>3];
      $92 = ($91 == $91) & (0.0 == 0.0);
      if (!($92)) {
       _luaG_runerror($L,3344,$vararg_buffer1);
      }
     } else if ((($90|0) == 0)) {
      _luaG_runerror($L,3320,$vararg_buffer);
     }
     $93 = (_newkey($L,$t,$86)|0);
     $$0$i1 = $93;
    } else {
     $$0$i1 = $87;
    }
    $94 = $85;
    $95 = $94;
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 4)|0;
    $98 = $97;
    $99 = HEAP32[$98>>2]|0;
    $100 = $$0$i1;
    $101 = $100;
    HEAP32[$101>>2] = $96;
    $102 = (($100) + 4)|0;
    $103 = $102;
    HEAP32[$103>>2] = $99;
    $104 = HEAP32[$81>>2]|0;
    $105 = (($$0$i1) + 8|0);
    HEAP32[$105>>2] = $104;
   }
   $84 = ($i$13|0)>(0);
   if ($84) {
    $i$13$in = $i$13;
   } else {
    break;
   }
  }
 }
 $106 = ($6|0)==(3384|0);
 if ($106) {
  STACKTOP = sp;return;
 }
 $107 = $78 << 5;
 (_luaM_realloc_($L,$6,$107,0)|0);
 STACKTOP = sp;return;
}
function _setnodevector($L,$t,$size) {
 $L = $L|0;
 $t = $t|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $lsize$0 = 0, $phitmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($size|0)==(0);
 if ($0) {
  $1 = (($t) + 16|0);
  HEAP32[$1>>2] = 3384;
  $$0 = 0;$22 = 3384;$lsize$0 = 0;
  $20 = (($t) + 7|0);
  HEAP8[$20>>0] = $lsize$0;
  $21 = (($22) + ($$0<<5)|0);
  $23 = (($t) + 20|0);
  HEAP32[$23>>2] = $21;
  STACKTOP = sp;return;
 }
 $2 = (($size) + -1)|0;
 $3 = (_luaO_log2($2)|0);
 $4 = (($3) + 1)|0;
 $5 = ($3|0)>(25);
 if ($5) {
  _luaG_runerror($L,3368,$vararg_buffer);
 }
 $6 = 1 << $4;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)<(134217728);
 if ($8) {
  $9 = $6 << 5;
  $10 = (_luaM_realloc_($L,0,0,$9)|0);
  $13 = $10;
 } else {
  $11 = (_luaM_toobig($L)|0);
  $13 = $11;
 }
 $12 = (($t) + 16|0);
 HEAP32[$12>>2] = $13;
 $14 = ($4|0)==(31);
 if (!($14)) {
  $i$01 = 0;
  while(1) {
   $15 = ((($13) + ($i$01<<5)|0) + 28|0);
   HEAP32[$15>>2] = 0;
   $16 = ((($13) + ($i$01<<5)|0) + 24|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($13) + ($i$01<<5)|0) + 8|0);
   HEAP32[$17>>2] = 0;
   $18 = (($i$01) + 1)|0;
   $19 = ($18|0)<($6|0);
   if ($19) {
    $i$01 = $18;
   } else {
    break;
   }
  }
 }
 $phitmp = $4&255;
 $$0 = $6;$22 = $13;$lsize$0 = $phitmp;
 $20 = (($t) + 7|0);
 HEAP8[$20>>0] = $lsize$0;
 $21 = (($22) + ($$0<<5)|0);
 $23 = (($t) + 20|0);
 HEAP32[$23>>2] = $21;
 STACKTOP = sp;return;
}
function _newkey($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i3 = 0, $$na$0$i$i = 0, $$off$i$i = 0, $$off$i$i$i = 0, $$promoted$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$03$i$i = 0, $a$1$i$i = 0, $ause$0$lcssa$i$i = 0, $ause$0$ph$i$i = 0, $ause$06$i$i = 0;
 var $i$0$i$i = 0, $i$0$ph$i$i = 0, $i$01$i$i = 0, $i$07$i$i = 0, $i$1$lcssa$i$i = 0, $i$11$i$i = 0, $lc$0$$i$i = 0, $lc$0$lcssa$i$i = 0, $lc$02$i$i = 0, $lg$04$i$i = 0, $lim$0$ph$i$i = 0, $mp$0 = 0, $n$05$i$i = 0, $n$1$i$i = 0, $n$2$i$i = 0, $na$04$i$i = 0, $na$1$i$i = 0, $na$2$i$i = 0, $not$$i$i = 0, $nums$i = 0;
 var $or$cond = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $othern$0 = 0, $totaluse$0$ph$i$i = 0, $ttlg$05$i$i = 0, $twotoi$0$n$0$i$i = 0, $twotoi$02$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $nums$i = sp + 12|0;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 do {
  if ((($1|0) == 1)) {
   $31 = HEAP32[$key>>2]|0;
   $32 = (($t) + 7|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = 1 << $34;
   $36 = (($35) + -1)|0;
   $37 = $36 & $31;
   $38 = (($t) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($37<<5)|0);
   $$0$i = $40;$74 = $39;
  } else if ((($1|0) == 4)) {
   $19 = HEAP32[$key>>2]|0;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($t) + 7|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = 1 << $24;
   $26 = (($25) + -1)|0;
   $27 = $26 & $21;
   $28 = (($t) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($27<<5)|0);
   $$0$i = $30;$74 = $29;
  } else if ((($1|0) == 2)) {
   $41 = HEAP32[$key>>2]|0;
   $42 = $41;
   $43 = (($t) + 7|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = 1 << $45;
   $47 = (($46) + -1)|0;
   $48 = $47 | 1;
   $49 = (($42>>>0) % ($48>>>0))&-1;
   $50 = (($t) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($49<<5)|0);
   $$0$i = $52;$74 = $51;
  } else if ((($1|0) == 3)) {
   $2 = +HEAPF64[$key>>3];
   $3 = $2 == 0.0;
   if ($3) {
    $4 = (($t) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $$0$i = $5;$74 = $5;
    break;
   } else {
    HEAPF64[tempDoublePtr>>3] = $2;$6 = HEAP32[tempDoublePtr>>2]|0;
    $7 = HEAP32[tempDoublePtr+4>>2]|0;
    $8 = (($7) + ($6))|0;
    $9 = (($t) + 7|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = 1 << $11;
    $13 = (($12) + -1)|0;
    $14 = $13 | 1;
    $15 = (($8>>>0) % ($14>>>0))&-1;
    $16 = (($t) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + ($15<<5)|0);
    $$0$i = $18;$74 = $17;
    break;
   }
  } else {
   $53 = HEAP32[$key>>2]|0;
   $54 = $53;
   $55 = (($t) + 7|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = 1 << $57;
   $59 = (($58) + -1)|0;
   $60 = $59 | 1;
   $61 = (($54>>>0) % ($60>>>0))&-1;
   $62 = (($t) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($61<<5)|0);
   $$0$i = $64;$74 = $63;
  }
 } while(0);
 $65 = (($$0$i) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0);
 $68 = ($$0$i|0)==(3384|0);
 $or$cond = $67 | $68;
 do {
  if ($or$cond) {
   $69 = (($t) + 20|0);
   $70 = (($t) + 16|0);
   $$promoted$i = HEAP32[$69>>2]|0;
   $72 = $$promoted$i;
   while(1) {
    $71 = (($72) + -32|0);
    $73 = ($72>>>0)>($74>>>0);
    if (!($73)) {
     break;
    }
    $75 = (($72) + -8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==(0);
    if ($77) {
     label = 43;
     break;
    } else {
     $72 = $71;
    }
   }
   if ((label|0) == 43) {
    HEAP32[$69>>2] = $71;
    $161 = (($$0$i) + 16|0);
    $162 = (($$0$i) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    if ((($163|0) == 4)) {
     $177 = HEAP32[$161>>2]|0;
     $178 = (($177) + 8|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (($t) + 7|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = 1 << $182;
     $184 = (($183) + -1)|0;
     $185 = $184 & $179;
     $186 = (($74) + ($185<<5)|0);
     $$0$i3 = $186;
    } else if ((($163|0) == 3)) {
     $164 = +HEAPF64[$161>>3];
     $165 = $164 == 0.0;
     if ($165) {
      $$0$i3 = $74;
     } else {
      HEAPF64[tempDoublePtr>>3] = $164;$166 = HEAP32[tempDoublePtr>>2]|0;
      $167 = HEAP32[tempDoublePtr+4>>2]|0;
      $168 = (($167) + ($166))|0;
      $169 = (($t) + 7|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = $170&255;
      $172 = 1 << $171;
      $173 = (($172) + -1)|0;
      $174 = $173 | 1;
      $175 = (($168>>>0) % ($174>>>0))&-1;
      $176 = (($74) + ($175<<5)|0);
      $$0$i3 = $176;
     }
    } else if ((($163|0) == 1)) {
     $187 = HEAP32[$161>>2]|0;
     $188 = (($t) + 7|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = 1 << $190;
     $192 = (($191) + -1)|0;
     $193 = $192 & $187;
     $194 = (($74) + ($193<<5)|0);
     $$0$i3 = $194;
    } else if ((($163|0) == 2)) {
     $195 = HEAP32[$161>>2]|0;
     $196 = $195;
     $197 = (($t) + 7|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = 1 << $199;
     $201 = (($200) + -1)|0;
     $202 = $201 | 1;
     $203 = (($196>>>0) % ($202>>>0))&-1;
     $204 = (($74) + ($203<<5)|0);
     $$0$i3 = $204;
    } else {
     $205 = HEAP32[$161>>2]|0;
     $206 = $205;
     $207 = (($t) + 7|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208&255;
     $210 = 1 << $209;
     $211 = (($210) + -1)|0;
     $212 = $211 | 1;
     $213 = (($206>>>0) % ($212>>>0))&-1;
     $214 = (($74) + ($213<<5)|0);
     $$0$i3 = $214;
    }
    $215 = ($$0$i3|0)==($$0$i|0);
    if ($215) {
     $220 = (($$0$i) + 28|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (($72) + -4|0);
     HEAP32[$222>>2] = $221;
     HEAP32[$220>>2] = $71;
     $mp$0 = $71;
     break;
    } else {
     $othern$0 = $$0$i3;
    }
    while(1) {
     $216 = (($othern$0) + 28|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==($$0$i|0);
     if ($218) {
      break;
     } else {
      $othern$0 = $217;
     }
    }
    HEAP32[$216>>2] = $71;
    ;HEAP32[$71+0>>2]=HEAP32[$$0$i+0>>2]|0;HEAP32[$71+4>>2]=HEAP32[$$0$i+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$$0$i+8>>2]|0;HEAP32[$71+12>>2]=HEAP32[$$0$i+12>>2]|0;HEAP32[$71+16>>2]=HEAP32[$$0$i+16>>2]|0;HEAP32[$71+20>>2]=HEAP32[$$0$i+20>>2]|0;HEAP32[$71+24>>2]=HEAP32[$$0$i+24>>2]|0;HEAP32[$71+28>>2]=HEAP32[$$0$i+28>>2]|0;
    $219 = (($$0$i) + 28|0);
    HEAP32[$219>>2] = 0;
    HEAP32[$65>>2] = 0;
    $mp$0 = $$0$i;
    break;
   }
   HEAP32[$69>>2] = $71;
   dest=$nums$i+0|0; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $78 = (($t) + 28|0);
   $79 = (($t) + 12|0);
   $80 = HEAP32[$78>>2]|0;
   $ause$06$i$i = 0;$i$07$i$i = 1;$lg$04$i$i = 0;$ttlg$05$i$i = 1;
   while(1) {
    $81 = ($ttlg$05$i$i|0)>($80|0);
    if ($81) {
     $82 = ($i$07$i$i|0)>($80|0);
     if ($82) {
      $ause$0$lcssa$i$i = $ause$06$i$i;
      break;
     } else {
      $lim$0$ph$i$i = $80;
     }
    } else {
     $lim$0$ph$i$i = $ttlg$05$i$i;
    }
    $83 = ($i$07$i$i|0)>($lim$0$ph$i$i|0);
    if ($83) {
     $i$1$lcssa$i$i = $i$07$i$i;$lc$0$lcssa$i$i = 0;
    } else {
     $84 = HEAP32[$79>>2]|0;
     $i$11$i$i = $i$07$i$i;$lc$02$i$i = 0;
     while(1) {
      $85 = (($i$11$i$i) + -1)|0;
      $86 = ((($84) + ($85<<4)|0) + 8|0);
      $87 = HEAP32[$86>>2]|0;
      $not$$i$i = ($87|0)!=(0);
      $88 = $not$$i$i&1;
      $lc$0$$i$i = (($88) + ($lc$02$i$i))|0;
      $89 = (($i$11$i$i) + 1)|0;
      $90 = ($i$11$i$i|0)<($lim$0$ph$i$i|0);
      if ($90) {
       $i$11$i$i = $89;$lc$02$i$i = $lc$0$$i$i;
      } else {
       break;
      }
     }
     $91 = (($lim$0$ph$i$i) + 1)|0;
     $i$1$lcssa$i$i = $91;$lc$0$lcssa$i$i = $lc$0$$i$i;
    }
    $92 = (($nums$i) + ($lg$04$i$i<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($lc$0$lcssa$i$i))|0;
    HEAP32[$92>>2] = $94;
    $95 = (($lc$0$lcssa$i$i) + ($ause$06$i$i))|0;
    $96 = (($lg$04$i$i) + 1)|0;
    $97 = $ttlg$05$i$i << 1;
    $98 = ($96|0)<(27);
    if ($98) {
     $ause$06$i$i = $95;$i$07$i$i = $i$1$lcssa$i$i;$lg$04$i$i = $96;$ttlg$05$i$i = $97;
    } else {
     $ause$0$lcssa$i$i = $95;
     break;
    }
   }
   $99 = (($t) + 7|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = 1 << $101;
   $ause$0$ph$i$i = 0;$i$0$ph$i$i = $102;$totaluse$0$ph$i$i = 0;
   L44: while(1) {
    $i$0$i$i = $i$0$ph$i$i;
    while(1) {
     $103 = (($i$0$i$i) + -1)|0;
     $104 = ($i$0$i$i|0)==(0);
     if ($104) {
      break L44;
     }
     $105 = HEAP32[$70>>2]|0;
     $106 = ((($105) + ($103<<5)|0) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==(0);
     if ($108) {
      $i$0$i$i = $103;
     } else {
      break;
     }
    }
    $109 = ((($105) + ($103<<5)|0) + 24|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)==(3);
    if ($111) {
     $112 = ((($105) + ($103<<5)|0) + 16|0);
     $113 = +HEAPF64[$112>>3];
     $114 = (~~(($113)));
     $115 = (+($114|0));
     $116 = $115 == $113;
     $$off$i$i$i = (($114) + -1)|0;
     $117 = ($$off$i$i$i>>>0)<(67108864);
     $or$cond$i$i$i = $116 & $117;
     if ($or$cond$i$i$i) {
      $118 = (_luaO_log2($$off$i$i$i)|0);
      $119 = (($118) + 1)|0;
      $120 = (($nums$i) + ($119<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = (($121) + 1)|0;
      HEAP32[$120>>2] = $122;
      $$0$i$i$i = 1;
     } else {
      $$0$i$i$i = 0;
     }
    } else {
     $$0$i$i$i = 0;
    }
    $123 = (($$0$i$i$i) + ($ause$0$ph$i$i))|0;
    $124 = (($totaluse$0$ph$i$i) + 1)|0;
    $ause$0$ph$i$i = $123;$i$0$ph$i$i = $103;$totaluse$0$ph$i$i = $124;
   }
   $125 = (($ause$0$ph$i$i) + ($ause$0$lcssa$i$i))|0;
   $126 = HEAP32[$0>>2]|0;
   $127 = ($126|0)==(3);
   if ($127) {
    $128 = +HEAPF64[$key>>3];
    $129 = (~~(($128)));
    $130 = (+($129|0));
    $131 = $130 == $128;
    $$off$i$i = (($129) + -1)|0;
    $132 = ($$off$i$i>>>0)<(67108864);
    $or$cond$i$i = $131 & $132;
    if ($or$cond$i$i) {
     $133 = (_luaO_log2($$off$i$i)|0);
     $134 = (($133) + 1)|0;
     $135 = (($nums$i) + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($136) + 1)|0;
     HEAP32[$135>>2] = $137;
     $$0$i$i = 1;
    } else {
     $$0$i$i = 0;
    }
   } else {
    $$0$i$i = 0;
   }
   $138 = (($125) + ($$0$i$i))|0;
   $139 = ($138|0)>(0);
   L59: do {
    if ($139) {
     $145 = 0;$a$03$i$i = 0;$i$01$i$i = 0;$n$05$i$i = 0;$na$04$i$i = 0;$twotoi$02$i$i = 1;
     while(1) {
      $140 = (($nums$i) + ($i$01$i$i<<2)|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)>(0);
      if ($142) {
       $143 = (($141) + ($a$03$i$i))|0;
       $144 = ($143|0)>($145|0);
       $$na$0$i$i = $144 ? $143 : $na$04$i$i;
       $twotoi$0$n$0$i$i = $144 ? $twotoi$02$i$i : $n$05$i$i;
       $a$1$i$i = $143;$n$1$i$i = $twotoi$0$n$0$i$i;$na$1$i$i = $$na$0$i$i;
      } else {
       $a$1$i$i = $a$03$i$i;$n$1$i$i = $n$05$i$i;$na$1$i$i = $na$04$i$i;
      }
      $146 = ($a$1$i$i|0)==($138|0);
      if ($146) {
       $n$2$i$i = $n$1$i$i;$na$2$i$i = $na$1$i$i;
       break L59;
      }
      $147 = (($i$01$i$i) + 1)|0;
      $148 = $twotoi$02$i$i << 1;
      $149 = (($148|0) / 2)&-1;
      $150 = ($149|0)<($138|0);
      if ($150) {
       $145 = $149;$a$03$i$i = $a$1$i$i;$i$01$i$i = $147;$n$05$i$i = $n$1$i$i;$na$04$i$i = $na$1$i$i;$twotoi$02$i$i = $148;
      } else {
       $n$2$i$i = $n$1$i$i;$na$2$i$i = $na$1$i$i;
       break;
      }
     }
    } else {
     $n$2$i$i = 0;$na$2$i$i = 0;
    }
   } while(0);
   $151 = (($ause$0$lcssa$i$i) + 1)|0;
   $152 = (($151) + ($totaluse$0$ph$i$i))|0;
   $153 = (($152) - ($na$2$i$i))|0;
   _resize($L,$t,$n$2$i$i,$153);
   $154 = (_luaH_get($t,$key)|0);
   $155 = (($t) + 6|0);
   HEAP8[$155>>0] = 0;
   $156 = ($154|0)==(1648|0);
   if (!($156)) {
    $$0 = $154;
    STACKTOP = sp;return ($$0|0);
   }
   $157 = HEAP32[$0>>2]|0;
   if ((($157|0) == 0)) {
    _luaG_runerror($L,3320,$vararg_buffer);
   } else if ((($157|0) == 3)) {
    $158 = +HEAPF64[$key>>3];
    $159 = ($158 == $158) & (0.0 == 0.0);
    if (!($159)) {
     _luaG_runerror($L,3344,$vararg_buffer1);
    }
   }
   $160 = (_newkey($L,$t,$key)|0);
   $$0 = $160;
   STACKTOP = sp;return ($$0|0);
  } else {
   $mp$0 = $$0$i;
  }
 } while(0);
 $223 = (($mp$0) + 16|0);
 $224 = $key;
 $225 = $224;
 $226 = HEAP32[$225>>2]|0;
 $227 = (($224) + 4)|0;
 $228 = $227;
 $229 = HEAP32[$228>>2]|0;
 $230 = $223;
 $231 = $230;
 HEAP32[$231>>2] = $226;
 $232 = (($230) + 4)|0;
 $233 = $232;
 HEAP32[$233>>2] = $229;
 $234 = HEAP32[$0>>2]|0;
 $235 = (($mp$0) + 24|0);
 HEAP32[$235>>2] = $234;
 $236 = ($234|0)>(3);
 if ($236) {
  $237 = HEAP32[$key>>2]|0;
  $238 = (($237) + 5|0);
  $239 = HEAP8[$238>>0]|0;
  $240 = $239 & 3;
  $241 = ($240<<24>>24)==(0);
  if (!($241)) {
   $242 = (($t) + 5|0);
   $243 = HEAP8[$242>>0]|0;
   $244 = $243 & 4;
   $245 = ($244<<24>>24)==(0);
   if (!($245)) {
    _luaC_barrierback($L,$t);
   }
  }
 }
 $$0 = $mp$0;
 STACKTOP = sp;return ($$0|0);
}
function _luaT_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $i$01 = 0;
 while(1) {
  $1 = (3560 + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_strlen(($2|0))|0);
  $4 = (_luaS_newlstr($L,$2,$3)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5) + ($i$01<<2)|0) + 188|0);
  HEAP32[$6>>2] = $4;
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7) + ($i$01<<2)|0) + 188|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 5|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 | 32;
  $14 = $13&255;
  HEAP8[$10>>0] = $14;
  $15 = (($i$01) + 1)|0;
  $exitcond = ($15|0)==(17);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $15;
  }
 }
 STACKTOP = sp;return;
}
function _luaT_gettm($events,$event,$ename) {
 $events = $events|0;
 $event = $event|0;
 $ename = $ename|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaH_getstr($events,$ename)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = 1 << $event;
 $5 = (($events) + 6|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 | $4;
 $9 = $8&255;
 HEAP8[$5>>0] = $9;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _luaT_gettmbyobj($L,$o,$event) {
 $L = $L|0;
 $o = $o|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($o) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 7)) {
  $5 = HEAP32[$o>>2]|0;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $mt$0 = $7;
 } else if ((($1|0) == 5)) {
  $2 = HEAP32[$o>>2]|0;
  $3 = (($2) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $mt$0 = $4;
 } else {
  $8 = (($L) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9) + ($1<<2)|0) + 152|0);
  $11 = HEAP32[$10>>2]|0;
  $mt$0 = $11;
 }
 $12 = ($mt$0|0)==(0|0);
 if ($12) {
  $18 = 1648;
  STACKTOP = sp;return ($18|0);
 }
 $13 = (($L) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14) + ($event<<2)|0) + 188|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_luaH_getstr($mt$0,$16)|0);
 $18 = $17;
 STACKTOP = sp;return ($18|0);
}
function _luaU_undump($L,$Z,$buff,$name) {
 $L = $L|0;
 $Z = $Z|0;
 $buff = $buff|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $S = 0, $h$i = 0, $s$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $h$i = sp + 32|0;
 $s$i = sp + 44|0;
 $S = sp + 16|0;
 $0 = HEAP8[$name>>0]|0;
 if ((($0<<24>>24) == 27)) {
  $3 = (($S) + 12|0);
  HEAP32[$3>>2] = 3784;
  $17 = 3784;
 } else if ((($0<<24>>24) == 61) | (($0<<24>>24) == 64)) {
  $1 = (($name) + 1|0);
  $2 = (($S) + 12|0);
  HEAP32[$2>>2] = $1;
  $17 = $1;
 } else {
  $4 = (($S) + 12|0);
  HEAP32[$4>>2] = $name;
  $17 = $name;
 }
 HEAP32[$S>>2] = $L;
 $5 = (($S) + 4|0);
 HEAP32[$5>>2] = $Z;
 $6 = (($S) + 8|0);
 HEAP32[$6>>2] = $buff;
 HEAP32[$h$i>>2] = 1635077147;
 $7 = (($h$i) + 4|0);
 $8 = (($h$i) + 5|0);
 HEAP8[$7>>0] = 81;
 $9 = (($h$i) + 6|0);
 HEAP8[$8>>0] = 0;
 $10 = (($h$i) + 7|0);
 HEAP8[$9>>0] = 1;
 $11 = (($h$i) + 8|0);
 HEAP8[$10>>0] = 4;
 $12 = (($h$i) + 9|0);
 HEAP8[$11>>0] = 4;
 $13 = (($h$i) + 10|0);
 HEAP8[$12>>0] = 4;
 $14 = (($h$i) + 11|0);
 HEAP8[$13>>0] = 8;
 HEAP8[$14>>0] = 0;
 $15 = (_luaZ_read($Z,$s$i,12)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 3840;
  (_luaO_pushfstring($L,3888,$vararg_buffer)|0);
  $18 = HEAP32[$S>>2]|0;
  _luaD_throw($18,3);
 }
 $19 = (_memcmp($h$i,$s$i,12)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $25 = (_luaS_newlstr($L,3800,2)|0);
  $26 = (_LoadFunction($S,$25)|0);
  STACKTOP = sp;return ($26|0);
 }
 $21 = HEAP32[$S>>2]|0;
 $22 = (($S) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $23;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr5>>2] = 3920;
 (_luaO_pushfstring($21,3888,$vararg_buffer2)|0);
 $24 = HEAP32[$S>>2]|0;
 _luaD_throw($24,3);
 $25 = (_luaS_newlstr($L,3800,2)|0);
 $26 = (_LoadFunction($S,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function _luaU_header($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$h>>0]=1635077147&255;HEAP8[$h+1>>0]=(1635077147>>8)&255;HEAP8[$h+2>>0]=(1635077147>>16)&255;HEAP8[$h+3>>0]=1635077147>>24;
 $0 = (($h) + 4|0);
 $1 = (($h) + 5|0);
 HEAP8[$0>>0] = 81;
 $2 = (($h) + 6|0);
 HEAP8[$1>>0] = 0;
 $3 = (($h) + 7|0);
 HEAP8[$2>>0] = 1;
 $4 = (($h) + 8|0);
 HEAP8[$3>>0] = 4;
 $5 = (($h) + 9|0);
 HEAP8[$4>>0] = 4;
 $6 = (($h) + 10|0);
 HEAP8[$5>>0] = 4;
 $7 = (($h) + 11|0);
 HEAP8[$6>>0] = 8;
 HEAP8[$7>>0] = 0;
 STACKTOP = sp;return;
}
function _LoadFunction($S,$p) {
 $S = $S|0;
 $p = $p|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i31 = 0, $$0$i18$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i20 = 0, $$pre$i$i29 = 0, $$pre$i10$i = 0, $$pre$i11$i = 0, $$pre$i15$i = 0, $$pre$i16 = 0, $$pre$i24 = 0, $$pre$i3 = 0, $$pre$i3$i = 0, $$pre$i7$i = 0, $$pre$phi$i22Z2D = 0, $$pre$phi$iZ2D = 0;
 var $$pre39$i = 0, $$pre50 = 0, $$pre51 = 0, $$pre53 = 0, $$pre55 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond35$i = 0, $exitcond35$i36 = 0, $exitcond36$i = 0, $exitcond37$i = 0, $exitcond47 = 0, $exitcond48 = 0, $exitcond49 = 0, $i$0$i44 = 0;
 var $i$032$i = 0, $i$1$i41 = 0, $i$129$i = 0, $i$2$i38 = 0, $i$3$i37 = 0, $i$324$i = 0, $p$ = 0, $size$i = 0, $size$i$i = 0, $size$i$i25 = 0, $size$i17$i = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer102 = 0, $vararg_buffer106 = 0, $vararg_buffer110 = 0, $vararg_buffer114 = 0, $vararg_buffer118 = 0, $vararg_buffer122 = 0, $vararg_buffer126 = 0;
 var $vararg_buffer130 = 0, $vararg_buffer134 = 0, $vararg_buffer138 = 0, $vararg_buffer14 = 0, $vararg_buffer142 = 0, $vararg_buffer146 = 0, $vararg_buffer150 = 0, $vararg_buffer154 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer46 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0, $vararg_buffer58 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer66 = 0, $vararg_buffer70 = 0, $vararg_buffer74 = 0, $vararg_buffer78 = 0, $vararg_buffer82 = 0, $vararg_buffer86 = 0, $vararg_buffer90 = 0, $vararg_buffer94 = 0, $vararg_buffer98 = 0, $vararg_ptr1 = 0, $vararg_ptr101 = 0, $vararg_ptr105 = 0, $vararg_ptr109 = 0, $vararg_ptr113 = 0, $vararg_ptr117 = 0, $vararg_ptr121 = 0, $vararg_ptr125 = 0, $vararg_ptr129 = 0;
 var $vararg_ptr13 = 0, $vararg_ptr133 = 0, $vararg_ptr137 = 0, $vararg_ptr141 = 0, $vararg_ptr145 = 0, $vararg_ptr149 = 0, $vararg_ptr153 = 0, $vararg_ptr157 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0;
 var $vararg_ptr61 = 0, $vararg_ptr65 = 0, $vararg_ptr69 = 0, $vararg_ptr73 = 0, $vararg_ptr77 = 0, $vararg_ptr81 = 0, $vararg_ptr85 = 0, $vararg_ptr89 = 0, $vararg_ptr9 = 0, $vararg_ptr93 = 0, $vararg_ptr97 = 0, $x$i = 0, $x$i$i = 0, $x$i$i18 = 0, $x$i$i27 = 0, $x$i1 = 0, $x$i1$i = 0, $x$i1$i26 = 0, $x$i10 = 0, $x$i13 = 0;
 var $x$i13$i = 0, $x$i3$i = 0, $x$i5 = 0, $x$i5$i = 0, $x$i6$i = 0, $x$i7 = 0, $x$i8$i = 0, $x$i9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer154 = sp + 320|0;
 $vararg_buffer150 = sp + 312|0;
 $vararg_buffer146 = sp + 304|0;
 $vararg_buffer142 = sp + 296|0;
 $vararg_buffer138 = sp + 288|0;
 $vararg_buffer134 = sp + 280|0;
 $vararg_buffer130 = sp + 272|0;
 $vararg_buffer126 = sp + 264|0;
 $vararg_buffer122 = sp + 256|0;
 $vararg_buffer118 = sp + 248|0;
 $vararg_buffer114 = sp + 240|0;
 $vararg_buffer110 = sp + 232|0;
 $vararg_buffer106 = sp + 224|0;
 $vararg_buffer102 = sp + 216|0;
 $vararg_buffer98 = sp + 208|0;
 $vararg_buffer94 = sp + 200|0;
 $vararg_buffer90 = sp + 192|0;
 $vararg_buffer86 = sp + 184|0;
 $vararg_buffer82 = sp + 176|0;
 $vararg_buffer78 = sp + 168|0;
 $vararg_buffer74 = sp + 160|0;
 $vararg_buffer70 = sp + 152|0;
 $vararg_buffer66 = sp + 144|0;
 $vararg_buffer62 = sp + 136|0;
 $vararg_buffer58 = sp + 128|0;
 $vararg_buffer54 = sp + 120|0;
 $vararg_buffer50 = sp + 112|0;
 $vararg_buffer46 = sp + 104|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer38 = sp + 88|0;
 $vararg_buffer34 = sp + 80|0;
 $vararg_buffer30 = sp + 72|0;
 $vararg_buffer26 = sp + 64|0;
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $x$i8$i = sp + 380|0;
 $size$i$i25 = sp + 376|0;
 $x$i6$i = sp;
 $x$i3$i = sp + 389|0;
 $x$i1$i26 = sp + 388|0;
 $x$i$i27 = sp + 372|0;
 $size$i17$i = sp + 368|0;
 $x$i13$i = sp + 364|0;
 $x$i9$i = sp + 360|0;
 $x$i5$i = sp + 356|0;
 $size$i$i = sp + 352|0;
 $x$i1$i = sp + 348|0;
 $x$i$i18 = sp + 344|0;
 $x$i$i = sp + 340|0;
 $x$i13 = sp + 387|0;
 $x$i10 = sp + 386|0;
 $x$i7 = sp + 385|0;
 $x$i5 = sp + 384|0;
 $x$i1 = sp + 336|0;
 $x$i = sp + 332|0;
 $size$i = sp + 328|0;
 $0 = HEAP32[$S>>2]|0;
 $1 = (($0) + 52|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = (($2) + 1)<<16>>16;
 HEAP16[$1>>1] = $3;
 $4 = ($3&65535)>(200);
 if ($4) {
  $5 = (($S) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 3808;
  (_luaO_pushfstring($0,3888,$vararg_buffer)|0);
  $7 = HEAP32[$S>>2]|0;
  _luaD_throw($7,3);
  $$pre = HEAP32[$S>>2]|0;
  $8 = $$pre;
 } else {
  $8 = $0;
 }
 $9 = (_luaF_newproto($8)|0);
 $10 = HEAP32[$S>>2]|0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = $9;
 $13 = (($12) + 8|0);
 HEAP32[$13>>2] = 9;
 $14 = HEAP32[$S>>2]|0;
 $15 = (($14) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = ($21|0)<(17);
 if ($22) {
  _luaD_growstack($14,1);
  $$pre50 = HEAP32[$S>>2]|0;
  $$phi$trans$insert = (($$pre50) + 8|0);
  $$pre51 = HEAP32[$$phi$trans$insert>>2]|0;
  $24 = $$pre50;$26 = $$pre51;
 } else {
  $24 = $14;$26 = $18;
 }
 $23 = (($24) + 8|0);
 $25 = (($26) + 16|0);
 HEAP32[$23>>2] = $25;
 $27 = (($S) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_luaZ_read($28,$size$i,4)|0);
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = HEAP32[$S>>2]|0;
  $32 = (($S) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $33;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 3840;
  (_luaO_pushfstring($31,3888,$vararg_buffer2)|0);
  $34 = HEAP32[$S>>2]|0;
  _luaD_throw($34,3);
 }
 $35 = HEAP32[$size$i>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  $$0$i = 0;
 } else {
  $37 = HEAP32[$S>>2]|0;
  $38 = (($S) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_luaZ_openspace($37,$39,$35)|0);
  $41 = HEAP32[$size$i>>2]|0;
  $42 = HEAP32[$27>>2]|0;
  $43 = (_luaZ_read($42,$40,$41)|0);
  $44 = ($43|0)==(0);
  if (!($44)) {
   $45 = HEAP32[$S>>2]|0;
   $46 = (($S) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $47;
   $vararg_ptr9 = (($vararg_buffer6) + 4|0);
   HEAP32[$vararg_ptr9>>2] = 3840;
   (_luaO_pushfstring($45,3888,$vararg_buffer6)|0);
   $48 = HEAP32[$S>>2]|0;
   _luaD_throw($48,3);
  }
  $49 = HEAP32[$S>>2]|0;
  $50 = HEAP32[$size$i>>2]|0;
  $51 = (($50) + -1)|0;
  $52 = (_luaS_newlstr($49,$40,$51)|0);
  $$0$i = $52;
 }
 $53 = (($9) + 32|0);
 $54 = ($$0$i|0)==(0|0);
 $p$ = $54 ? $p : $$0$i;
 HEAP32[$53>>2] = $p$;
 $55 = HEAP32[$27>>2]|0;
 $56 = (_luaZ_read($55,$x$i,4)|0);
 $57 = ($56|0)==(0);
 if (!($57)) {
  $58 = HEAP32[$S>>2]|0;
  $59 = (($S) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $60;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = 3840;
  (_luaO_pushfstring($58,3888,$vararg_buffer10)|0);
  $61 = HEAP32[$S>>2]|0;
  _luaD_throw($61,3);
 }
 $62 = HEAP32[$x$i>>2]|0;
 $63 = ($62|0)<(0);
 if ($63) {
  $64 = HEAP32[$S>>2]|0;
  $65 = (($S) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $66;
  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
  HEAP32[$vararg_ptr17>>2] = 3872;
  (_luaO_pushfstring($64,3888,$vararg_buffer14)|0);
  $67 = HEAP32[$S>>2]|0;
  _luaD_throw($67,3);
  $$pre$i = HEAP32[$x$i>>2]|0;
  $69 = $$pre$i;
 } else {
  $69 = $62;
 }
 $68 = (($9) + 60|0);
 HEAP32[$68>>2] = $69;
 $70 = HEAP32[$27>>2]|0;
 $71 = (_luaZ_read($70,$x$i1,4)|0);
 $72 = ($71|0)==(0);
 if (!($72)) {
  $73 = HEAP32[$S>>2]|0;
  $74 = (($S) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  HEAP32[$vararg_buffer18>>2] = $75;
  $vararg_ptr21 = (($vararg_buffer18) + 4|0);
  HEAP32[$vararg_ptr21>>2] = 3840;
  (_luaO_pushfstring($73,3888,$vararg_buffer18)|0);
  $76 = HEAP32[$S>>2]|0;
  _luaD_throw($76,3);
 }
 $77 = HEAP32[$x$i1>>2]|0;
 $78 = ($77|0)<(0);
 if ($78) {
  $79 = HEAP32[$S>>2]|0;
  $80 = (($S) + 12|0);
  $81 = HEAP32[$80>>2]|0;
  HEAP32[$vararg_buffer22>>2] = $81;
  $vararg_ptr25 = (($vararg_buffer22) + 4|0);
  HEAP32[$vararg_ptr25>>2] = 3872;
  (_luaO_pushfstring($79,3888,$vararg_buffer22)|0);
  $82 = HEAP32[$S>>2]|0;
  _luaD_throw($82,3);
  $$pre$i3 = HEAP32[$x$i1>>2]|0;
  $84 = $$pre$i3;
 } else {
  $84 = $77;
 }
 $83 = (($9) + 64|0);
 HEAP32[$83>>2] = $84;
 $85 = HEAP32[$27>>2]|0;
 $86 = (_luaZ_read($85,$x$i5,1)|0);
 $87 = ($86|0)==(0);
 if (!($87)) {
  $88 = HEAP32[$S>>2]|0;
  $89 = (($S) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  HEAP32[$vararg_buffer26>>2] = $90;
  $vararg_ptr29 = (($vararg_buffer26) + 4|0);
  HEAP32[$vararg_ptr29>>2] = 3840;
  (_luaO_pushfstring($88,3888,$vararg_buffer26)|0);
  $91 = HEAP32[$S>>2]|0;
  _luaD_throw($91,3);
 }
 $92 = HEAP8[$x$i5>>0]|0;
 $93 = (($9) + 72|0);
 HEAP8[$93>>0] = $92;
 $94 = HEAP32[$27>>2]|0;
 $95 = (_luaZ_read($94,$x$i7,1)|0);
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP32[$S>>2]|0;
  $98 = (($S) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$vararg_buffer30>>2] = $99;
  $vararg_ptr33 = (($vararg_buffer30) + 4|0);
  HEAP32[$vararg_ptr33>>2] = 3840;
  (_luaO_pushfstring($97,3888,$vararg_buffer30)|0);
  $100 = HEAP32[$S>>2]|0;
  _luaD_throw($100,3);
 }
 $101 = HEAP8[$x$i7>>0]|0;
 $102 = (($9) + 73|0);
 HEAP8[$102>>0] = $101;
 $103 = HEAP32[$27>>2]|0;
 $104 = (_luaZ_read($103,$x$i10,1)|0);
 $105 = ($104|0)==(0);
 if (!($105)) {
  $106 = HEAP32[$S>>2]|0;
  $107 = (($S) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  HEAP32[$vararg_buffer34>>2] = $108;
  $vararg_ptr37 = (($vararg_buffer34) + 4|0);
  HEAP32[$vararg_ptr37>>2] = 3840;
  (_luaO_pushfstring($106,3888,$vararg_buffer34)|0);
  $109 = HEAP32[$S>>2]|0;
  _luaD_throw($109,3);
 }
 $110 = HEAP8[$x$i10>>0]|0;
 $111 = (($9) + 74|0);
 HEAP8[$111>>0] = $110;
 $112 = HEAP32[$27>>2]|0;
 $113 = (_luaZ_read($112,$x$i13,1)|0);
 $114 = ($113|0)==(0);
 if (!($114)) {
  $115 = HEAP32[$S>>2]|0;
  $116 = (($S) + 12|0);
  $117 = HEAP32[$116>>2]|0;
  HEAP32[$vararg_buffer38>>2] = $117;
  $vararg_ptr41 = (($vararg_buffer38) + 4|0);
  HEAP32[$vararg_ptr41>>2] = 3840;
  (_luaO_pushfstring($115,3888,$vararg_buffer38)|0);
  $118 = HEAP32[$S>>2]|0;
  _luaD_throw($118,3);
 }
 $119 = HEAP8[$x$i13>>0]|0;
 $120 = (($9) + 75|0);
 HEAP8[$120>>0] = $119;
 $121 = HEAP32[$27>>2]|0;
 $122 = (_luaZ_read($121,$x$i$i,4)|0);
 $123 = ($122|0)==(0);
 if (!($123)) {
  $124 = HEAP32[$S>>2]|0;
  $125 = (($S) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  HEAP32[$vararg_buffer42>>2] = $126;
  $vararg_ptr45 = (($vararg_buffer42) + 4|0);
  HEAP32[$vararg_ptr45>>2] = 3840;
  (_luaO_pushfstring($124,3888,$vararg_buffer42)|0);
  $127 = HEAP32[$S>>2]|0;
  _luaD_throw($127,3);
 }
 $128 = HEAP32[$x$i$i>>2]|0;
 $129 = ($128|0)<(0);
 if ($129) {
  $130 = HEAP32[$S>>2]|0;
  $131 = (($S) + 12|0);
  $132 = HEAP32[$131>>2]|0;
  HEAP32[$vararg_buffer46>>2] = $132;
  $vararg_ptr49 = (($vararg_buffer46) + 4|0);
  HEAP32[$vararg_ptr49>>2] = 3872;
  (_luaO_pushfstring($130,3888,$vararg_buffer46)|0);
  $133 = HEAP32[$S>>2]|0;
  _luaD_throw($133,3);
  $$pre$i$i = HEAP32[$x$i$i>>2]|0;
  $135 = $$pre$i$i;
 } else {
  $135 = $128;
 }
 $134 = (($135) + 1)|0;
 $136 = ($134>>>0)<(1073741824);
 $137 = HEAP32[$S>>2]|0;
 if ($136) {
  $138 = $135 << 2;
  $139 = (_luaM_realloc_($137,0,0,$138)|0);
  $$pre$phi$iZ2D = $138;$142 = $139;
 } else {
  $140 = (_luaM_toobig($137)|0);
  $$pre$i16 = $135 << 2;
  $$pre$phi$iZ2D = $$pre$i16;$142 = $140;
 }
 $141 = (($9) + 12|0);
 HEAP32[$141>>2] = $142;
 $143 = (($9) + 44|0);
 HEAP32[$143>>2] = $135;
 $144 = HEAP32[$27>>2]|0;
 $145 = (_luaZ_read($144,$142,$$pre$phi$iZ2D)|0);
 $146 = ($145|0)==(0);
 if (!($146)) {
  $147 = HEAP32[$S>>2]|0;
  $148 = (($S) + 12|0);
  $149 = HEAP32[$148>>2]|0;
  HEAP32[$vararg_buffer50>>2] = $149;
  $vararg_ptr53 = (($vararg_buffer50) + 4|0);
  HEAP32[$vararg_ptr53>>2] = 3840;
  (_luaO_pushfstring($147,3888,$vararg_buffer50)|0);
  $150 = HEAP32[$S>>2]|0;
  _luaD_throw($150,3);
 }
 $151 = HEAP32[$27>>2]|0;
 $152 = (_luaZ_read($151,$x$i$i27,4)|0);
 $153 = ($152|0)==(0);
 if (!($153)) {
  $154 = HEAP32[$S>>2]|0;
  $155 = (($S) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  HEAP32[$vararg_buffer54>>2] = $156;
  $vararg_ptr57 = (($vararg_buffer54) + 4|0);
  HEAP32[$vararg_ptr57>>2] = 3840;
  (_luaO_pushfstring($154,3888,$vararg_buffer54)|0);
  $157 = HEAP32[$S>>2]|0;
  _luaD_throw($157,3);
 }
 $158 = HEAP32[$x$i$i27>>2]|0;
 $159 = ($158|0)<(0);
 if ($159) {
  $160 = HEAP32[$S>>2]|0;
  $161 = (($S) + 12|0);
  $162 = HEAP32[$161>>2]|0;
  HEAP32[$vararg_buffer58>>2] = $162;
  $vararg_ptr61 = (($vararg_buffer58) + 4|0);
  HEAP32[$vararg_ptr61>>2] = 3872;
  (_luaO_pushfstring($160,3888,$vararg_buffer58)|0);
  $163 = HEAP32[$S>>2]|0;
  _luaD_throw($163,3);
  $$pre$i$i29 = HEAP32[$x$i$i27>>2]|0;
  $165 = $$pre$i$i29;
 } else {
  $165 = $158;
 }
 $164 = (($165) + 1)|0;
 $166 = ($164>>>0)<(268435456);
 $167 = HEAP32[$S>>2]|0;
 if ($166) {
  $168 = $165 << 4;
  $169 = (_luaM_realloc_($167,0,0,$168)|0);
  $172 = $169;
 } else {
  $170 = (_luaM_toobig($167)|0);
  $172 = $170;
 }
 $171 = (($9) + 8|0);
 HEAP32[$171>>2] = $172;
 $173 = (($9) + 40|0);
 HEAP32[$173>>2] = $165;
 $174 = ($165|0)>(0);
 L63: do {
  if ($174) {
   $i$0$i44 = 0;
   while(1) {
    $177 = ((($172) + ($i$0$i44<<4)|0) + 8|0);
    HEAP32[$177>>2] = 0;
    $178 = (($i$0$i44) + 1)|0;
    $exitcond49 = ($178|0)==($165|0);
    if ($exitcond49) {
     break;
    } else {
     $i$0$i44 = $178;
    }
   }
   if (!($174)) {
    break;
   }
   $175 = (($S) + 12|0);
   $176 = (($S) + 8|0);
   $180 = $172;$i$1$i41 = 0;
   while(1) {
    $179 = (($180) + ($i$1$i41<<4)|0);
    $181 = HEAP32[$27>>2]|0;
    $182 = (_luaZ_read($181,$x$i1$i26,1)|0);
    $183 = ($182|0)==(0);
    if (!($183)) {
     $184 = HEAP32[$S>>2]|0;
     $185 = HEAP32[$175>>2]|0;
     HEAP32[$vararg_buffer62>>2] = $185;
     $vararg_ptr65 = (($vararg_buffer62) + 4|0);
     HEAP32[$vararg_ptr65>>2] = 3840;
     (_luaO_pushfstring($184,3888,$vararg_buffer62)|0);
     $186 = HEAP32[$S>>2]|0;
     _luaD_throw($186,3);
    }
    $187 = HEAP8[$x$i1$i26>>0]|0;
    $188 = $187 << 24 >> 24;
    if ((($188|0) == 0)) {
     $189 = ((($180) + ($i$1$i41<<4)|0) + 8|0);
     HEAP32[$189>>2] = 0;
    } else if ((($188|0) == 1)) {
     $190 = HEAP32[$27>>2]|0;
     $191 = (_luaZ_read($190,$x$i3$i,1)|0);
     $192 = ($191|0)==(0);
     if (!($192)) {
      $193 = HEAP32[$S>>2]|0;
      $194 = HEAP32[$175>>2]|0;
      HEAP32[$vararg_buffer66>>2] = $194;
      $vararg_ptr69 = (($vararg_buffer66) + 4|0);
      HEAP32[$vararg_ptr69>>2] = 3840;
      (_luaO_pushfstring($193,3888,$vararg_buffer66)|0);
      $195 = HEAP32[$S>>2]|0;
      _luaD_throw($195,3);
     }
     $196 = HEAP8[$x$i3$i>>0]|0;
     $197 = ($196<<24>>24)!=(0);
     $198 = $197&1;
     HEAP32[$179>>2] = $198;
     $199 = ((($180) + ($i$1$i41<<4)|0) + 8|0);
     HEAP32[$199>>2] = 1;
    } else if ((($188|0) == 3)) {
     $200 = HEAP32[$27>>2]|0;
     $201 = (_luaZ_read($200,$x$i6$i,8)|0);
     $202 = ($201|0)==(0);
     if (!($202)) {
      $203 = HEAP32[$S>>2]|0;
      $204 = HEAP32[$175>>2]|0;
      HEAP32[$vararg_buffer70>>2] = $204;
      $vararg_ptr73 = (($vararg_buffer70) + 4|0);
      HEAP32[$vararg_ptr73>>2] = 3840;
      (_luaO_pushfstring($203,3888,$vararg_buffer70)|0);
      $205 = HEAP32[$S>>2]|0;
      _luaD_throw($205,3);
     }
     $206 = +HEAPF64[$x$i6$i>>3];
     HEAPF64[$179>>3] = $206;
     $207 = ((($180) + ($i$1$i41<<4)|0) + 8|0);
     HEAP32[$207>>2] = 3;
    } else if ((($188|0) == 4)) {
     $208 = HEAP32[$27>>2]|0;
     $209 = (_luaZ_read($208,$size$i$i25,4)|0);
     $210 = ($209|0)==(0);
     if (!($210)) {
      $211 = HEAP32[$S>>2]|0;
      $212 = HEAP32[$175>>2]|0;
      HEAP32[$vararg_buffer74>>2] = $212;
      $vararg_ptr77 = (($vararg_buffer74) + 4|0);
      HEAP32[$vararg_ptr77>>2] = 3840;
      (_luaO_pushfstring($211,3888,$vararg_buffer74)|0);
      $213 = HEAP32[$S>>2]|0;
      _luaD_throw($213,3);
     }
     $214 = HEAP32[$size$i$i25>>2]|0;
     $215 = ($214|0)==(0);
     if ($215) {
      $$0$i$i31 = 0;
     } else {
      $216 = HEAP32[$S>>2]|0;
      $217 = HEAP32[$176>>2]|0;
      $218 = (_luaZ_openspace($216,$217,$214)|0);
      $219 = HEAP32[$size$i$i25>>2]|0;
      $220 = HEAP32[$27>>2]|0;
      $221 = (_luaZ_read($220,$218,$219)|0);
      $222 = ($221|0)==(0);
      if (!($222)) {
       $223 = HEAP32[$S>>2]|0;
       $224 = HEAP32[$175>>2]|0;
       HEAP32[$vararg_buffer78>>2] = $224;
       $vararg_ptr81 = (($vararg_buffer78) + 4|0);
       HEAP32[$vararg_ptr81>>2] = 3840;
       (_luaO_pushfstring($223,3888,$vararg_buffer78)|0);
       $225 = HEAP32[$S>>2]|0;
       _luaD_throw($225,3);
      }
      $226 = HEAP32[$S>>2]|0;
      $227 = HEAP32[$size$i$i25>>2]|0;
      $228 = (($227) + -1)|0;
      $229 = (_luaS_newlstr($226,$218,$228)|0);
      $$0$i$i31 = $229;
     }
     HEAP32[$179>>2] = $$0$i$i31;
     $230 = ((($180) + ($i$1$i41<<4)|0) + 8|0);
     HEAP32[$230>>2] = 4;
    } else {
     $231 = HEAP32[$S>>2]|0;
     $232 = HEAP32[$175>>2]|0;
     HEAP32[$vararg_buffer82>>2] = $232;
     $vararg_ptr85 = (($vararg_buffer82) + 4|0);
     HEAP32[$vararg_ptr85>>2] = 3856;
     (_luaO_pushfstring($231,3888,$vararg_buffer82)|0);
     $233 = HEAP32[$S>>2]|0;
     _luaD_throw($233,3);
    }
    $234 = (($i$1$i41) + 1)|0;
    $exitcond48 = ($234|0)==($165|0);
    if ($exitcond48) {
     break L63;
    }
    $$pre55 = HEAP32[$171>>2]|0;
    $180 = $$pre55;$i$1$i41 = $234;
   }
  }
 } while(0);
 $235 = HEAP32[$27>>2]|0;
 $236 = (_luaZ_read($235,$x$i8$i,4)|0);
 $237 = ($236|0)==(0);
 if (!($237)) {
  $238 = HEAP32[$S>>2]|0;
  $239 = (($S) + 12|0);
  $240 = HEAP32[$239>>2]|0;
  HEAP32[$vararg_buffer86>>2] = $240;
  $vararg_ptr89 = (($vararg_buffer86) + 4|0);
  HEAP32[$vararg_ptr89>>2] = 3840;
  (_luaO_pushfstring($238,3888,$vararg_buffer86)|0);
  $241 = HEAP32[$S>>2]|0;
  _luaD_throw($241,3);
 }
 $242 = HEAP32[$x$i8$i>>2]|0;
 $243 = ($242|0)<(0);
 if ($243) {
  $244 = HEAP32[$S>>2]|0;
  $245 = (($S) + 12|0);
  $246 = HEAP32[$245>>2]|0;
  HEAP32[$vararg_buffer90>>2] = $246;
  $vararg_ptr93 = (($vararg_buffer90) + 4|0);
  HEAP32[$vararg_ptr93>>2] = 3872;
  (_luaO_pushfstring($244,3888,$vararg_buffer90)|0);
  $247 = HEAP32[$S>>2]|0;
  _luaD_throw($247,3);
  $$pre$i10$i = HEAP32[$x$i8$i>>2]|0;
  $249 = $$pre$i10$i;
 } else {
  $249 = $242;
 }
 $248 = (($249) + 1)|0;
 $250 = ($248>>>0)<(1073741824);
 $251 = HEAP32[$S>>2]|0;
 if ($250) {
  $252 = $249 << 2;
  $253 = (_luaM_realloc_($251,0,0,$252)|0);
  $256 = $253;
 } else {
  $254 = (_luaM_toobig($251)|0);
  $256 = $254;
 }
 $255 = (($9) + 16|0);
 HEAP32[$255>>2] = $256;
 $257 = (($9) + 52|0);
 HEAP32[$257>>2] = $249;
 $258 = ($249|0)>(0);
 do {
  if ($258) {
   $260 = $256;$i$2$i38 = 0;
   while(1) {
    $259 = (($260) + ($i$2$i38<<2)|0);
    HEAP32[$259>>2] = 0;
    $261 = (($i$2$i38) + 1)|0;
    $exitcond47 = ($261|0)==($249|0);
    if ($exitcond47) {
     break;
    }
    $$pre53 = HEAP32[$255>>2]|0;
    $260 = $$pre53;$i$2$i38 = $261;
   }
   if ($258) {
    $i$3$i37 = 0;
   } else {
    break;
   }
   while(1) {
    $262 = HEAP32[$53>>2]|0;
    $263 = (_LoadFunction($S,$262)|0);
    $264 = HEAP32[$255>>2]|0;
    $265 = (($264) + ($i$3$i37<<2)|0);
    HEAP32[$265>>2] = $263;
    $266 = (($i$3$i37) + 1)|0;
    $exitcond = ($266|0)==($249|0);
    if ($exitcond) {
     break;
    } else {
     $i$3$i37 = $266;
    }
   }
  }
 } while(0);
 $267 = HEAP32[$27>>2]|0;
 $268 = (_luaZ_read($267,$x$i$i18,4)|0);
 $269 = ($268|0)==(0);
 if (!($269)) {
  $270 = HEAP32[$S>>2]|0;
  $271 = (($S) + 12|0);
  $272 = HEAP32[$271>>2]|0;
  HEAP32[$vararg_buffer94>>2] = $272;
  $vararg_ptr97 = (($vararg_buffer94) + 4|0);
  HEAP32[$vararg_ptr97>>2] = 3840;
  (_luaO_pushfstring($270,3888,$vararg_buffer94)|0);
  $273 = HEAP32[$S>>2]|0;
  _luaD_throw($273,3);
 }
 $274 = HEAP32[$x$i$i18>>2]|0;
 $275 = ($274|0)<(0);
 if ($275) {
  $276 = HEAP32[$S>>2]|0;
  $277 = (($S) + 12|0);
  $278 = HEAP32[$277>>2]|0;
  HEAP32[$vararg_buffer98>>2] = $278;
  $vararg_ptr101 = (($vararg_buffer98) + 4|0);
  HEAP32[$vararg_ptr101>>2] = 3872;
  (_luaO_pushfstring($276,3888,$vararg_buffer98)|0);
  $279 = HEAP32[$S>>2]|0;
  _luaD_throw($279,3);
  $$pre$i$i20 = HEAP32[$x$i$i18>>2]|0;
  $281 = $$pre$i$i20;
 } else {
  $281 = $274;
 }
 $280 = (($281) + 1)|0;
 $282 = ($280>>>0)<(1073741824);
 $283 = HEAP32[$S>>2]|0;
 if ($282) {
  $284 = $281 << 2;
  $285 = (_luaM_realloc_($283,0,0,$284)|0);
  $$pre$phi$i22Z2D = $284;$288 = $285;
 } else {
  $286 = (_luaM_toobig($283)|0);
  $$pre39$i = $281 << 2;
  $$pre$phi$i22Z2D = $$pre39$i;$288 = $286;
 }
 $287 = (($9) + 20|0);
 HEAP32[$287>>2] = $288;
 $289 = (($9) + 48|0);
 HEAP32[$289>>2] = $281;
 $290 = HEAP32[$27>>2]|0;
 $291 = (_luaZ_read($290,$288,$$pre$phi$i22Z2D)|0);
 $292 = ($291|0)==(0);
 if (!($292)) {
  $293 = HEAP32[$S>>2]|0;
  $294 = (($S) + 12|0);
  $295 = HEAP32[$294>>2]|0;
  HEAP32[$vararg_buffer102>>2] = $295;
  $vararg_ptr105 = (($vararg_buffer102) + 4|0);
  HEAP32[$vararg_ptr105>>2] = 3840;
  (_luaO_pushfstring($293,3888,$vararg_buffer102)|0);
  $296 = HEAP32[$S>>2]|0;
  _luaD_throw($296,3);
 }
 $297 = HEAP32[$27>>2]|0;
 $298 = (_luaZ_read($297,$x$i1$i,4)|0);
 $299 = ($298|0)==(0);
 if (!($299)) {
  $300 = HEAP32[$S>>2]|0;
  $301 = (($S) + 12|0);
  $302 = HEAP32[$301>>2]|0;
  HEAP32[$vararg_buffer106>>2] = $302;
  $vararg_ptr109 = (($vararg_buffer106) + 4|0);
  HEAP32[$vararg_ptr109>>2] = 3840;
  (_luaO_pushfstring($300,3888,$vararg_buffer106)|0);
  $303 = HEAP32[$S>>2]|0;
  _luaD_throw($303,3);
 }
 $304 = HEAP32[$x$i1$i>>2]|0;
 $305 = ($304|0)<(0);
 if ($305) {
  $306 = HEAP32[$S>>2]|0;
  $307 = (($S) + 12|0);
  $308 = HEAP32[$307>>2]|0;
  HEAP32[$vararg_buffer110>>2] = $308;
  $vararg_ptr113 = (($vararg_buffer110) + 4|0);
  HEAP32[$vararg_ptr113>>2] = 3872;
  (_luaO_pushfstring($306,3888,$vararg_buffer110)|0);
  $309 = HEAP32[$S>>2]|0;
  _luaD_throw($309,3);
  $$pre$i3$i = HEAP32[$x$i1$i>>2]|0;
  $311 = $$pre$i3$i;
 } else {
  $311 = $304;
 }
 $310 = (($311) + 1)|0;
 $312 = ($310>>>0)<(357913942);
 $313 = HEAP32[$S>>2]|0;
 if ($312) {
  $314 = ($311*12)|0;
  $315 = (_luaM_realloc_($313,0,0,$314)|0);
  $318 = $315;
 } else {
  $316 = (_luaM_toobig($313)|0);
  $318 = $316;
 }
 $317 = (($9) + 24|0);
 HEAP32[$317>>2] = $318;
 $319 = (($9) + 56|0);
 HEAP32[$319>>2] = $311;
 $320 = ($311|0)>(0);
 if ($320) {
  $i$032$i = 0;
  while(1) {
   $323 = (($318) + (($i$032$i*12)|0)|0);
   HEAP32[$323>>2] = 0;
   $324 = (($i$032$i) + 1)|0;
   $exitcond37$i = ($324|0)==($311|0);
   if ($exitcond37$i) {
    break;
   } else {
    $i$032$i = $324;
   }
  }
  $321 = (($S) + 12|0);
  $322 = (($S) + 8|0);
  $i$129$i = 0;
  while(1) {
   $325 = HEAP32[$27>>2]|0;
   $326 = (_luaZ_read($325,$size$i$i,4)|0);
   $327 = ($326|0)==(0);
   if (!($327)) {
    $328 = HEAP32[$S>>2]|0;
    $329 = HEAP32[$321>>2]|0;
    HEAP32[$vararg_buffer114>>2] = $329;
    $vararg_ptr117 = (($vararg_buffer114) + 4|0);
    HEAP32[$vararg_ptr117>>2] = 3840;
    (_luaO_pushfstring($328,3888,$vararg_buffer114)|0);
    $330 = HEAP32[$S>>2]|0;
    _luaD_throw($330,3);
   }
   $331 = HEAP32[$size$i$i>>2]|0;
   $332 = ($331|0)==(0);
   if ($332) {
    $$0$i$i = 0;
   } else {
    $333 = HEAP32[$S>>2]|0;
    $334 = HEAP32[$322>>2]|0;
    $335 = (_luaZ_openspace($333,$334,$331)|0);
    $336 = HEAP32[$size$i$i>>2]|0;
    $337 = HEAP32[$27>>2]|0;
    $338 = (_luaZ_read($337,$335,$336)|0);
    $339 = ($338|0)==(0);
    if (!($339)) {
     $340 = HEAP32[$S>>2]|0;
     $341 = HEAP32[$321>>2]|0;
     HEAP32[$vararg_buffer118>>2] = $341;
     $vararg_ptr121 = (($vararg_buffer118) + 4|0);
     HEAP32[$vararg_ptr121>>2] = 3840;
     (_luaO_pushfstring($340,3888,$vararg_buffer118)|0);
     $342 = HEAP32[$S>>2]|0;
     _luaD_throw($342,3);
    }
    $343 = HEAP32[$S>>2]|0;
    $344 = HEAP32[$size$i$i>>2]|0;
    $345 = (($344) + -1)|0;
    $346 = (_luaS_newlstr($343,$335,$345)|0);
    $$0$i$i = $346;
   }
   $347 = HEAP32[$317>>2]|0;
   $348 = (($347) + (($i$129$i*12)|0)|0);
   HEAP32[$348>>2] = $$0$i$i;
   $349 = HEAP32[$27>>2]|0;
   $350 = (_luaZ_read($349,$x$i5$i,4)|0);
   $351 = ($350|0)==(0);
   if (!($351)) {
    $352 = HEAP32[$S>>2]|0;
    $353 = HEAP32[$321>>2]|0;
    HEAP32[$vararg_buffer122>>2] = $353;
    $vararg_ptr125 = (($vararg_buffer122) + 4|0);
    HEAP32[$vararg_ptr125>>2] = 3840;
    (_luaO_pushfstring($352,3888,$vararg_buffer122)|0);
    $354 = HEAP32[$S>>2]|0;
    _luaD_throw($354,3);
   }
   $355 = HEAP32[$x$i5$i>>2]|0;
   $356 = ($355|0)<(0);
   if ($356) {
    $357 = HEAP32[$S>>2]|0;
    $358 = HEAP32[$321>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $358;
    $vararg_ptr129 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr129>>2] = 3872;
    (_luaO_pushfstring($357,3888,$vararg_buffer126)|0);
    $359 = HEAP32[$S>>2]|0;
    _luaD_throw($359,3);
    $$pre$i7$i = HEAP32[$x$i5$i>>2]|0;
    $362 = $$pre$i7$i;
   } else {
    $362 = $355;
   }
   $360 = HEAP32[$317>>2]|0;
   $361 = ((($360) + (($i$129$i*12)|0)|0) + 4|0);
   HEAP32[$361>>2] = $362;
   $363 = HEAP32[$27>>2]|0;
   $364 = (_luaZ_read($363,$x$i9$i,4)|0);
   $365 = ($364|0)==(0);
   if (!($365)) {
    $366 = HEAP32[$S>>2]|0;
    $367 = HEAP32[$321>>2]|0;
    HEAP32[$vararg_buffer130>>2] = $367;
    $vararg_ptr133 = (($vararg_buffer130) + 4|0);
    HEAP32[$vararg_ptr133>>2] = 3840;
    (_luaO_pushfstring($366,3888,$vararg_buffer130)|0);
    $368 = HEAP32[$S>>2]|0;
    _luaD_throw($368,3);
   }
   $369 = HEAP32[$x$i9$i>>2]|0;
   $370 = ($369|0)<(0);
   if ($370) {
    $371 = HEAP32[$S>>2]|0;
    $372 = HEAP32[$321>>2]|0;
    HEAP32[$vararg_buffer134>>2] = $372;
    $vararg_ptr137 = (($vararg_buffer134) + 4|0);
    HEAP32[$vararg_ptr137>>2] = 3872;
    (_luaO_pushfstring($371,3888,$vararg_buffer134)|0);
    $373 = HEAP32[$S>>2]|0;
    _luaD_throw($373,3);
    $$pre$i11$i = HEAP32[$x$i9$i>>2]|0;
    $376 = $$pre$i11$i;
   } else {
    $376 = $369;
   }
   $374 = HEAP32[$317>>2]|0;
   $375 = ((($374) + (($i$129$i*12)|0)|0) + 8|0);
   HEAP32[$375>>2] = $376;
   $377 = (($i$129$i) + 1)|0;
   $exitcond36$i = ($377|0)==($311|0);
   if ($exitcond36$i) {
    break;
   } else {
    $i$129$i = $377;
   }
  }
 }
 $378 = HEAP32[$27>>2]|0;
 $379 = (_luaZ_read($378,$x$i13$i,4)|0);
 $380 = ($379|0)==(0);
 if (!($380)) {
  $381 = HEAP32[$S>>2]|0;
  $382 = (($S) + 12|0);
  $383 = HEAP32[$382>>2]|0;
  HEAP32[$vararg_buffer138>>2] = $383;
  $vararg_ptr141 = (($vararg_buffer138) + 4|0);
  HEAP32[$vararg_ptr141>>2] = 3840;
  (_luaO_pushfstring($381,3888,$vararg_buffer138)|0);
  $384 = HEAP32[$S>>2]|0;
  _luaD_throw($384,3);
 }
 $385 = HEAP32[$x$i13$i>>2]|0;
 $386 = ($385|0)<(0);
 if ($386) {
  $387 = HEAP32[$S>>2]|0;
  $388 = (($S) + 12|0);
  $389 = HEAP32[$388>>2]|0;
  HEAP32[$vararg_buffer142>>2] = $389;
  $vararg_ptr145 = (($vararg_buffer142) + 4|0);
  HEAP32[$vararg_ptr145>>2] = 3872;
  (_luaO_pushfstring($387,3888,$vararg_buffer142)|0);
  $390 = HEAP32[$S>>2]|0;
  _luaD_throw($390,3);
  $$pre$i15$i = HEAP32[$x$i13$i>>2]|0;
  $392 = $$pre$i15$i;
 } else {
  $392 = $385;
 }
 $391 = (($392) + 1)|0;
 $393 = ($391>>>0)<(1073741824);
 $394 = HEAP32[$S>>2]|0;
 if ($393) {
  $395 = $392 << 2;
  $396 = (_luaM_realloc_($394,0,0,$395)|0);
  $399 = $396;
 } else {
  $397 = (_luaM_toobig($394)|0);
  $399 = $397;
 }
 $398 = (($9) + 28|0);
 HEAP32[$398>>2] = $399;
 $400 = (($9) + 36|0);
 HEAP32[$400>>2] = $392;
 $401 = ($392|0)>(0);
 if ($401) {
  HEAP32[$399>>2] = 0;
  $exitcond35$i36 = ($392|0)==(1);
  if (!($exitcond35$i36)) {
   $405 = 1;
   while(1) {
    $$pre$i24 = HEAP32[$398>>2]|0;
    $404 = (($$pre$i24) + ($405<<2)|0);
    HEAP32[$404>>2] = 0;
    $406 = (($405) + 1)|0;
    $exitcond35$i = ($406|0)==($392|0);
    if ($exitcond35$i) {
     break;
    } else {
     $405 = $406;
    }
   }
  }
  $402 = (($S) + 8|0);
  $403 = (($S) + 12|0);
  $i$324$i = 0;
  while(1) {
   $407 = HEAP32[$27>>2]|0;
   $408 = (_luaZ_read($407,$size$i17$i,4)|0);
   $409 = ($408|0)==(0);
   if (!($409)) {
    $410 = HEAP32[$S>>2]|0;
    $411 = HEAP32[$403>>2]|0;
    HEAP32[$vararg_buffer146>>2] = $411;
    $vararg_ptr149 = (($vararg_buffer146) + 4|0);
    HEAP32[$vararg_ptr149>>2] = 3840;
    (_luaO_pushfstring($410,3888,$vararg_buffer146)|0);
    $412 = HEAP32[$S>>2]|0;
    _luaD_throw($412,3);
   }
   $413 = HEAP32[$size$i17$i>>2]|0;
   $414 = ($413|0)==(0);
   if ($414) {
    $$0$i18$i = 0;
   } else {
    $415 = HEAP32[$S>>2]|0;
    $416 = HEAP32[$402>>2]|0;
    $417 = (_luaZ_openspace($415,$416,$413)|0);
    $418 = HEAP32[$size$i17$i>>2]|0;
    $419 = HEAP32[$27>>2]|0;
    $420 = (_luaZ_read($419,$417,$418)|0);
    $421 = ($420|0)==(0);
    if (!($421)) {
     $422 = HEAP32[$S>>2]|0;
     $423 = HEAP32[$403>>2]|0;
     HEAP32[$vararg_buffer150>>2] = $423;
     $vararg_ptr153 = (($vararg_buffer150) + 4|0);
     HEAP32[$vararg_ptr153>>2] = 3840;
     (_luaO_pushfstring($422,3888,$vararg_buffer150)|0);
     $424 = HEAP32[$S>>2]|0;
     _luaD_throw($424,3);
    }
    $425 = HEAP32[$S>>2]|0;
    $426 = HEAP32[$size$i17$i>>2]|0;
    $427 = (($426) + -1)|0;
    $428 = (_luaS_newlstr($425,$417,$427)|0);
    $$0$i18$i = $428;
   }
   $429 = HEAP32[$398>>2]|0;
   $430 = (($429) + ($i$324$i<<2)|0);
   HEAP32[$430>>2] = $$0$i18$i;
   $431 = (($i$324$i) + 1)|0;
   $exitcond$i = ($431|0)==($392|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$324$i = $431;
   }
  }
 }
 $432 = (_luaG_checkcode($9)|0);
 $433 = ($432|0)==(0);
 if (!($433)) {
  $438 = HEAP32[$S>>2]|0;
  $439 = (($438) + 8|0);
  $440 = HEAP32[$439>>2]|0;
  $441 = (($440) + -16|0);
  HEAP32[$439>>2] = $441;
  $442 = (($438) + 52|0);
  $443 = HEAP16[$442>>1]|0;
  $444 = (($443) + -1)<<16>>16;
  HEAP16[$442>>1] = $444;
  STACKTOP = sp;return ($9|0);
 }
 $434 = HEAP32[$S>>2]|0;
 $435 = (($S) + 12|0);
 $436 = HEAP32[$435>>2]|0;
 HEAP32[$vararg_buffer154>>2] = $436;
 $vararg_ptr157 = (($vararg_buffer154) + 4|0);
 HEAP32[$vararg_ptr157>>2] = 3824;
 (_luaO_pushfstring($434,3888,$vararg_buffer154)|0);
 $437 = HEAP32[$S>>2]|0;
 _luaD_throw($437,3);
 $438 = HEAP32[$S>>2]|0;
 $439 = (($438) + 8|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = (($440) + -16|0);
 HEAP32[$439>>2] = $441;
 $442 = (($438) + 52|0);
 $443 = HEAP16[$442>>1]|0;
 $444 = (($443) + -1)<<16>>16;
 HEAP16[$442>>1] = $444;
 STACKTOP = sp;return ($9|0);
}
function _luaV_tonumber($obj,$n) {
 $obj = $obj|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $num = sp;
 $0 = (($obj) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 3)) {
  $$0 = $obj;
 } else if ((($1|0) == 4)) {
  $2 = HEAP32[$obj>>2]|0;
  $3 = (($2) + 16|0);
  $4 = (_luaO_str2d($3,$num)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 4;
  } else {
   $6 = +HEAPF64[$num>>3];
   HEAPF64[$n>>3] = $6;
   $7 = (($n) + 8|0);
   HEAP32[$7>>2] = 3;
   $$0 = $n;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaV_tostring($L,$obj) {
 $L = $L|0;
 $obj = $obj|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $s = sp + 8|0;
 $0 = (($obj) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = +HEAPF64[$obj>>3];
 HEAPF64[tempDoublePtr>>3]=$3;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($s,3936,$vararg_buffer)|0);
 $4 = (_strlen(($s|0))|0);
 $5 = (_luaS_newlstr($L,$s,$4)|0);
 HEAP32[$obj>>2] = $5;
 HEAP32[$0>>2] = 4;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_gettable($L,$t,$key,$val) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $val = $val|0;
 var $$07 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $loop$06 = 0, $tm$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($L) + 16|0);
 $$phi$trans$insert = (($t) + 8|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $$07 = $t;$4 = $$pre;$loop$06 = 0;
 while(1) {
  $3 = (($$07) + 8|0);
  $5 = ($4|0)==(5);
  if ($5) {
   $6 = HEAP32[$$07>>2]|0;
   $7 = (_luaH_get($6,$key)|0);
   $8 = (($7) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if (!($10)) {
    label = 8;
    break;
   }
   $11 = (($6) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    label = 8;
    break;
   }
   $14 = (($12) + 6|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 & 1;
   $17 = ($16<<24>>24)==(0);
   if (!($17)) {
    label = 8;
    break;
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + 188|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_luaT_gettm($12,0,$20)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    label = 8;
    break;
   } else {
    $tm$0 = $21;
   }
  } else {
   $35 = (_luaT_gettmbyobj($L,$$07,0)|0);
   $36 = (($35) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    _luaG_typeerror($L,$$07,3944);
    $tm$0 = $35;
   } else {
    $tm$0 = $35;
   }
  }
  $39 = (($tm$0) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(6);
  $1 = (($loop$06) + 1)|0;
  if ($41) {
   label = 12;
   break;
  }
  $2 = ($1|0)<(100);
  if ($2) {
   $$07 = $tm$0;$4 = $40;$loop$06 = $1;
  } else {
   label = 15;
   break;
  }
 }
 if ((label|0) == 8) {
  $23 = $7;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $val;
  $30 = $29;
  HEAP32[$30>>2] = $25;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
  $33 = HEAP32[$8>>2]|0;
  $34 = (($val) + 8|0);
  HEAP32[$34>>2] = $33;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $42 = (($L) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $val;
  $45 = $43;
  $46 = (($44) - ($45))|0;
  $47 = (($L) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $tm$0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = $48;
  $56 = $55;
  HEAP32[$56>>2] = $51;
  $57 = (($55) + 4)|0;
  $58 = $57;
  HEAP32[$58>>2] = $54;
  $59 = HEAP32[$39>>2]|0;
  $60 = (($48) + 8|0);
  HEAP32[$60>>2] = $59;
  $61 = HEAP32[$47>>2]|0;
  $62 = (($61) + 16|0);
  $63 = $$07;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = $62;
  $70 = $69;
  HEAP32[$70>>2] = $65;
  $71 = (($69) + 4)|0;
  $72 = $71;
  HEAP32[$72>>2] = $68;
  $73 = HEAP32[$3>>2]|0;
  $74 = (($61) + 24|0);
  HEAP32[$74>>2] = $73;
  $75 = HEAP32[$47>>2]|0;
  $76 = (($75) + 32|0);
  $77 = $key;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $76;
  $84 = $83;
  HEAP32[$84>>2] = $79;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  $87 = (($key) + 8|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($75) + 40|0);
  HEAP32[$89>>2] = $88;
  $90 = (($L) + 28|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = HEAP32[$47>>2]|0;
  $93 = $91;
  $94 = $92;
  $95 = (($93) - ($94))|0;
  $96 = ($95|0)<(49);
  if ($96) {
   _luaD_growstack($L,3);
   $$pre$i = HEAP32[$47>>2]|0;
   $98 = $$pre$i;
  } else {
   $98 = $92;
  }
  $97 = (($98) + 48|0);
  HEAP32[$47>>2] = $97;
  _luaD_call($L,$98,1);
  $99 = HEAP32[$42>>2]|0;
  $100 = (($99) + ($46)|0);
  $101 = HEAP32[$47>>2]|0;
  $102 = (($101) + -16|0);
  HEAP32[$47>>2] = $102;
  $103 = $102;
  $104 = $103;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($103) + 4)|0;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = $100;
  $110 = $109;
  HEAP32[$110>>2] = $105;
  $111 = (($109) + 4)|0;
  $112 = $111;
  HEAP32[$112>>2] = $108;
  $113 = (($101) + -8|0);
  $114 = HEAP32[$113>>2]|0;
  $$sum$i = (($46) + 8)|0;
  $115 = (($99) + ($$sum$i)|0);
  HEAP32[$115>>2] = $114;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  _luaG_runerror($L,3952,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _luaV_settable($L,$t,$key,$val) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $val = $val|0;
 var $$09 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $loop$08 = 0, $temp = 0, $tm$0 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $temp = sp;
 $0 = (($L) + 16|0);
 $1 = (($temp) + 8|0);
 $$phi$trans$insert = (($t) + 8|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $$09 = $t;$3 = $$pre;$loop$08 = 0;
 while(1) {
  $2 = (($$09) + 8|0);
  $4 = ($3|0)==(5);
  if ($4) {
   $5 = HEAP32[$$09>>2]|0;
   $6 = (_luaH_set($L,$5,$key)|0);
   $7 = (($6) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    label = 7;
    break;
   }
   $10 = (($5) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    label = 7;
    break;
   }
   $13 = (($11) + 6|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 & 2;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    label = 7;
    break;
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = (($17) + 192|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_luaT_gettm($11,1,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    label = 7;
    break;
   } else {
    $tm$0 = $20;
   }
  } else {
   $46 = (_luaT_gettmbyobj($L,$$09,1)|0);
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0);
   if ($49) {
    _luaG_typeerror($L,$$09,3944);
    $tm$0 = $46;
   } else {
    $tm$0 = $46;
   }
  }
  $50 = (($tm$0) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(6);
  if ($52) {
   label = 14;
   break;
  }
  $120 = $tm$0;
  $121 = $120;
  $122 = HEAP32[$121>>2]|0;
  $123 = (($120) + 4)|0;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = $temp;
  $127 = $126;
  HEAP32[$127>>2] = $122;
  $128 = (($126) + 4)|0;
  $129 = $128;
  HEAP32[$129>>2] = $125;
  $130 = HEAP32[$50>>2]|0;
  HEAP32[$1>>2] = $130;
  $131 = (($loop$08) + 1)|0;
  $132 = ($131|0)<(100);
  if ($132) {
   $$09 = $temp;$3 = $130;$loop$08 = $131;
  } else {
   label = 18;
   break;
  }
 }
 if ((label|0) == 7) {
  $22 = $val;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = $6;
  $29 = $28;
  HEAP32[$29>>2] = $24;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $27;
  $32 = (($val) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$7>>2] = $33;
  $34 = (($5) + 6|0);
  HEAP8[$34>>0] = 0;
  $35 = HEAP32[$32>>2]|0;
  $36 = ($35|0)>(3);
  if (!($36)) {
   STACKTOP = sp;return;
  }
  $37 = HEAP32[$val>>2]|0;
  $38 = (($37) + 5|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 & 3;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   STACKTOP = sp;return;
  }
  $42 = (($5) + 5|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 & 4;
  $45 = ($44<<24>>24)==(0);
  if ($45) {
   STACKTOP = sp;return;
  }
  _luaC_barrierback($L,$5);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $53 = (($L) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $tm$0;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = $54;
  $62 = $61;
  HEAP32[$62>>2] = $57;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = $60;
  $65 = HEAP32[$50>>2]|0;
  $66 = (($54) + 8|0);
  HEAP32[$66>>2] = $65;
  $67 = HEAP32[$53>>2]|0;
  $68 = (($67) + 16|0);
  $69 = $$09;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = $68;
  $76 = $75;
  HEAP32[$76>>2] = $71;
  $77 = (($75) + 4)|0;
  $78 = $77;
  HEAP32[$78>>2] = $74;
  $79 = HEAP32[$2>>2]|0;
  $80 = (($67) + 24|0);
  HEAP32[$80>>2] = $79;
  $81 = HEAP32[$53>>2]|0;
  $82 = (($81) + 32|0);
  $83 = $key;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = $82;
  $90 = $89;
  HEAP32[$90>>2] = $85;
  $91 = (($89) + 4)|0;
  $92 = $91;
  HEAP32[$92>>2] = $88;
  $93 = (($key) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($81) + 40|0);
  HEAP32[$95>>2] = $94;
  $96 = HEAP32[$53>>2]|0;
  $97 = (($96) + 48|0);
  $98 = $val;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + 4)|0;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = $97;
  $105 = $104;
  HEAP32[$105>>2] = $100;
  $106 = (($104) + 4)|0;
  $107 = $106;
  HEAP32[$107>>2] = $103;
  $108 = (($val) + 8|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($96) + 56|0);
  HEAP32[$110>>2] = $109;
  $111 = (($L) + 28|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = HEAP32[$53>>2]|0;
  $114 = $112;
  $115 = $113;
  $116 = (($114) - ($115))|0;
  $117 = ($116|0)<(65);
  if ($117) {
   _luaD_growstack($L,4);
   $$pre$i = HEAP32[$53>>2]|0;
   $119 = $$pre$i;
  } else {
   $119 = $113;
  }
  $118 = (($119) + 64|0);
  HEAP32[$53>>2] = $118;
  _luaD_call($L,$119,0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 18) {
  _luaG_runerror($L,3976,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _luaV_lessthan($L,$l,$r) {
 $L = $L|0;
 $l = $l|0;
 $r = $r|0;
 var $$0 = 0, $$0$i = 0, $$lobit = 0, $$pre$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$04$i = 0, $phitmp$i = 0, $r$03$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($l) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($r) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $5 = (_luaG_ordererror($L,$l,$r)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($1|0) == 3)) {
  $6 = +HEAPF64[$l>>3];
  $7 = +HEAPF64[$r>>3];
  $8 = $6 < $7;
  $9 = $8&1;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 } else if ((($1|0) == 4)) {
  $10 = HEAP32[$l>>2]|0;
  $11 = HEAP32[$r>>2]|0;
  $12 = (($10) + 16|0);
  $13 = (($11) + 16|0);
  $14 = (_strcoll($12,$13)|0);
  $15 = ($14|0)==(0);
  L23: do {
   if ($15) {
    $16 = (($11) + 12|0);
    $17 = (($10) + 12|0);
    $18 = HEAP32[$16>>2]|0;
    $19 = HEAP32[$17>>2]|0;
    $l$01$i = $12;$ll$02$i = $19;$lr$04$i = $18;$r$03$i = $13;
    while(1) {
     $20 = (_strlen(($l$01$i|0))|0);
     $21 = ($20|0)==($lr$04$i|0);
     $22 = ($20|0)==($ll$02$i|0);
     if ($21) {
      break;
     }
     if ($22) {
      $$0$i = -1;
      break L23;
     }
     $25 = (($20) + 1)|0;
     $26 = (($l$01$i) + ($25)|0);
     $27 = (($ll$02$i) - ($25))|0;
     $28 = (($r$03$i) + ($25)|0);
     $29 = (($lr$04$i) - ($25))|0;
     $30 = (_strcoll($26,$28)|0);
     $31 = ($30|0)==(0);
     if ($31) {
      $l$01$i = $26;$ll$02$i = $27;$lr$04$i = $29;$r$03$i = $28;
     } else {
      $$0$i = $30;
      break L23;
     }
    }
    $23 = $22&1;
    $24 = $23 ^ 1;
    $$0$i = $24;
   } else {
    $$0$i = $14;
   }
  } while(0);
  $$lobit = $$0$i >>> 31;
  $$0 = $$lobit;
  STACKTOP = sp;return ($$0|0);
 } else {
  $32 = (_luaT_gettmbyobj($L,$l,13)|0);
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if (!($35)) {
   $36 = (_luaT_gettmbyobj($L,$r,13)|0);
   $37 = (_luaO_rawequalObj($32,$36)|0);
   $38 = ($37|0)==(0);
   if (!($38)) {
    $39 = (($L) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($L) + 32|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $40;
    $44 = $42;
    $45 = (($43) - ($44))|0;
    $46 = $32;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (($46) + 4)|0;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = $40;
    $53 = $52;
    HEAP32[$53>>2] = $48;
    $54 = (($52) + 4)|0;
    $55 = $54;
    HEAP32[$55>>2] = $51;
    $56 = HEAP32[$33>>2]|0;
    $57 = (($40) + 8|0);
    HEAP32[$57>>2] = $56;
    $58 = HEAP32[$39>>2]|0;
    $59 = (($58) + 16|0);
    $60 = $l;
    $61 = $60;
    $62 = HEAP32[$61>>2]|0;
    $63 = (($60) + 4)|0;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = $59;
    $67 = $66;
    HEAP32[$67>>2] = $62;
    $68 = (($66) + 4)|0;
    $69 = $68;
    HEAP32[$69>>2] = $65;
    $70 = HEAP32[$0>>2]|0;
    $71 = (($58) + 24|0);
    HEAP32[$71>>2] = $70;
    $72 = HEAP32[$39>>2]|0;
    $73 = (($72) + 32|0);
    $74 = $r;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 4)|0;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = $73;
    $81 = $80;
    HEAP32[$81>>2] = $76;
    $82 = (($80) + 4)|0;
    $83 = $82;
    HEAP32[$83>>2] = $79;
    $84 = HEAP32[$2>>2]|0;
    $85 = (($72) + 40|0);
    HEAP32[$85>>2] = $84;
    $86 = (($L) + 28|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = HEAP32[$39>>2]|0;
    $89 = $87;
    $90 = $88;
    $91 = (($89) - ($90))|0;
    $92 = ($91|0)<(49);
    if ($92) {
     _luaD_growstack($L,3);
     $$pre$i = HEAP32[$39>>2]|0;
     $94 = $$pre$i;
    } else {
     $94 = $88;
    }
    $93 = (($94) + 48|0);
    HEAP32[$39>>2] = $93;
    _luaD_call($L,$94,1);
    $95 = HEAP32[$41>>2]|0;
    $96 = (($95) + ($45)|0);
    $97 = HEAP32[$39>>2]|0;
    $98 = (($97) + -16|0);
    HEAP32[$39>>2] = $98;
    $99 = $98;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($99) + 4)|0;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = $96;
    $106 = $105;
    HEAP32[$106>>2] = $101;
    $107 = (($105) + 4)|0;
    $108 = $107;
    HEAP32[$108>>2] = $104;
    $109 = (($97) + -8|0);
    $110 = HEAP32[$109>>2]|0;
    $$sum$i = (($45) + 8)|0;
    $111 = (($95) + ($$sum$i)|0);
    HEAP32[$111>>2] = $110;
    $112 = HEAP32[$39>>2]|0;
    $113 = (($112) + 8|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==(0);
    if ($115) {
     $119 = 0;
    } else {
     $116 = ($114|0)==(1);
     if ($116) {
      $117 = HEAP32[$112>>2]|0;
      $phitmp$i = ($117|0)!=(0);
      $119 = $phitmp$i;
     } else {
      $119 = 1;
     }
    }
    $118 = $119&1;
    $$0 = $118;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $120 = (_luaG_ordererror($L,$l,$r)|0);
  $$0 = $120;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaV_equalval($L,$t1,$t2) {
 $L = $L|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $$0 = 0, $$pre$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $tm$0 = 0, $tm$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 1:  {
  $6 = HEAP32[$t1>>2]|0;
  $7 = HEAP32[$t2>>2]|0;
  $8 = ($6|0)==($7|0);
  $9 = $8&1;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $10 = HEAP32[$t1>>2]|0;
  $11 = HEAP32[$t2>>2]|0;
  $12 = ($10|0)==($11|0);
  $13 = $12&1;
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 5:  {
  $45 = HEAP32[$t1>>2]|0;
  $46 = HEAP32[$t2>>2]|0;
  $47 = ($45|0)==($46|0);
  if ($47) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $48 = (($45) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($49|0)==(0|0);
  if ($52) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $53 = (($49) + 6|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 & 16;
  $56 = ($55<<24>>24)==(0);
  if (!($56)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $57 = (($L) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 204|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_luaT_gettm($49,4,$60)|0);
  $62 = ($61|0)==(0|0);
  if ($62) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $63 = ($49|0)==($51|0);
  if ($63) {
   $tm$07 = $61;
  } else {
   $64 = ($51|0)==(0|0);
   if ($64) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $65 = (($51) + 6|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66 & 16;
   $68 = ($67<<24>>24)==(0);
   if (!($68)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $69 = HEAP32[$57>>2]|0;
   $70 = (($69) + 204|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (_luaT_gettm($51,4,$71)|0);
   $73 = ($72|0)==(0|0);
   if ($73) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $74 = (_luaO_rawequalObj($61,$72)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $tm$0 = $61;
    label = 24;
   }
  }
  break;
 }
 case 3:  {
  $2 = +HEAPF64[$t1>>3];
  $3 = +HEAPF64[$t2>>3];
  $4 = $2 == $3;
  $5 = $4&1;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 7:  {
  $14 = HEAP32[$t1>>2]|0;
  $15 = HEAP32[$t2>>2]|0;
  $16 = ($14|0)==($15|0);
  if ($16) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $17 = (($14) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18|0)==(0|0);
  if ($21) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $22 = (($18) + 6|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 & 16;
  $25 = ($24<<24>>24)==(0);
  if (!($25)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $26 = (($L) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 204|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_luaT_gettm($18,4,$29)|0);
  $31 = ($30|0)==(0|0);
  if ($31) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $32 = ($18|0)==($20|0);
  if ($32) {
   $tm$07 = $30;
  } else {
   $33 = ($20|0)==(0|0);
   if ($33) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = (($20) + 6|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 & 16;
   $37 = ($36<<24>>24)==(0);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$26>>2]|0;
   $39 = (($38) + 204|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_luaT_gettm($20,4,$40)|0);
   $42 = ($41|0)==(0|0);
   if ($42) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (_luaO_rawequalObj($30,$41)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $tm$0 = $30;
    label = 24;
   }
  }
  break;
 }
 case 0:  {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $76 = HEAP32[$t1>>2]|0;
  $77 = HEAP32[$t2>>2]|0;
  $78 = ($76|0)==($77|0);
  $79 = $78&1;
  $$0 = $79;
  STACKTOP = sp;return ($$0|0);
 }
 }
 if ((label|0) == 24) {
  $80 = ($tm$0|0)==(0|0);
  if ($80) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $tm$07 = $tm$0;
  }
 }
 $81 = (($L) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($L) + 32|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $82;
 $86 = $84;
 $87 = (($85) - ($86))|0;
 $88 = $tm$07;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = $82;
 $95 = $94;
 HEAP32[$95>>2] = $90;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP32[$97>>2] = $93;
 $98 = (($tm$07) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($82) + 8|0);
 HEAP32[$100>>2] = $99;
 $101 = HEAP32[$81>>2]|0;
 $102 = (($101) + 16|0);
 $103 = $t1;
 $104 = $103;
 $105 = HEAP32[$104>>2]|0;
 $106 = (($103) + 4)|0;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = $102;
 $110 = $109;
 HEAP32[$110>>2] = $105;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $108;
 $113 = HEAP32[$0>>2]|0;
 $114 = (($101) + 24|0);
 HEAP32[$114>>2] = $113;
 $115 = HEAP32[$81>>2]|0;
 $116 = (($115) + 32|0);
 $117 = $t2;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = (($117) + 4)|0;
 $121 = $120;
 $122 = HEAP32[$121>>2]|0;
 $123 = $116;
 $124 = $123;
 HEAP32[$124>>2] = $119;
 $125 = (($123) + 4)|0;
 $126 = $125;
 HEAP32[$126>>2] = $122;
 $127 = (($t2) + 8|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($115) + 40|0);
 HEAP32[$129>>2] = $128;
 $130 = (($L) + 28|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = HEAP32[$81>>2]|0;
 $133 = $131;
 $134 = $132;
 $135 = (($133) - ($134))|0;
 $136 = ($135|0)<(49);
 if ($136) {
  _luaD_growstack($L,3);
  $$pre$i = HEAP32[$81>>2]|0;
  $138 = $$pre$i;
 } else {
  $138 = $132;
 }
 $137 = (($138) + 48|0);
 HEAP32[$81>>2] = $137;
 _luaD_call($L,$138,1);
 $139 = HEAP32[$83>>2]|0;
 $140 = (($139) + ($87)|0);
 $141 = HEAP32[$81>>2]|0;
 $142 = (($141) + -16|0);
 HEAP32[$81>>2] = $142;
 $143 = $142;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = (($143) + 4)|0;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = $140;
 $150 = $149;
 HEAP32[$150>>2] = $145;
 $151 = (($149) + 4)|0;
 $152 = $151;
 HEAP32[$152>>2] = $148;
 $153 = (($141) + -8|0);
 $154 = HEAP32[$153>>2]|0;
 $$sum$i = (($87) + 8)|0;
 $155 = (($139) + ($$sum$i)|0);
 HEAP32[$155>>2] = $154;
 $156 = HEAP32[$81>>2]|0;
 $157 = (($156) + 8|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ($158|0)==(0);
 if ($159) {
  $163 = 0;
 } else {
  $160 = ($158|0)==(1);
  if ($160) {
   $161 = HEAP32[$156>>2]|0;
   $phitmp = ($161|0)!=(0);
   $163 = $phitmp;
  } else {
   $163 = 1;
  }
 }
 $162 = $163&1;
 $$0 = $162;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_concat($L,$total,$last) {
 $L = $L|0;
 $total = $total|0;
 $last = $last|0;
 var $$0 = 0, $$01 = 0, $$off = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$phi31Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum2 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$021 = 0, $n$0$lcssa = 0, $n$018 = 0;
 var $n$1 = 0, $s$i = 0, $switch = 0, $tl$0$lcssa = 0, $tl$017 = 0, $tl$1$lcssa = 0, $tl$120 = 0, $tm$01$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $s$i = sp + 32|0;
 $0 = (($L) + 12|0);
 $1 = (($L) + 16|0);
 $2 = (($L) + 32|0);
 $3 = (($L) + 8|0);
 $4 = (($L) + 28|0);
 $$0 = $total;$$01 = $last;
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $$sum = (($$01) + 1)|0;
  $$sum2 = (($$01) + -1)|0;
  $6 = (($5) + ($$sum2<<4)|0);
  $7 = ((($5) + ($$sum2<<4)|0) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $$off = (($8) + -3)|0;
  $switch = ($$off>>>0)<(2);
  $9 = (($5) + ($$01<<4)|0);
  do {
   if ($switch) {
    $10 = ((($5) + ($$01<<4)|0) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(4);
    if ($12) {
     $$pre$phiZ2D = $9;
    } else {
     $13 = ($11|0)==(3);
     if (!($13)) {
      label = 7;
      break;
     }
     $14 = +HEAPF64[$9>>3];
     HEAPF64[tempDoublePtr>>3]=$14;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_sprintf($s$i,3936,$vararg_buffer)|0);
     $15 = (_strlen(($s$i|0))|0);
     $16 = (_luaS_newlstr($L,$s$i,$15)|0);
     HEAP32[$9>>2] = $16;
     HEAP32[$10>>2] = 4;
     $$pre$phiZ2D = $9;
    }
    $95 = HEAP32[$$pre$phiZ2D>>2]|0;
    $96 = (($95) + 12|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0);
    if ($98) {
     $100 = HEAP32[$7>>2]|0;
     $101 = ($100|0)==(4);
     if ($101) {
      $n$1 = 2;
      break;
     }
     $102 = ($100|0)==(3);
     if (!($102)) {
      $n$1 = 2;
      break;
     }
     $103 = +HEAPF64[$6>>3];
     HEAPF64[tempDoublePtr>>3]=$103;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_sprintf($s$i,3936,$vararg_buffer1)|0);
     $104 = (_strlen(($s$i|0))|0);
     $105 = (_luaS_newlstr($L,$s$i,$104)|0);
     HEAP32[$6>>2] = $105;
     HEAP32[$7>>2] = 4;
     $n$1 = 2;
     break;
    }
    $99 = ($$0|0)>(1);
    L15: do {
     if ($99) {
      $n$018 = 1;$tl$017 = $97;
      while(1) {
       $$sum7 = (($$sum) - ($n$018))|0;
       $$sum8 = (($$sum7) + -1)|0;
       $106 = (($5) + ($$sum8<<4)|0);
       $107 = ((($5) + ($$sum8<<4)|0) + 8|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ($108|0)==(4);
       if ($109) {
        $$pre$phi31Z2D = $106;
       } else {
        $110 = ($108|0)==(3);
        if (!($110)) {
         $n$0$lcssa = $n$018;$tl$0$lcssa = $tl$017;
         break L15;
        }
        $111 = +HEAPF64[$106>>3];
        HEAPF64[tempDoublePtr>>3]=$111;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2];
        (_sprintf($s$i,3936,$vararg_buffer4)|0);
        $112 = (_strlen(($s$i|0))|0);
        $113 = (_luaS_newlstr($L,$s$i,$112)|0);
        HEAP32[$106>>2] = $113;
        HEAP32[$107>>2] = 4;
        $$pre$phi31Z2D = $106;
       }
       $114 = HEAP32[$$pre$phi31Z2D>>2]|0;
       $115 = (($114) + 12|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = (-3 - ($tl$017))|0;
       $118 = ($116>>>0)<($117>>>0);
       if (!($118)) {
        _luaG_runerror($L,4000,$vararg_buffer7);
       }
       $119 = (($116) + ($tl$017))|0;
       $120 = (($n$018) + 1)|0;
       $121 = ($120|0)<($$0|0);
       if ($121) {
        $n$018 = $120;$tl$017 = $119;
       } else {
        $n$0$lcssa = $120;$tl$0$lcssa = $119;
        break;
       }
      }
     } else {
      $n$0$lcssa = 1;$tl$0$lcssa = $97;
     }
    } while(0);
    $122 = HEAP32[$1>>2]|0;
    $123 = (($122) + 52|0);
    $124 = (_luaZ_openspace($L,$123,$tl$0$lcssa)|0);
    $125 = ($n$0$lcssa|0)>(0);
    if ($125) {
     $i$021 = $n$0$lcssa;$tl$120 = 0;
     while(1) {
      $$sum6 = (($$sum) - ($i$021))|0;
      $126 = (($5) + ($$sum6<<4)|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = (($127) + 12|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (($124) + ($tl$120)|0);
      $131 = (($127) + 16|0);
      _memcpy(($130|0),($131|0),($129|0))|0;
      $132 = (($129) + ($tl$120))|0;
      $133 = (($i$021) + -1)|0;
      $134 = ($133|0)>(0);
      if ($134) {
       $i$021 = $133;$tl$120 = $132;
      } else {
       $tl$1$lcssa = $132;
       break;
      }
     }
    } else {
     $tl$1$lcssa = 0;
    }
    $$sum5 = (($$sum) - ($n$0$lcssa))|0;
    $135 = (($5) + ($$sum5<<4)|0);
    $136 = (_luaS_newlstr($L,$124,$tl$1$lcssa)|0);
    HEAP32[$135>>2] = $136;
    $137 = ((($5) + ($$sum5<<4)|0) + 8|0);
    HEAP32[$137>>2] = 4;
    $n$1 = $n$0$lcssa;
   } else {
    label = 7;
   }
  } while(0);
  do {
   if ((label|0) == 7) {
    label = 0;
    $17 = (_luaT_gettmbyobj($L,$6,15)|0);
    $18 = (($17) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = (_luaT_gettmbyobj($L,$9,15)|0);
     $$phi$trans$insert$i = (($21) + 8|0);
     $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
     $22 = ($$pre$i|0)==(0);
     if ($22) {
      _luaG_concaterror($L,$6,$9);
      $n$1 = 2;
      break;
     } else {
      $tm$01$i = $21;
     }
    } else {
     $tm$01$i = $17;
    }
    $23 = HEAP32[$2>>2]|0;
    $24 = $6;
    $25 = $23;
    $26 = (($24) - ($25))|0;
    $27 = HEAP32[$3>>2]|0;
    $28 = $tm$01$i;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = $27;
    $35 = $34;
    HEAP32[$35>>2] = $30;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = $33;
    $38 = (($tm$01$i) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($27) + 8|0);
    HEAP32[$40>>2] = $39;
    $41 = HEAP32[$3>>2]|0;
    $42 = (($41) + 16|0);
    $43 = $6;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = $42;
    $50 = $49;
    HEAP32[$50>>2] = $45;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $48;
    $53 = HEAP32[$7>>2]|0;
    $54 = (($41) + 24|0);
    HEAP32[$54>>2] = $53;
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + 32|0);
    $57 = $9;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = (($57) + 4)|0;
    $61 = $60;
    $62 = HEAP32[$61>>2]|0;
    $63 = $56;
    $64 = $63;
    HEAP32[$64>>2] = $59;
    $65 = (($63) + 4)|0;
    $66 = $65;
    HEAP32[$66>>2] = $62;
    $67 = ((($5) + ($$01<<4)|0) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($55) + 40|0);
    HEAP32[$69>>2] = $68;
    $70 = HEAP32[$4>>2]|0;
    $71 = HEAP32[$3>>2]|0;
    $72 = $70;
    $73 = $71;
    $74 = (($72) - ($73))|0;
    $75 = ($74|0)<(49);
    if ($75) {
     _luaD_growstack($L,3);
     $$pre$i10 = HEAP32[$3>>2]|0;
     $77 = $$pre$i10;
    } else {
     $77 = $71;
    }
    $76 = (($77) + 48|0);
    HEAP32[$3>>2] = $76;
    _luaD_call($L,$77,1);
    $78 = HEAP32[$2>>2]|0;
    $79 = (($78) + ($26)|0);
    $80 = HEAP32[$3>>2]|0;
    $81 = (($80) + -16|0);
    HEAP32[$3>>2] = $81;
    $82 = $81;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($82) + 4)|0;
    $86 = $85;
    $87 = HEAP32[$86>>2]|0;
    $88 = $79;
    $89 = $88;
    HEAP32[$89>>2] = $84;
    $90 = (($88) + 4)|0;
    $91 = $90;
    HEAP32[$91>>2] = $87;
    $92 = (($80) + -8|0);
    $93 = HEAP32[$92>>2]|0;
    $$sum$i = (($26) + 8)|0;
    $94 = (($78) + ($$sum$i)|0);
    HEAP32[$94>>2] = $93;
    $n$1 = 2;
   }
  } while(0);
  $138 = (($n$1) + -1)|0;
  $139 = (($$0) - ($138))|0;
  $140 = (($$01) - ($138))|0;
  $141 = ($139|0)>(1);
  if ($141) {
   $$0 = $139;$$01 = $140;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _luaV_execute($L,$nexeccalls) {
 $L = $L|0;
 $nexeccalls = $nexeccalls|0;
 var $$ = 0, $$0$i$i = 0, $$0$i103175 = 0, $$0$i118179 = 0, $$0$i133183 = 0, $$0$i49 = 0, $$0$i58163 = 0, $$0$i73167 = 0, $$0$i88171 = 0, $$0$ph = 0, $$lcssa234 = 0, $$not = 0, $$not317 = 0, $$op = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert$i108 = 0, $$phi$trans$insert$i123 = 0, $$phi$trans$insert$i138 = 0, $$phi$trans$insert$i153 = 0, $$phi$trans$insert$i63 = 0;
 var $$phi$trans$insert$i78 = 0, $$phi$trans$insert$i93 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i109 = 0, $$pre$i114 = 0, $$pre$i124 = 0, $$pre$i129 = 0, $$pre$i139 = 0, $$pre$i144 = 0, $$pre$i154 = 0, $$pre$i159 = 0, $$pre$i48 = 0, $$pre$i5$i = 0, $$pre$i64 = 0, $$pre$i69 = 0, $$pre$i79 = 0, $$pre$i84 = 0, $$pre$i94 = 0;
 var $$pre$i99 = 0, $$pre286 = 0, $$pre287 = 0.0, $$pre289 = 0.0, $$pre291 = 0.0, $$pre293 = 0.0, $$pre295 = 0.0, $$pre297 = 0.0, $$pre298 = 0, $$pre300 = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum$i100 = 0, $$sum$i115 = 0, $$sum$i130 = 0, $$sum$i145 = 0, $$sum$i160 = 0, $$sum$i6$i = 0, $$sum$i70 = 0;
 var $$sum$i85 = 0, $$sum1 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0;
 var $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum301 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0.0, $1005 = 0.0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
 var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
 var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0.0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0.0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
 var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
 var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
 var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0;
 var $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0;
 var $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0;
 var $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0;
 var $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0;
 var $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0;
 var $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0;
 var $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0.0, $1289 = 0.0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0;
 var $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0;
 var $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0;
 var $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0;
 var $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0;
 var $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0;
 var $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0;
 var $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0;
 var $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0;
 var $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0;
 var $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0;
 var $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0;
 var $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0;
 var $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0;
 var $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0;
 var $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0;
 var $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0;
 var $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0;
 var $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0.0, $1614 = 0.0, $1615 = 0.0, $1616 = 0, $1617 = 0.0, $1618 = 0, $1619 = 0;
 var $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0.0, $1636 = 0, $1637 = 0;
 var $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0.0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0.0, $1653 = 0.0, $1654 = 0.0, $1655 = 0.0;
 var $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0;
 var $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0;
 var $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0;
 var $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0;
 var $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0;
 var $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0;
 var $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0;
 var $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0;
 var $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0;
 var $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0;
 var $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0;
 var $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0.0;
 var $514 = 0.0, $515 = 0.0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0.0;
 var $532 = 0.0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0.0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0.0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0.0, $776 = 0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0.0, $886 = 0.0, $887 = 0.0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0.0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0.0, $901 = 0, $902 = 0.0, $903 = 0.0, $904 = 0.0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0.0, $991 = 0.0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0.0, $998 = 0, $999 = 0, $aux$0235 = 0, $b79$0 = 0;
 var $base$0 = 0, $base$1 = 0, $base$2 = 0, $brmerge = 0, $c75$0 = 0, $cond = 0, $cond307 = 0, $cond308 = 0, $cond309 = 0, $cond310 = 0, $cond311 = 0, $cond312 = 0, $cond313 = 0, $cond314 = 0, $cond315 = 0, $exitcond = 0, $g = 0, $g7 = 0, $j$0191 = 0, $j80$0190 = 0;
 var $l$01$i$i = 0, $last$0195 = 0, $ll$02$i$i = 0, $lr$04$i$i = 0, $n$0 = 0, $n$1196 = 0, $num$i = 0, $num$i102 = 0, $num$i105 = 0, $num$i117 = 0, $num$i120 = 0, $num$i132 = 0, $num$i135 = 0, $num$i147 = 0, $num$i150 = 0, $num$i51 = 0, $num$i54 = 0, $num$i57 = 0, $num$i60 = 0, $num$i72 = 0;
 var $num$i75 = 0, $num$i87 = 0, $num$i90 = 0, $or$cond = 0, $or$cond$i = 0, $pc$0 = 0, $pc$1 = 0, $pc$2 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8$lcssa = 0, $pc$8192 = 0, $phitmp$i$i = 0, $phitmp$i2$i = 0, $r$03$i$i = 0, $ra$0 = 0, $rb$0 = 0;
 var $scevgep252 = 0, $tempb$i = 0, $tempb$i30 = 0, $tempb$i33 = 0, $tempb$i36 = 0, $tempb$i39 = 0, $tempb$i42 = 0, $tempb$i45 = 0, $tm$01$i = 0, $tm$01$i110 = 0, $tm$01$i125 = 0, $tm$01$i140 = 0, $tm$01$i155 = 0, $tm$01$i65 = 0, $tm$01$i80 = 0, $tm$01$i95 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 296|0;
 $vararg_buffer1 = sp + 288|0;
 $vararg_buffer = sp + 280|0;
 $num$i150 = sp + 272|0;
 $num$i147 = sp + 264|0;
 $num$i135 = sp + 256|0;
 $num$i132 = sp + 248|0;
 $num$i120 = sp + 240|0;
 $num$i117 = sp + 232|0;
 $num$i105 = sp + 224|0;
 $num$i102 = sp + 216|0;
 $num$i90 = sp + 208|0;
 $num$i87 = sp + 200|0;
 $num$i75 = sp + 192|0;
 $num$i72 = sp + 184|0;
 $num$i60 = sp + 176|0;
 $num$i57 = sp + 168|0;
 $num$i54 = sp + 160|0;
 $num$i51 = sp + 152|0;
 $num$i = sp + 144|0;
 $tempb$i45 = sp + 128|0;
 $tempb$i42 = sp + 112|0;
 $tempb$i39 = sp + 96|0;
 $tempb$i36 = sp + 80|0;
 $tempb$i33 = sp + 64|0;
 $tempb$i30 = sp + 48|0;
 $tempb$i = sp + 32|0;
 $g = sp + 16|0;
 $g7 = sp;
 $0 = (($L) + 24|0);
 $1 = (($L) + 20|0);
 $2 = (($L) + 12|0);
 $3 = (($L) + 56|0);
 $4 = (($g) + 8|0);
 $5 = (($g7) + 8|0);
 $6 = (($L) + 16|0);
 $7 = (($L) + 32|0);
 $8 = (($L) + 8|0);
 $9 = (($L) + 28|0);
 $10 = (($tempb$i) + 8|0);
 $11 = (($tempb$i30) + 8|0);
 $12 = (($tempb$i33) + 8|0);
 $13 = (($tempb$i36) + 8|0);
 $14 = (($tempb$i39) + 8|0);
 $15 = (($tempb$i42) + 8|0);
 $16 = (($tempb$i45) + 8|0);
 $17 = HEAP32[((1648 + 8|0))>>2]|0;
 $18 = (($L) + 64|0);
 $19 = (($L) + 6|0);
 $20 = (($L) + 60|0);
 $21 = (($L) + 104|0);
 $$0$ph = $nexeccalls;
 L1: while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $$pre286 = HEAP32[$1>>2]|0;
  $1868 = $$pre;$23 = $$pre286;
  L3: while(1) {
   $22 = (($23) + 4|0);
   $24 = HEAP32[$22>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$2>>2]|0;
   $27 = (($25) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($25) + 20|0);
   $32 = (($25) + 12|0);
   $base$0 = $26;$pc$0 = $1868;
   L5: while(1) {
    $33 = (($pc$0) + 4|0);
    $34 = HEAP32[$pc$0>>2]|0;
    $35 = HEAP8[$3>>0]|0;
    $36 = $35 & 12;
    $37 = ($36<<24>>24)==(0);
    if ($37) {
     $base$1 = $base$0;
    } else {
     $38 = HEAP32[$18>>2]|0;
     $39 = (($38) + -1)|0;
     HEAP32[$18>>2] = $39;
     $40 = ($39|0)==(0);
     $$not = $40 ^ 1;
     $41 = $35 & 4;
     $42 = ($41<<24>>24)==(0);
     $or$cond = $42 & $$not;
     if ($or$cond) {
      $base$1 = $base$0;
     } else {
      $43 = HEAP32[$0>>2]|0;
      HEAP32[$0>>2] = $33;
      $44 = $35&255;
      $45 = $44 & 8;
      $46 = ($45|0)==(0);
      $$not317 = $40 ^ 1;
      $brmerge = $46 | $$not317;
      if (!($brmerge)) {
       $47 = HEAP32[$20>>2]|0;
       HEAP32[$18>>2] = $47;
       _luaD_callhook($L,3,-1);
      }
      $48 = $44 & 4;
      $49 = ($48|0)==(0);
      do {
       if (!($49)) {
        $50 = HEAP32[$1>>2]|0;
        $51 = (($50) + 4|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = HEAP32[$52>>2]|0;
        $54 = (($53) + 16|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = (($55) + 12|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = $33;
        $59 = $57;
        $60 = (($58) - ($59))|0;
        $61 = $60 >> 2;
        $62 = (($61) + -1)|0;
        $63 = (($55) + 20|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = ($64|0)==(0|0);
        if ($65) {
         $76 = 0;
        } else {
         $66 = (($64) + ($62<<2)|0);
         $67 = HEAP32[$66>>2]|0;
         $76 = $67;
        }
        $68 = ($62|0)!=(0);
        $69 = ($43>>>0)<($33>>>0);
        $or$cond$i = $68 & $69;
        if ($or$cond$i) {
         if ($65) {
          $78 = 0;
         } else {
          $70 = $43;
          $71 = (($70) - ($59))|0;
          $72 = $71 >> 2;
          $73 = (($72) + -1)|0;
          $74 = (($64) + ($73<<2)|0);
          $75 = HEAP32[$74>>2]|0;
          $78 = $75;
         }
         $77 = ($76|0)==($78|0);
         if ($77) {
          break;
         }
        }
        _luaD_callhook($L,2,$76);
       }
      } while(0);
      $79 = HEAP8[$19>>0]|0;
      $80 = ($79<<24>>24)==(1);
      if ($80) {
       label = 17;
       break L1;
      }
      $81 = HEAP32[$2>>2]|0;
      $base$1 = $81;
     }
    }
    $82 = $34 >>> 6;
    $83 = $82 & 255;
    $84 = (($base$1) + ($83<<4)|0);
    $85 = $34 & 63;
    do {
     switch ($85|0) {
     case 13:  {
      $369 = $34 >>> 23;
      $370 = $369 & 256;
      $371 = ($370|0)==(0);
      if ($371) {
       $374 = (($base$1) + ($369<<4)|0);
       $383 = $374;
      } else {
       $372 = $369 & 255;
       $373 = (($30) + ($372<<4)|0);
       $383 = $373;
      }
      $375 = $34 >>> 14;
      $376 = $375 & 256;
      $377 = ($376|0)==(0);
      if ($377) {
       $380 = $375 & 511;
       $381 = (($base$1) + ($380<<4)|0);
       $387 = $381;
      } else {
       $378 = $375 & 255;
       $379 = (($30) + ($378<<4)|0);
       $387 = $379;
      }
      $382 = (($383) + 8|0);
      $384 = HEAP32[$382>>2]|0;
      $385 = ($384|0)==(3);
      do {
       if ($385) {
        $386 = (($387) + 8|0);
        $388 = HEAP32[$386>>2]|0;
        $389 = ($388|0)==(3);
        if ($389) {
         $391 = +HEAPF64[$383>>3];
         $392 = +HEAPF64[$387>>3];
         $393 = $391 - $392;
         HEAPF64[$84>>3] = $393;
         $394 = ((($base$1) + ($83<<4)|0) + 8|0);
         HEAP32[$394>>2] = 3;
         $base$0 = $base$1;$pc$0 = $33;
         continue L5;
        } else {
         HEAP32[$0>>2] = $33;
         $390 = ($383|0)==(0|0);
         if ($390) {
          label = 95;
          break;
         } else {
          $$0$i73167 = $383;
          label = 89;
          break;
         }
        }
       } else {
        HEAP32[$0>>2] = $33;
        $cond307 = ($384|0)==(4);
        if ($cond307) {
         $395 = HEAP32[$383>>2]|0;
         $396 = (($395) + 16|0);
         $397 = (_luaO_str2d($396,$num$i72)|0);
         $398 = ($397|0)==(0);
         if ($398) {
          label = 95;
         } else {
          $399 = +HEAPF64[$num$i72>>3];
          HEAPF64[$tempb$i30>>3] = $399;
          HEAP32[$11>>2] = 3;
          $$0$i73167 = $tempb$i30;
          label = 89;
         }
        } else {
         label = 95;
        }
       }
      } while(0);
      do {
       if ((label|0) == 89) {
        label = 0;
        $400 = (($387) + 8|0);
        $401 = HEAP32[$400>>2]|0;
        if ((($401|0) == 4)) {
         $402 = HEAP32[$387>>2]|0;
         $403 = (($402) + 16|0);
         $404 = (_luaO_str2d($403,$num$i75)|0);
         $405 = ($404|0)==(0);
         if ($405) {
          label = 95;
          break;
         }
         $406 = +HEAPF64[$num$i75>>3];
         $410 = $406;
        } else if ((($401|0) == 3)) {
         $407 = ($387|0)==(0|0);
         if ($407) {
          label = 95;
          break;
         }
         $$pre289 = +HEAPF64[$387>>3];
         $410 = $$pre289;
        } else {
         label = 95;
         break;
        }
        $408 = +HEAPF64[$$0$i73167>>3];
        $409 = $408 - $410;
        HEAPF64[$84>>3] = $409;
        $411 = ((($base$1) + ($83<<4)|0) + 8|0);
        HEAP32[$411>>2] = 3;
       }
      } while(0);
      do {
       if ((label|0) == 95) {
        label = 0;
        $412 = (_luaT_gettmbyobj($L,$383,6)|0);
        $413 = (($412) + 8|0);
        $414 = HEAP32[$413>>2]|0;
        $415 = ($414|0)==(0);
        if ($415) {
         $416 = (_luaT_gettmbyobj($L,$387,6)|0);
         $$phi$trans$insert$i78 = (($416) + 8|0);
         $$pre$i79 = HEAP32[$$phi$trans$insert$i78>>2]|0;
         $417 = ($$pre$i79|0)==(0);
         if ($417) {
          _luaG_aritherror($L,$383,$387);
          break;
         } else {
          $tm$01$i80 = $416;
         }
        } else {
         $tm$01$i80 = $412;
        }
        $418 = HEAP32[$7>>2]|0;
        $419 = $84;
        $420 = $418;
        $421 = (($419) - ($420))|0;
        $422 = HEAP32[$8>>2]|0;
        $423 = $tm$01$i80;
        $424 = $423;
        $425 = HEAP32[$424>>2]|0;
        $426 = (($423) + 4)|0;
        $427 = $426;
        $428 = HEAP32[$427>>2]|0;
        $429 = $422;
        $430 = $429;
        HEAP32[$430>>2] = $425;
        $431 = (($429) + 4)|0;
        $432 = $431;
        HEAP32[$432>>2] = $428;
        $433 = (($tm$01$i80) + 8|0);
        $434 = HEAP32[$433>>2]|0;
        $435 = (($422) + 8|0);
        HEAP32[$435>>2] = $434;
        $436 = HEAP32[$8>>2]|0;
        $437 = (($436) + 16|0);
        $438 = $383;
        $439 = $438;
        $440 = HEAP32[$439>>2]|0;
        $441 = (($438) + 4)|0;
        $442 = $441;
        $443 = HEAP32[$442>>2]|0;
        $444 = $437;
        $445 = $444;
        HEAP32[$445>>2] = $440;
        $446 = (($444) + 4)|0;
        $447 = $446;
        HEAP32[$447>>2] = $443;
        $448 = HEAP32[$382>>2]|0;
        $449 = (($436) + 24|0);
        HEAP32[$449>>2] = $448;
        $450 = HEAP32[$8>>2]|0;
        $451 = (($450) + 32|0);
        $452 = $387;
        $453 = $452;
        $454 = HEAP32[$453>>2]|0;
        $455 = (($452) + 4)|0;
        $456 = $455;
        $457 = HEAP32[$456>>2]|0;
        $458 = $451;
        $459 = $458;
        HEAP32[$459>>2] = $454;
        $460 = (($458) + 4)|0;
        $461 = $460;
        HEAP32[$461>>2] = $457;
        $462 = (($387) + 8|0);
        $463 = HEAP32[$462>>2]|0;
        $464 = (($450) + 40|0);
        HEAP32[$464>>2] = $463;
        $465 = HEAP32[$9>>2]|0;
        $466 = HEAP32[$8>>2]|0;
        $467 = $465;
        $468 = $466;
        $469 = (($467) - ($468))|0;
        $470 = ($469|0)<(49);
        if ($470) {
         _luaD_growstack($L,3);
         $$pre$i84 = HEAP32[$8>>2]|0;
         $472 = $$pre$i84;
        } else {
         $472 = $466;
        }
        $471 = (($472) + 48|0);
        HEAP32[$8>>2] = $471;
        _luaD_call($L,$472,1);
        $473 = HEAP32[$7>>2]|0;
        $474 = (($473) + ($421)|0);
        $475 = HEAP32[$8>>2]|0;
        $476 = (($475) + -16|0);
        HEAP32[$8>>2] = $476;
        $477 = $476;
        $478 = $477;
        $479 = HEAP32[$478>>2]|0;
        $480 = (($477) + 4)|0;
        $481 = $480;
        $482 = HEAP32[$481>>2]|0;
        $483 = $474;
        $484 = $483;
        HEAP32[$484>>2] = $479;
        $485 = (($483) + 4)|0;
        $486 = $485;
        HEAP32[$486>>2] = $482;
        $487 = (($475) + -8|0);
        $488 = HEAP32[$487>>2]|0;
        $$sum$i85 = (($421) + 8)|0;
        $489 = (($473) + ($$sum$i85)|0);
        HEAP32[$489>>2] = $488;
       }
      } while(0);
      $490 = HEAP32[$2>>2]|0;
      $base$0 = $490;$pc$0 = $33;
      continue L5;
      break;
     }
     case 4:  {
      $126 = $34 >>> 23;
      $127 = (($31) + ($126<<2)|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($128) + 8|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $130;
      $132 = $131;
      $133 = HEAP32[$132>>2]|0;
      $134 = (($131) + 4)|0;
      $135 = $134;
      $136 = HEAP32[$135>>2]|0;
      $137 = $84;
      $138 = $137;
      HEAP32[$138>>2] = $133;
      $139 = (($137) + 4)|0;
      $140 = $139;
      HEAP32[$140>>2] = $136;
      $141 = (($130) + 8|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($base$1) + ($83<<4)|0) + 8|0);
      HEAP32[$143>>2] = $142;
      $base$0 = $base$1;$pc$0 = $33;
      continue L5;
      break;
     }
     case 12:  {
      $247 = $34 >>> 23;
      $248 = $247 & 256;
      $249 = ($248|0)==(0);
      if ($249) {
       $252 = (($base$1) + ($247<<4)|0);
       $261 = $252;
      } else {
       $250 = $247 & 255;
       $251 = (($30) + ($250<<4)|0);
       $261 = $251;
      }
      $253 = $34 >>> 14;
      $254 = $253 & 256;
      $255 = ($254|0)==(0);
      if ($255) {
       $258 = $253 & 511;
       $259 = (($base$1) + ($258<<4)|0);
       $265 = $259;
      } else {
       $256 = $253 & 255;
       $257 = (($30) + ($256<<4)|0);
       $265 = $257;
      }
      $260 = (($261) + 8|0);
      $262 = HEAP32[$260>>2]|0;
      $263 = ($262|0)==(3);
      do {
       if ($263) {
        $264 = (($265) + 8|0);
        $266 = HEAP32[$264>>2]|0;
        $267 = ($266|0)==(3);
        if ($267) {
         $269 = +HEAPF64[$261>>3];
         $270 = +HEAPF64[$265>>3];
         $271 = $269 + $270;
         HEAPF64[$84>>3] = $271;
         $272 = ((($base$1) + ($83<<4)|0) + 8|0);
         HEAP32[$272>>2] = 3;
         $base$0 = $base$1;$pc$0 = $33;
         continue L5;
        } else {
         HEAP32[$0>>2] = $33;
         $268 = ($261|0)==(0|0);
         if ($268) {
          label = 69;
          break;
         } else {
          $$0$i58163 = $261;
          label = 63;
          break;
         }
        }
       } else {
        HEAP32[$0>>2] = $33;
        $cond = ($262|0)==(4);
        if ($cond) {
         $273 = HEAP32[$261>>2]|0;
         $274 = (($273) + 16|0);
         $275 = (_luaO_str2d($274,$num$i57)|0);
         $276 = ($275|0)==(0);
         if ($276) {
          label = 69;
         } else {
          $277 = +HEAPF64[$num$i57>>3];
          HEAPF64[$tempb$i>>3] = $277;
          HEAP32[$10>>2] = 3;
          $$0$i58163 = $tempb$i;
          label = 63;
         }
        } else {
         label = 69;
        }
       }
      } while(0);
      do {
       if ((label|0) == 63) {
        label = 0;
        $278 = (($265) + 8|0);
        $279 = HEAP32[$278>>2]|0;
        if ((($279|0) == 4)) {
         $280 = HEAP32[$265>>2]|0;
         $281 = (($280) + 16|0);
         $282 = (_luaO_str2d($281,$num$i60)|0);
         $283 = ($282|0)==(0);
         if ($283) {
          label = 69;
          break;
         }
         $284 = +HEAPF64[$num$i60>>3];
         $288 = $284;
        } else if ((($279|0) == 3)) {
         $285 = ($265|0)==(0|0);
         if ($285) {
          label = 69;
          break;
         }
         $$pre287 = +HEAPF64[$265>>3];
         $288 = $$pre287;
        } else {
         label = 69;
         break;
        }
        $286 = +HEAPF64[$$0$i58163>>3];
        $287 = $286 + $288;
        HEAPF64[$84>>3] = $287;
        $289 = ((($base$1) + ($83<<4)|0) + 8|0);
        HEAP32[$289>>2] = 3;
       }
      } while(0);
      do {
       if ((label|0) == 69) {
        label = 0;
        $290 = (_luaT_gettmbyobj($L,$261,5)|0);
        $291 = (($290) + 8|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = ($292|0)==(0);
        if ($293) {
         $294 = (_luaT_gettmbyobj($L,$265,5)|0);
         $$phi$trans$insert$i63 = (($294) + 8|0);
         $$pre$i64 = HEAP32[$$phi$trans$insert$i63>>2]|0;
         $295 = ($$pre$i64|0)==(0);
         if ($295) {
          _luaG_aritherror($L,$261,$265);
          break;
         } else {
          $tm$01$i65 = $294;
         }
        } else {
         $tm$01$i65 = $290;
        }
        $296 = HEAP32[$7>>2]|0;
        $297 = $84;
        $298 = $296;
        $299 = (($297) - ($298))|0;
        $300 = HEAP32[$8>>2]|0;
        $301 = $tm$01$i65;
        $302 = $301;
        $303 = HEAP32[$302>>2]|0;
        $304 = (($301) + 4)|0;
        $305 = $304;
        $306 = HEAP32[$305>>2]|0;
        $307 = $300;
        $308 = $307;
        HEAP32[$308>>2] = $303;
        $309 = (($307) + 4)|0;
        $310 = $309;
        HEAP32[$310>>2] = $306;
        $311 = (($tm$01$i65) + 8|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = (($300) + 8|0);
        HEAP32[$313>>2] = $312;
        $314 = HEAP32[$8>>2]|0;
        $315 = (($314) + 16|0);
        $316 = $261;
        $317 = $316;
        $318 = HEAP32[$317>>2]|0;
        $319 = (($316) + 4)|0;
        $320 = $319;
        $321 = HEAP32[$320>>2]|0;
        $322 = $315;
        $323 = $322;
        HEAP32[$323>>2] = $318;
        $324 = (($322) + 4)|0;
        $325 = $324;
        HEAP32[$325>>2] = $321;
        $326 = HEAP32[$260>>2]|0;
        $327 = (($314) + 24|0);
        HEAP32[$327>>2] = $326;
        $328 = HEAP32[$8>>2]|0;
        $329 = (($328) + 32|0);
        $330 = $265;
        $331 = $330;
        $332 = HEAP32[$331>>2]|0;
        $333 = (($330) + 4)|0;
        $334 = $333;
        $335 = HEAP32[$334>>2]|0;
        $336 = $329;
        $337 = $336;
        HEAP32[$337>>2] = $332;
        $338 = (($336) + 4)|0;
        $339 = $338;
        HEAP32[$339>>2] = $335;
        $340 = (($265) + 8|0);
        $341 = HEAP32[$340>>2]|0;
        $342 = (($328) + 40|0);
        HEAP32[$342>>2] = $341;
        $343 = HEAP32[$9>>2]|0;
        $344 = HEAP32[$8>>2]|0;
        $345 = $343;
        $346 = $344;
        $347 = (($345) - ($346))|0;
        $348 = ($347|0)<(49);
        if ($348) {
         _luaD_growstack($L,3);
         $$pre$i69 = HEAP32[$8>>2]|0;
         $350 = $$pre$i69;
        } else {
         $350 = $344;
        }
        $349 = (($350) + 48|0);
        HEAP32[$8>>2] = $349;
        _luaD_call($L,$350,1);
        $351 = HEAP32[$7>>2]|0;
        $352 = (($351) + ($299)|0);
        $353 = HEAP32[$8>>2]|0;
        $354 = (($353) + -16|0);
        HEAP32[$8>>2] = $354;
        $355 = $354;
        $356 = $355;
        $357 = HEAP32[$356>>2]|0;
        $358 = (($355) + 4)|0;
        $359 = $358;
        $360 = HEAP32[$359>>2]|0;
        $361 = $352;
        $362 = $361;
        HEAP32[$362>>2] = $357;
        $363 = (($361) + 4)|0;
        $364 = $363;
        HEAP32[$364>>2] = $360;
        $365 = (($353) + -8|0);
        $366 = HEAP32[$365>>2]|0;
        $$sum$i70 = (($299) + 8)|0;
        $367 = (($351) + ($$sum$i70)|0);
        HEAP32[$367>>2] = $366;
       }
      } while(0);
      $368 = HEAP32[$2>>2]|0;
      $base$0 = $368;$pc$0 = $33;
      continue L5;
      break;
     }
     case 9:  {
      HEAP32[$0>>2] = $33;
      $192 = $34 >>> 23;
      $193 = $192 & 256;
      $194 = ($193|0)==(0);
      if ($194) {
       $197 = (($base$1) + ($192<<4)|0);
       $205 = $197;
      } else {
       $195 = $192 & 255;
       $196 = (($30) + ($195<<4)|0);
       $205 = $196;
      }
      $198 = $34 >>> 14;
      $199 = $198 & 256;
      $200 = ($199|0)==(0);
      if ($200) {
       $203 = $198 & 511;
       $204 = (($base$1) + ($203<<4)|0);
       $206 = $204;
      } else {
       $201 = $198 & 255;
       $202 = (($30) + ($201<<4)|0);
       $206 = $202;
      }
      _luaV_settable($L,$84,$205,$206);
      $207 = HEAP32[$2>>2]|0;
      $base$0 = $207;$pc$0 = $33;
      continue L5;
      break;
     }
     case 14:  {
      $491 = $34 >>> 23;
      $492 = $491 & 256;
      $493 = ($492|0)==(0);
      if ($493) {
       $496 = (($base$1) + ($491<<4)|0);
       $505 = $496;
      } else {
       $494 = $491 & 255;
       $495 = (($30) + ($494<<4)|0);
       $505 = $495;
      }
      $497 = $34 >>> 14;
      $498 = $497 & 256;
      $499 = ($498|0)==(0);
      if ($499) {
       $502 = $497 & 511;
       $503 = (($base$1) + ($502<<4)|0);
       $509 = $503;
      } else {
       $500 = $497 & 255;
       $501 = (($30) + ($500<<4)|0);
       $509 = $501;
      }
      $504 = (($505) + 8|0);
      $506 = HEAP32[$504>>2]|0;
      $507 = ($506|0)==(3);
      do {
       if ($507) {
        $508 = (($509) + 8|0);
        $510 = HEAP32[$508>>2]|0;
        $511 = ($510|0)==(3);
        if ($511) {
         $513 = +HEAPF64[$505>>3];
         $514 = +HEAPF64[$509>>3];
         $515 = $513 * $514;
         HEAPF64[$84>>3] = $515;
         $516 = ((($base$1) + ($83<<4)|0) + 8|0);
         HEAP32[$516>>2] = 3;
         $base$0 = $base$1;$pc$0 = $33;
         continue L5;
        } else {
         HEAP32[$0>>2] = $33;
         $512 = ($505|0)==(0|0);
         if ($512) {
          label = 121;
          break;
         } else {
          $$0$i88171 = $505;
          label = 115;
          break;
         }
        }
       } else {
        HEAP32[$0>>2] = $33;
        $cond308 = ($506|0)==(4);
        if ($cond308) {
         $517 = HEAP32[$505>>2]|0;
         $518 = (($517) + 16|0);
         $519 = (_luaO_str2d($518,$num$i87)|0);
         $520 = ($519|0)==(0);
         if ($520) {
          label = 121;
         } else {
          $521 = +HEAPF64[$num$i87>>3];
          HEAPF64[$tempb$i33>>3] = $521;
          HEAP32[$12>>2] = 3;
          $$0$i88171 = $tempb$i33;
          label = 115;
         }
        } else {
         label = 121;
        }
       }
      } while(0);
      do {
       if ((label|0) == 115) {
        label = 0;
        $522 = (($509) + 8|0);
        $523 = HEAP32[$522>>2]|0;
        if ((($523|0) == 4)) {
         $524 = HEAP32[$509>>2]|0;
         $525 = (($524) + 16|0);
         $526 = (_luaO_str2d($525,$num$i90)|0);
         $527 = ($526|0)==(0);
         if ($527) {
          label = 121;
          break;
         }
         $528 = +HEAPF64[$num$i90>>3];
         $532 = $528;
        } else if ((($523|0) == 3)) {
         $529 = ($509|0)==(0|0);
         if ($529) {
          label = 121;
          break;
         }
         $$pre291 = +HEAPF64[$509>>3];
         $532 = $$pre291;
        } else {
         label = 121;
         break;
        }
        $530 = +HEAPF64[$$0$i88171>>3];
        $531 = $530 * $532;
        HEAPF64[$84>>3] = $531;
        $533 = ((($base$1) + ($83<<4)|0) + 8|0);
        HEAP32[$533>>2] = 3;
       }
      } while(0);
      do {
       if ((label|0) == 121) {
        label = 0;
        $534 = (_luaT_gettmbyobj($L,$505,7)|0);
        $535 = (($534) + 8|0);
        $536 = HEAP32[$535>>2]|0;
        $537 = ($536|0)==(0);
        if ($537) {
         $538 = (_luaT_gettmbyobj($L,$509,7)|0);
         $$phi$trans$insert$i93 = (($538) + 8|0);
         $$pre$i94 = HEAP32[$$phi$trans$insert$i93>>2]|0;
         $539 = ($$pre$i94|0)==(0);
         if ($539) {
          _luaG_aritherror($L,$505,$509);
          break;
         } else {
          $tm$01$i95 = $538;
         }
        } else {
         $tm$01$i95 = $534;
        }
        $540 = HEAP32[$7>>2]|0;
        $541 = $84;
        $542 = $540;
        $543 = (($541) - ($542))|0;
        $544 = HEAP32[$8>>2]|0;
        $545 = $tm$01$i95;
        $546 = $545;
        $547 = HEAP32[$546>>2]|0;
        $548 = (($545) + 4)|0;
        $549 = $548;
        $550 = HEAP32[$549>>2]|0;
        $551 = $544;
        $552 = $551;
        HEAP32[$552>>2] = $547;
        $553 = (($551) + 4)|0;
        $554 = $553;
        HEAP32[$554>>2] = $550;
        $555 = (($tm$01$i95) + 8|0);
        $556 = HEAP32[$555>>2]|0;
        $557 = (($544) + 8|0);
        HEAP32[$557>>2] = $556;
        $558 = HEAP32[$8>>2]|0;
        $559 = (($558) + 16|0);
        $560 = $505;
        $561 = $560;
        $562 = HEAP32[$561>>2]|0;
        $563 = (($560) + 4)|0;
        $564 = $563;
        $565 = HEAP32[$564>>2]|0;
        $566 = $559;
        $567 = $566;
        HEAP32[$567>>2] = $562;
        $568 = (($566) + 4)|0;
        $569 = $568;
        HEAP32[$569>>2] = $565;
        $570 = HEAP32[$504>>2]|0;
        $571 = (($558) + 24|0);
        HEAP32[$571>>2] = $570;
        $572 = HEAP32[$8>>2]|0;
        $573 = (($572) + 32|0);
        $574 = $509;
        $575 = $574;
        $576 = HEAP32[$575>>2]|0;
        $577 = (($574) + 4)|0;
        $578 = $577;
        $579 = HEAP32[$578>>2]|0;
        $580 = $573;
        $581 = $580;
        HEAP32[$581>>2] = $576;
        $582 = (($580) + 4)|0;
        $583 = $582;
        HEAP32[$583>>2] = $579;
        $584 = (($509) + 8|0);
        $585 = HEAP32[$584>>2]|0;
        $586 = (($572) + 40|0);
        HEAP32[$586>>2] = $585;
        $587 = HEAP32[$9>>2]|0;
        $588 = HEAP32[$8>>2]|0;
        $589 = $587;
        $590 = $588;
        $591 = (($589) - ($590))|0;
        $592 = ($591|0)<(49);
        if ($592) {
         _luaD_growstack($L,3);
         $$pre$i99 = HEAP32[$8>>2]|0;
         $594 = $$pre$i99;
        } else {
         $594 = $588;
        }
        $593 = (($594) + 48|0);
        HEAP32[$8>>2] = $593;
        _luaD_call($L,$594,1);
        $595 = HEAP32[$7>>2]|0;
        $596 = (($595) + ($543)|0);
        $597 = HEAP32[$8>>2]|0;
        $598 = (($597) + -16|0);
        HEAP32[$8>>2] = $598;
        $599 = $598;
        $600 = $599;
        $601 = HEAP32[$600>>2]|0;
        $602 = (($599) + 4)|0;
        $603 = $602;
        $604 = HEAP32[$603>>2]|0;
        $605 = $596;
        $606 = $605;
        HEAP32[$606>>2] = $601;
        $607 = (($605) + 4)|0;
        $608 = $607;
        HEAP32[$608>>2] = $604;
        $609 = (($597) + -8|0);
        $610 = HEAP32[$609>>2]|0;
        $$sum$i100 = (($543) + 8)|0;
        $611 = (($595) + ($$sum$i100)|0);
        HEAP32[$611>>2] = $610;
       }
      } while(0);
      $612 = HEAP32[$2>>2]|0;
      $base$0 = $612;$pc$0 = $33;
      continue L5;
      break;
     }
     case 8:  {
      $163 = $34 >>> 23;
      $164 = (($31) + ($163<<2)|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = (($165) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = $84;
      $169 = $168;
      $170 = HEAP32[$169>>2]|0;
      $171 = (($168) + 4)|0;
      $172 = $171;
      $173 = HEAP32[$172>>2]|0;
      $174 = $167;
      $175 = $174;
      HEAP32[$175>>2] = $170;
      $176 = (($174) + 4)|0;
      $177 = $176;
      HEAP32[$177>>2] = $173;
      $178 = ((($base$1) + ($83<<4)|0) + 8|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = (($167) + 8|0);
      HEAP32[$180>>2] = $179;
      $181 = HEAP32[$178>>2]|0;
      $182 = ($181|0)>(3);
      if (!($182)) {
       $base$0 = $base$1;$pc$0 = $33;
       continue L5;
      }
      $183 = HEAP32[$84>>2]|0;
      $184 = (($183) + 5|0);
      $185 = HEAP8[$184>>0]|0;
      $186 = $185 & 3;
      $187 = ($186<<24>>24)==(0);
      if ($187) {
       $base$0 = $base$1;$pc$0 = $33;
       continue L5;
      }
      $188 = (($165) + 5|0);
      $189 = HEAP8[$188>>0]|0;
      $190 = $189 & 4;
      $191 = ($190<<24>>24)==(0);
      if ($191) {
       $base$0 = $base$1;$pc$0 = $33;
       continue L5;
      }
      _luaC_barrierf($L,$165,$183);
      $base$0 = $base$1;$pc$0 = $33;
      continue L5;
      break;
     }
     case 2:  {
      $116 = $34 >>> 23;
      HEAP32[$84>>2] = $116;
      $117 = ((($base$1) + ($83<<4)|0) + 8|0);
      HEAP32[$117>>2] = 1;
      $118 = $34 & 8372224;
      $119 = ($118|0)==(0);
      $120 = (($pc$0) + 8|0);
      $$ = $119 ? $33 : $120;
      $base$0 = $base$1;$pc$0 = $$;
      continue L5;
      break;
     }
     case 1:  {
      $101 = $34 >>> 14;
      $102 = (($30) + ($101<<4)|0);
      $103 = $102;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = $84;
      $110 = $109;
      HEAP32[$110>>2] = $105;
      $111 = (($109) + 4)|0;
      $112 = $111;
      HEAP32[$112>>2] = $108;
      $113 = ((($30) + ($101<<4)|0) + 8|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ((($base$1) + ($83<<4)|0) + 8|0);
      HEAP32[$115>>2] = $114;
      $base$0 = $base$1;$pc$0 = $33;
      continue L5;
      break;
     }
     case 10:  {
      $208 = $34 >>> 23;
      $209 = $34 >>> 14;
      $210 = $209 & 511;
      $211 = (_luaO_fb2int($208)|0);
      $212 = (_luaO_fb2int($210)|0);
      $213 = (_luaH_new($L,$211,$212)|0);
      HEAP32[$84>>2] = $213;
      $214 = ((($base$1) + ($83<<4)|0) + 8|0);
      HEAP32[$214>>2] = 5;
      HEAP32[$0>>2] = $33;
      $215 = HEAP32[$6>>2]|0;
      $216 = (($215) + 68|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (($215) + 64|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if (!($220)) {
       _luaC_step($L);
      }
      $221 = HEAP32[$2>>2]|0;
      $base$0 = $221;$pc$0 = $33;
      continue L5;
      break;
     }
     case 0:  {
      $86 = $34 >>> 23;
      $87 = (($base$1) + ($86<<4)|0);
      $88 = $87;
      $89 = $88;
      $90 = HEAP32[$89>>2]|0;
      $91 = (($88) + 4)|0;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = $84;
      $95 = $94;
      HEAP32[$95>>2] = $90;
      $96 = (($94) + 4)|0;
      $97 = $96;
      HEAP32[$97>>2] = $93;
      $98 = ((($base$1) + ($86<<4)|0) + 8|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ((($base$1) + ($83<<4)|0) + 8|0);
      HEAP32[$100>>2] = $99;
      $base$0 = $base$1;$pc$0 = $33;
      continue L5;
      break;
     }
     case 15:  {
      $613 = $34 >>> 23;
      $614 = $613 & 256;
      $615 = ($614|0)==(0);
      if ($615) {
       $618 = (($base$1) + ($613<<4)|0);
       $627 = $618;
      } else {
       $616 = $613 & 255;
       $617 = (($30) + ($616<<4)|0);
       $627 = $617;
      }
      $619 = $34 >>> 14;
      $620 = $619 & 256;
      $621 = ($620|0)==(0);
      if ($621) {
       $624 = $619 & 511;
       $625 = (($base$1) + ($624<<4)|0);
       $631 = $625;
      } else {
       $622 = $619 & 255;
       $623 = (($30) + ($622<<4)|0);
       $631 = $623;
      }
      $626 = (($627) + 8|0);
      $628 = HEAP32[$626>>2]|0;
      $629 = ($628|0)==(3);
      do {
       if ($629) {
        $630 = (($631) + 8|0);
        $632 = HEAP32[$630>>2]|0;
        $633 = ($632|0)==(3);
        if ($633) {
         $635 = +HEAPF64[$627>>3];
         $636 = +HEAPF64[$631>>3];
         $637 = $635 / $636;
         HEAPF64[$84>>3] = $637;
         $638 = ((($base$1) + ($83<<4)|0) + 8|0);
         HEAP32[$638>>2] = 3;
         $base$0 = $base$1;$pc$0 = $33;
         continue L5;
        } else {
         HEAP32[$0>>2] = $33;
         $634 = ($627|0)==(0|0);
         if ($634) {
          label = 147;
          break;
         } else {
          $$0$i103175 = $627;
          label = 141;
          break;
         }
        }
       } else {
        HEAP32[$0>>2] = $33;
        $cond309 = ($628|0)==(4);
        if ($cond309) {
         $639 = HEAP32[$627>>2]|0;
         $640 = (($639) + 16|0);
         $641 = (_luaO_str2d($640,$num$i102)|0);
         $642 = ($641|0)==(0);
         if ($642) {
          label = 147;
         } else {
          $643 = +HEAPF64[$num$i102>>3];
          HEAPF64[$tempb$i36>>3] = $643;
          HEAP32[$13>>2] = 3;
          $$0$i103175 = $tempb$i36;
          label = 141;
         }
        } else {
         label = 147;
        }
       }
      } while(0);
      do {
       if ((label|0) == 141) {
        label = 0;
        $644 = (($631) + 8|0);
        $645 = HEAP32[$644>>2]|0;
        if ((($645|0) == 3)) {
         $651 = ($631|0)==(0|0);
         if ($651) {
          label = 147;
          break;
         }
         $$pre293 = +HEAPF64[$631>>3];
         $654 = $$pre293;
        } else if ((($645|0) == 4)) {
         $646 = HEAP32[$631>>2]|0;
         $647 = (($646) + 16|0);
         $648 = (_luaO_str2d($647,$num$i105)|0);
         $649 = ($648|0)==(0);
         if ($649) {
          label = 147;
          break;
         }
         $650 = +HEAPF64[$num$i105>>3];
         $654 = $650;
        } else {
         label = 147;
         break;
        }
        $652 = +HEAPF64[$$0$i103175>>3];
        $653 = $652 / $654;
        HEAPF64[$84>>3] = $653;
        $655 = ((($base$1) + ($83<<4)|0) + 8|0);
        HEAP32[$655>>2] = 3;
       }
      } while(0);
      do {
       if ((label|0) == 147) {
        label = 0;
        $656 = (_luaT_gettmbyobj($L,$627,8)|0);
        $657 = (($656) + 8|0);
        $658 = HEAP32[$657>>2]|0;
        $659 = ($658|0)==(0);
        if ($659) {
         $660 = (_luaT_gettmbyobj($L,$631,8)|0);
         $$phi$trans$insert$i108 = (($660) + 8|0);
         $$pre$i109 = HEAP32[$$phi$trans$insert$i108>>2]|0;
         $661 = ($$pre$i109|0)==(0);
         if ($661) {
          _luaG_aritherror($L,$627,$631);
          break;
         } else {
          $tm$01$i110 = $660;
         }
        } else {
         $tm$01$i110 = $656;
        }
        $662 = HEAP32[$7>>2]|0;
        $663 = $84;
        $664 = $662;
        $665 = (($663) - ($664))|0;
        $666 = HEAP32[$8>>2]|0;
        $667 = $tm$01$i110;
        $668 = $667;
        $669 = HEAP32[$668>>2]|0;
        $670 = (($667) + 4)|0;
        $671 = $670;
        $672 = HEAP32[$671>>2]|0;
        $673 = $666;
        $674 = $673;
        HEAP32[$674>>2] = $669;
        $675 = (($673) + 4)|0;
        $676 = $675;
        HEAP32[$676>>2] = $672;
        $677 = (($tm$01$i110) + 8|0);
        $678 = HEAP32[$677>>2]|0;
        $679 = (($666) + 8|0);
        HEAP32[$679>>2] = $678;
        $680 = HEAP32[$8>>2]|0;
        $681 = (($680) + 16|0);
        $682 = $627;
        $683 = $682;
        $684 = HEAP32[$683>>2]|0;
        $685 = (($682) + 4)|0;
        $686 = $685;
        $687 = HEAP32[$686>>2]|0;
        $688 = $681;
        $689 = $688;
        HEAP32[$689>>2] = $684;
        $690 = (($688) + 4)|0;
        $691 = $690;
        HEAP32[$691>>2] = $687;
        $692 = HEAP32[$626>>2]|0;
        $693 = (($680) + 24|0);
        HEAP32[$693>>2] = $692;
        $694 = HEAP32[$8>>2]|0;
        $695 = (($694) + 32|0);
        $696 = $631;
        $697 = $696;
        $698 = HEAP32[$697>>2]|0;
        $699 = (($696) + 4)|0;
        $700 = $699;
        $701 = HEAP32[$700>>2]|0;
        $702 = $695;
        $703 = $702;
        HEAP32[$703>>2] = $698;
        $704 = (($702) + 4)|0;
        $705 = $704;
        HEAP32[$705>>2] = $701;
        $706 = (($631) + 8|0);
        $707 = HEAP32[$706>>2]|0;
        $708 = (($694) + 40|0);
        HEAP32[$708>>2] = $707;
        $709 = HEAP32[$9>>2]|0;
        $710 = HEAP32[$8>>2]|0;
        $711 = $709;
        $712 = $710;
        $713 = (($711) - ($712))|0;
        $714 = ($713|0)<(49);
        if ($714) {
         _luaD_growstack($L,3);
         $$pre$i114 = HEAP32[$8>>2]|0;
         $716 = $$pre$i114;
        } else {
         $716 = $710;
        }
        $715 = (($716) + 48|0);
        HEAP32[$8>>2] = $715;
        _luaD_call($L,$716,1);
        $717 = HEAP32[$7>>2]|0;
        $718 = (($717) + ($665)|0);
        $719 = HEAP32[$8>>2]|0;
        $720 = (($719) + -16|0);
        HEAP32[$8>>2] = $720;
        $721 = $720;
        $722 = $721;
        $723 = HEAP32[$722>>2]|0;
        $724 = (($721) + 4)|0;
        $725 = $724;
        $726 = HEAP32[$725>>2]|0;
        $727 = $718;
        $728 = $727;
        HEAP32[$728>>2] = $723;
        $729 = (($727) + 4)|0;
        $730 = $729;
        HEAP32[$730>>2] = $726;
        $731 = (($719) + -8|0);
        $732 = HEAP32[$731>>2]|0;
        $$sum$i115 = (($665) + 8)|0;
        $733 = (($717) + ($$sum$i115)|0);
        HEAP32[$733>>2] = $732;
       }
      } while(0);
      $734 = HEAP32[$2>>2]|0;
      $base$0 = $734;$pc$0 = $33;
      continue L5;
      break;
     }
     case 5:  {
      $144 = $34 >>> 14;
      $145 = (($30) + ($144<<4)|0);
      $146 = HEAP32[$32>>2]|0;
      HEAP32[$g>>2] = $146;
      HEAP32[$4>>2] = 5;
      HEAP32[$0>>2] = $33;
      _luaV_gettable($L,$g,$145,$84);
      $147 = HEAP32[$2>>2]|0;
      $base$0 = $147;$pc$0 = $33;
      continue L5;
      break;
     }
     case 3:  {
      $121 = $34 >>> 23;
      $122 = (($base$1) + ($121<<4)|0);
      $rb$0 = $122;
      while(1) {
       $123 = (($rb$0) + -16|0);
       $124 = (($rb$0) + 8|0);
       HEAP32[$124>>2] = 0;
       $125 = ($123>>>0)<($84>>>0);
       if ($125) {
        $base$0 = $base$1;$pc$0 = $33;
        continue L5;
       } else {
        $rb$0 = $123;
       }
      }
      break;
     }
     case 6:  {
      HEAP32[$0>>2] = $33;
      $148 = $34 >>> 23;
      $149 = (($base$1) + ($148<<4)|0);
      $150 = $34 >>> 14;
      $151 = $150 & 256;
      $152 = ($151|0)==(0);
      if ($152) {
       $155 = $150 & 511;
       $156 = (($base$1) + ($155<<4)|0);
       $157 = $156;
      } else {
       $153 = $150 & 255;
       $154 = (($30) + ($153<<4)|0);
       $157 = $154;
      }
      _luaV_gettable($L,$149,$157,$84);
      $158 = HEAP32[$2>>2]|0;
      $base$0 = $158;$pc$0 = $33;
      continue L5;
      break;
     }
     case 11:  {
      $222 = $34 >>> 23;
      $223 = (($base$1) + ($222<<4)|0);
      $$sum29 = (($83) + 1)|0;
      $224 = (($base$1) + ($$sum29<<4)|0);
      $225 = $223;
      $226 = $225;
      $227 = HEAP32[$226>>2]|0;
      $228 = (($225) + 4)|0;
      $229 = $228;
      $230 = HEAP32[$229>>2]|0;
      $231 = $224;
      $232 = $231;
      HEAP32[$232>>2] = $227;
      $233 = (($231) + 4)|0;
      $234 = $233;
      HEAP32[$234>>2] = $230;
      $235 = ((($base$1) + ($222<<4)|0) + 8|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = ((($base$1) + ($$sum29<<4)|0) + 8|0);
      HEAP32[$237>>2] = $236;
      HEAP32[$0>>2] = $33;
      $238 = $34 >>> 14;
      $239 = $238 & 256;
      $240 = ($239|0)==(0);
      if ($240) {
       $243 = $238 & 511;
       $244 = (($base$1) + ($243<<4)|0);
       $245 = $244;
      } else {
       $241 = $238 & 255;
       $242 = (($30) + ($241<<4)|0);
       $245 = $242;
      }
      _luaV_gettable($L,$223,$245,$84);
      $246 = HEAP32[$2>>2]|0;
      $base$0 = $246;$pc$0 = $33;
      continue L5;
      break;
     }
     case 7:  {
      $159 = HEAP32[$32>>2]|0;
      HEAP32[$g7>>2] = $159;
      HEAP32[$5>>2] = 5;
      HEAP32[$0>>2] = $33;
      $160 = $34 >>> 14;
      $161 = (($30) + ($160<<4)|0);
      _luaV_settable($L,$g7,$161,$84);
      $162 = HEAP32[$2>>2]|0;
      $base$0 = $162;$pc$0 = $33;
      continue L5;
      break;
     }
     case 16:  {
      $735 = $34 >>> 23;
      $736 = $735 & 256;
      $737 = ($736|0)==(0);
      if ($737) {
       $740 = (($base$1) + ($735<<4)|0);
       $749 = $740;
      } else {
       $738 = $735 & 255;
       $739 = (($30) + ($738<<4)|0);
       $749 = $739;
      }
      $741 = $34 >>> 14;
      $742 = $741 & 256;
      $743 = ($742|0)==(0);
      if ($743) {
       $746 = $741 & 511;
       $747 = (($base$1) + ($746<<4)|0);
       $753 = $747;
      } else {
       $744 = $741 & 255;
       $745 = (($30) + ($744<<4)|0);
       $753 = $745;
      }
      $748 = (($749) + 8|0);
      $750 = HEAP32[$748>>2]|0;
      $751 = ($750|0)==(3);
      do {
       if ($751) {
        $752 = (($753) + 8|0);
        $754 = HEAP32[$752>>2]|0;
        $755 = ($754|0)==(3);
        if ($755) {
         $757 = +HEAPF64[$749>>3];
         $758 = +HEAPF64[$753>>3];
         $759 = $757 / $758;
         $760 = (+Math_floor((+$759)));
         $761 = $758 * $760;
         $762 = $757 - $761;
         HEAPF64[$84>>3] = $762;
         $763 = ((($base$1) + ($83<<4)|0) + 8|0);
         HEAP32[$763>>2] = 3;
         $base$0 = $base$1;$pc$0 = $33;
         continue L5;
        } else {
         HEAP32[$0>>2] = $33;
         $756 = ($749|0)==(0|0);
         if ($756) {
          label = 173;
          break;
         } else {
          $$0$i118179 = $749;
          label = 167;
          break;
         }
        }
       } else {
        HEAP32[$0>>2] = $33;
        $cond310 = ($750|0)==(4);
        if ($cond310) {
         $764 = HEAP32[$749>>2]|0;
         $765 = (($764) + 16|0);
         $766 = (_luaO_str2d($765,$num$i117)|0);
         $767 = ($766|0)==(0);
         if ($767) {
          label = 173;
         } else {
          $768 = +HEAPF64[$num$i117>>3];
          HEAPF64[$tempb$i39>>3] = $768;
          HEAP32[$14>>2] = 3;
          $$0$i118179 = $tempb$i39;
          label = 167;
         }
        } else {
         label = 173;
        }
       }
      } while(0);
      do {
       if ((label|0) == 167) {
        label = 0;
        $769 = (($753) + 8|0);
        $770 = HEAP32[$769>>2]|0;
        if ((($770|0) == 4)) {
         $771 = HEAP32[$753>>2]|0;
         $772 = (($771) + 16|0);
         $773 = (_luaO_str2d($772,$num$i120)|0);
         $774 = ($773|0)==(0);
         if ($774) {
          label = 173;
          break;
         }
         $775 = +HEAPF64[$num$i120>>3];
         $779 = $775;
        } else if ((($770|0) == 3)) {
         $776 = ($753|0)==(0|0);
         if ($776) {
          label = 173;
          break;
         }
         $$pre295 = +HEAPF64[$753>>3];
         $779 = $$pre295;
        } else {
         label = 173;
         break;
        }
        $777 = +HEAPF64[$$0$i118179>>3];
        $778 = $777 / $779;
        $780 = (+Math_floor((+$778)));
        $781 = $779 * $780;
        $782 = $777 - $781;
        HEAPF64[$84>>3] = $782;
        $783 = ((($base$1) + ($83<<4)|0) + 8|0);
        HEAP32[$783>>2] = 3;
       }
      } while(0);
      do {
       if ((label|0) == 173) {
        label = 0;
        $784 = (_luaT_gettmbyobj($L,$749,9)|0);
        $785 = (($784) + 8|0);
        $786 = HEAP32[$785>>2]|0;
        $787 = ($786|0)==(0);
        if ($787) {
         $788 = (_luaT_gettmbyobj($L,$753,9)|0);
         $$phi$trans$insert$i123 = (($788) + 8|0);
         $$pre$i124 = HEAP32[$$phi$trans$insert$i123>>2]|0;
         $789 = ($$pre$i124|0)==(0);
         if ($789) {
          _luaG_aritherror($L,$749,$753);
          break;
         } else {
          $tm$01$i125 = $788;
         }
        } else {
         $tm$01$i125 = $784;
        }
        $790 = HEAP32[$7>>2]|0;
        $791 = $84;
        $792 = $790;
        $793 = (($791) - ($792))|0;
        $794 = HEAP32[$8>>2]|0;
        $795 = $tm$01$i125;
        $796 = $795;
        $797 = HEAP32[$796>>2]|0;
        $798 = (($795) + 4)|0;
        $799 = $798;
        $800 = HEAP32[$799>>2]|0;
        $801 = $794;
        $802 = $801;
        HEAP32[$802>>2] = $797;
        $803 = (($801) + 4)|0;
        $804 = $803;
        HEAP32[$804>>2] = $800;
        $805 = (($tm$01$i125) + 8|0);
        $806 = HEAP32[$805>>2]|0;
        $807 = (($794) + 8|0);
        HEAP32[$807>>2] = $806;
        $808 = HEAP32[$8>>2]|0;
        $809 = (($808) + 16|0);
        $810 = $749;
        $811 = $810;
        $812 = HEAP32[$811>>2]|0;
        $813 = (($810) + 4)|0;
        $814 = $813;
        $815 = HEAP32[$814>>2]|0;
        $816 = $809;
        $817 = $816;
        HEAP32[$817>>2] = $812;
        $818 = (($816) + 4)|0;
        $819 = $818;
        HEAP32[$819>>2] = $815;
        $820 = HEAP32[$748>>2]|0;
        $821 = (($808) + 24|0);
        HEAP32[$821>>2] = $820;
        $822 = HEAP32[$8>>2]|0;
        $823 = (($822) + 32|0);
        $824 = $753;
        $825 = $824;
        $826 = HEAP32[$825>>2]|0;
        $827 = (($824) + 4)|0;
        $828 = $827;
        $829 = HEAP32[$828>>2]|0;
        $830 = $823;
        $831 = $830;
        HEAP32[$831>>2] = $826;
        $832 = (($830) + 4)|0;
        $833 = $832;
        HEAP32[$833>>2] = $829;
        $834 = (($753) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = (($822) + 40|0);
        HEAP32[$836>>2] = $835;
        $837 = HEAP32[$9>>2]|0;
        $838 = HEAP32[$8>>2]|0;
        $839 = $837;
        $840 = $838;
        $841 = (($839) - ($840))|0;
        $842 = ($841|0)<(49);
        if ($842) {
         _luaD_growstack($L,3);
         $$pre$i129 = HEAP32[$8>>2]|0;
         $844 = $$pre$i129;
        } else {
         $844 = $838;
        }
        $843 = (($844) + 48|0);
        HEAP32[$8>>2] = $843;
        _luaD_call($L,$844,1);
        $845 = HEAP32[$7>>2]|0;
        $846 = (($845) + ($793)|0);
        $847 = HEAP32[$8>>2]|0;
        $848 = (($847) + -16|0);
        HEAP32[$8>>2] = $848;
        $849 = $848;
        $850 = $849;
        $851 = HEAP32[$850>>2]|0;
        $852 = (($849) + 4)|0;
        $853 = $852;
        $854 = HEAP32[$853>>2]|0;
        $855 = $846;
        $856 = $855;
        HEAP32[$856>>2] = $851;
        $857 = (($855) + 4)|0;
        $858 = $857;
        HEAP32[$858>>2] = $854;
        $859 = (($847) + -8|0);
        $860 = HEAP32[$859>>2]|0;
        $$sum$i130 = (($793) + 8)|0;
        $861 = (($845) + ($$sum$i130)|0);
        HEAP32[$861>>2] = $860;
       }
      } while(0);
      $862 = HEAP32[$2>>2]|0;
      $base$0 = $862;$pc$0 = $33;
      continue L5;
      break;
     }
     case 17:  {
      $863 = $34 >>> 23;
      $864 = $863 & 256;
      $865 = ($864|0)==(0);
      if ($865) {
       $868 = (($base$1) + ($863<<4)|0);
       $877 = $868;
      } else {
       $866 = $863 & 255;
       $867 = (($30) + ($866<<4)|0);
       $877 = $867;
      }
      $869 = $34 >>> 14;
      $870 = $869 & 256;
      $871 = ($870|0)==(0);
      if ($871) {
       $874 = $869 & 511;
       $875 = (($base$1) + ($874<<4)|0);
       $881 = $875;
      } else {
       $872 = $869 & 255;
       $873 = (($30) + ($872<<4)|0);
       $881 = $873;
      }
      $876 = (($877) + 8|0);
      $878 = HEAP32[$876>>2]|0;
      $879 = ($878|0)==(3);
      do {
       if ($879) {
        $880 = (($881) + 8|0);
        $882 = HEAP32[$880>>2]|0;
        $883 = ($882|0)==(3);
        if ($883) {
         $885 = +HEAPF64[$877>>3];
         $886 = +HEAPF64[$881>>3];
         $887 = (+Math_pow((+$885),(+$886)));
         HEAPF64[$84>>3] = $887;
         $888 = ((($base$1) + ($83<<4)|0) + 8|0);
         HEAP32[$888>>2] = 3;
         $base$0 = $base$1;$pc$0 = $33;
         continue L5;
        } else {
         HEAP32[$0>>2] = $33;
         $884 = ($877|0)==(0|0);
         if ($884) {
          label = 199;
          break;
         } else {
          $$0$i133183 = $877;
          label = 193;
          break;
         }
        }
       } else {
        HEAP32[$0>>2] = $33;
        $cond311 = ($878|0)==(4);
        if ($cond311) {
         $889 = HEAP32[$877>>2]|0;
         $890 = (($889) + 16|0);
         $891 = (_luaO_str2d($890,$num$i132)|0);
         $892 = ($891|0)==(0);
         if ($892) {
          label = 199;
         } else {
          $893 = +HEAPF64[$num$i132>>3];
          HEAPF64[$tempb$i42>>3] = $893;
          HEAP32[$15>>2] = 3;
          $$0$i133183 = $tempb$i42;
          label = 193;
         }
        } else {
         label = 199;
        }
       }
      } while(0);
      do {
       if ((label|0) == 193) {
        label = 0;
        $894 = (($881) + 8|0);
        $895 = HEAP32[$894>>2]|0;
        if ((($895|0) == 4)) {
         $896 = HEAP32[$881>>2]|0;
         $897 = (($896) + 16|0);
         $898 = (_luaO_str2d($897,$num$i135)|0);
         $899 = ($898|0)==(0);
         if ($899) {
          label = 199;
          break;
         }
         $900 = +HEAPF64[$num$i135>>3];
         $903 = $900;
        } else if ((($895|0) == 3)) {
         $901 = ($881|0)==(0|0);
         if ($901) {
          label = 199;
          break;
         }
         $$pre297 = +HEAPF64[$881>>3];
         $903 = $$pre297;
        } else {
         label = 199;
         break;
        }
        $902 = +HEAPF64[$$0$i133183>>3];
        $904 = (+Math_pow((+$902),(+$903)));
        HEAPF64[$84>>3] = $904;
        $905 = ((($base$1) + ($83<<4)|0) + 8|0);
        HEAP32[$905>>2] = 3;
       }
      } while(0);
      do {
       if ((label|0) == 199) {
        label = 0;
        $906 = (_luaT_gettmbyobj($L,$877,10)|0);
        $907 = (($906) + 8|0);
        $908 = HEAP32[$907>>2]|0;
        $909 = ($908|0)==(0);
        if ($909) {
         $910 = (_luaT_gettmbyobj($L,$881,10)|0);
         $$phi$trans$insert$i138 = (($910) + 8|0);
         $$pre$i139 = HEAP32[$$phi$trans$insert$i138>>2]|0;
         $911 = ($$pre$i139|0)==(0);
         if ($911) {
          _luaG_aritherror($L,$877,$881);
          break;
         } else {
          $tm$01$i140 = $910;
         }
        } else {
         $tm$01$i140 = $906;
        }
        $912 = HEAP32[$7>>2]|0;
        $913 = $84;
        $914 = $912;
        $915 = (($913) - ($914))|0;
        $916 = HEAP32[$8>>2]|0;
        $917 = $tm$01$i140;
        $918 = $917;
        $919 = HEAP32[$918>>2]|0;
        $920 = (($917) + 4)|0;
        $921 = $920;
        $922 = HEAP32[$921>>2]|0;
        $923 = $916;
        $924 = $923;
        HEAP32[$924>>2] = $919;
        $925 = (($923) + 4)|0;
        $926 = $925;
        HEAP32[$926>>2] = $922;
        $927 = (($tm$01$i140) + 8|0);
        $928 = HEAP32[$927>>2]|0;
        $929 = (($916) + 8|0);
        HEAP32[$929>>2] = $928;
        $930 = HEAP32[$8>>2]|0;
        $931 = (($930) + 16|0);
        $932 = $877;
        $933 = $932;
        $934 = HEAP32[$933>>2]|0;
        $935 = (($932) + 4)|0;
        $936 = $935;
        $937 = HEAP32[$936>>2]|0;
        $938 = $931;
        $939 = $938;
        HEAP32[$939>>2] = $934;
        $940 = (($938) + 4)|0;
        $941 = $940;
        HEAP32[$941>>2] = $937;
        $942 = HEAP32[$876>>2]|0;
        $943 = (($930) + 24|0);
        HEAP32[$943>>2] = $942;
        $944 = HEAP32[$8>>2]|0;
        $945 = (($944) + 32|0);
        $946 = $881;
        $947 = $946;
        $948 = HEAP32[$947>>2]|0;
        $949 = (($946) + 4)|0;
        $950 = $949;
        $951 = HEAP32[$950>>2]|0;
        $952 = $945;
        $953 = $952;
        HEAP32[$953>>2] = $948;
        $954 = (($952) + 4)|0;
        $955 = $954;
        HEAP32[$955>>2] = $951;
        $956 = (($881) + 8|0);
        $957 = HEAP32[$956>>2]|0;
        $958 = (($944) + 40|0);
        HEAP32[$958>>2] = $957;
        $959 = HEAP32[$9>>2]|0;
        $960 = HEAP32[$8>>2]|0;
        $961 = $959;
        $962 = $960;
        $963 = (($961) - ($962))|0;
        $964 = ($963|0)<(49);
        if ($964) {
         _luaD_growstack($L,3);
         $$pre$i144 = HEAP32[$8>>2]|0;
         $966 = $$pre$i144;
        } else {
         $966 = $960;
        }
        $965 = (($966) + 48|0);
        HEAP32[$8>>2] = $965;
        _luaD_call($L,$966,1);
        $967 = HEAP32[$7>>2]|0;
        $968 = (($967) + ($915)|0);
        $969 = HEAP32[$8>>2]|0;
        $970 = (($969) + -16|0);
        HEAP32[$8>>2] = $970;
        $971 = $970;
        $972 = $971;
        $973 = HEAP32[$972>>2]|0;
        $974 = (($971) + 4)|0;
        $975 = $974;
        $976 = HEAP32[$975>>2]|0;
        $977 = $968;
        $978 = $977;
        HEAP32[$978>>2] = $973;
        $979 = (($977) + 4)|0;
        $980 = $979;
        HEAP32[$980>>2] = $976;
        $981 = (($969) + -8|0);
        $982 = HEAP32[$981>>2]|0;
        $$sum$i145 = (($915) + 8)|0;
        $983 = (($967) + ($$sum$i145)|0);
        HEAP32[$983>>2] = $982;
       }
      } while(0);
      $984 = HEAP32[$2>>2]|0;
      $base$0 = $984;$pc$0 = $33;
      continue L5;
      break;
     }
     case 18:  {
      $985 = $34 >>> 23;
      $986 = (($base$1) + ($985<<4)|0);
      $987 = ((($base$1) + ($985<<4)|0) + 8|0);
      $988 = HEAP32[$987>>2]|0;
      $989 = ($988|0)==(3);
      if ($989) {
       $990 = +HEAPF64[$986>>3];
       $991 = -$990;
       HEAPF64[$84>>3] = $991;
       $992 = ((($base$1) + ($83<<4)|0) + 8|0);
       HEAP32[$992>>2] = 3;
       $base$0 = $base$1;$pc$0 = $33;
       continue L5;
      }
      HEAP32[$0>>2] = $33;
      $cond312 = ($988|0)==(4);
      do {
       if ($cond312) {
        $993 = HEAP32[$986>>2]|0;
        $994 = (($993) + 16|0);
        $995 = (_luaO_str2d($994,$num$i147)|0);
        $996 = ($995|0)==(0);
        if ($996) {
         label = 214;
        } else {
         $997 = +HEAPF64[$num$i147>>3];
         HEAPF64[$tempb$i45>>3] = $997;
         HEAP32[$16>>2] = 3;
         $998 = HEAP32[$987>>2]|0;
         if ((($998|0) == 3)) {
          $1003 = ($986|0)==(0|0);
          if ($1003) {
           label = 214;
           break;
          }
         } else if ((($998|0) == 4)) {
          $999 = HEAP32[$986>>2]|0;
          $1000 = (($999) + 16|0);
          $1001 = (_luaO_str2d($1000,$num$i150)|0);
          $1002 = ($1001|0)==(0);
          if ($1002) {
           label = 214;
           break;
          }
         } else {
          label = 214;
          break;
         }
         $1004 = +HEAPF64[$tempb$i45>>3];
         $1005 = -$1004;
         HEAPF64[$84>>3] = $1005;
         $1006 = ((($base$1) + ($83<<4)|0) + 8|0);
         HEAP32[$1006>>2] = 3;
        }
       } else {
        label = 214;
       }
      } while(0);
      do {
       if ((label|0) == 214) {
        label = 0;
        $1007 = (_luaT_gettmbyobj($L,$986,11)|0);
        $1008 = (($1007) + 8|0);
        $1009 = HEAP32[$1008>>2]|0;
        $1010 = ($1009|0)==(0);
        if ($1010) {
         $1011 = (_luaT_gettmbyobj($L,$986,11)|0);
         $$phi$trans$insert$i153 = (($1011) + 8|0);
         $$pre$i154 = HEAP32[$$phi$trans$insert$i153>>2]|0;
         $1012 = ($$pre$i154|0)==(0);
         if ($1012) {
          _luaG_aritherror($L,$986,$986);
          break;
         } else {
          $tm$01$i155 = $1011;
         }
        } else {
         $tm$01$i155 = $1007;
        }
        $1013 = HEAP32[$7>>2]|0;
        $1014 = $84;
        $1015 = $1013;
        $1016 = (($1014) - ($1015))|0;
        $1017 = HEAP32[$8>>2]|0;
        $1018 = $tm$01$i155;
        $1019 = $1018;
        $1020 = HEAP32[$1019>>2]|0;
        $1021 = (($1018) + 4)|0;
        $1022 = $1021;
        $1023 = HEAP32[$1022>>2]|0;
        $1024 = $1017;
        $1025 = $1024;
        HEAP32[$1025>>2] = $1020;
        $1026 = (($1024) + 4)|0;
        $1027 = $1026;
        HEAP32[$1027>>2] = $1023;
        $1028 = (($tm$01$i155) + 8|0);
        $1029 = HEAP32[$1028>>2]|0;
        $1030 = (($1017) + 8|0);
        HEAP32[$1030>>2] = $1029;
        $1031 = HEAP32[$8>>2]|0;
        $1032 = (($1031) + 16|0);
        $1033 = $986;
        $1034 = $1033;
        $1035 = HEAP32[$1034>>2]|0;
        $1036 = (($1033) + 4)|0;
        $1037 = $1036;
        $1038 = HEAP32[$1037>>2]|0;
        $1039 = $1032;
        $1040 = $1039;
        HEAP32[$1040>>2] = $1035;
        $1041 = (($1039) + 4)|0;
        $1042 = $1041;
        HEAP32[$1042>>2] = $1038;
        $1043 = HEAP32[$987>>2]|0;
        $1044 = (($1031) + 24|0);
        HEAP32[$1044>>2] = $1043;
        $1045 = HEAP32[$8>>2]|0;
        $1046 = (($1045) + 32|0);
        $1047 = $986;
        $1048 = $1047;
        $1049 = HEAP32[$1048>>2]|0;
        $1050 = (($1047) + 4)|0;
        $1051 = $1050;
        $1052 = HEAP32[$1051>>2]|0;
        $1053 = $1046;
        $1054 = $1053;
        HEAP32[$1054>>2] = $1049;
        $1055 = (($1053) + 4)|0;
        $1056 = $1055;
        HEAP32[$1056>>2] = $1052;
        $1057 = HEAP32[$987>>2]|0;
        $1058 = (($1045) + 40|0);
        HEAP32[$1058>>2] = $1057;
        $1059 = HEAP32[$9>>2]|0;
        $1060 = HEAP32[$8>>2]|0;
        $1061 = $1059;
        $1062 = $1060;
        $1063 = (($1061) - ($1062))|0;
        $1064 = ($1063|0)<(49);
        if ($1064) {
         _luaD_growstack($L,3);
         $$pre$i159 = HEAP32[$8>>2]|0;
         $1066 = $$pre$i159;
        } else {
         $1066 = $1060;
        }
        $1065 = (($1066) + 48|0);
        HEAP32[$8>>2] = $1065;
        _luaD_call($L,$1066,1);
        $1067 = HEAP32[$7>>2]|0;
        $1068 = (($1067) + ($1016)|0);
        $1069 = HEAP32[$8>>2]|0;
        $1070 = (($1069) + -16|0);
        HEAP32[$8>>2] = $1070;
        $1071 = $1070;
        $1072 = $1071;
        $1073 = HEAP32[$1072>>2]|0;
        $1074 = (($1071) + 4)|0;
        $1075 = $1074;
        $1076 = HEAP32[$1075>>2]|0;
        $1077 = $1068;
        $1078 = $1077;
        HEAP32[$1078>>2] = $1073;
        $1079 = (($1077) + 4)|0;
        $1080 = $1079;
        HEAP32[$1080>>2] = $1076;
        $1081 = (($1069) + -8|0);
        $1082 = HEAP32[$1081>>2]|0;
        $$sum$i160 = (($1016) + 8)|0;
        $1083 = (($1067) + ($$sum$i160)|0);
        HEAP32[$1083>>2] = $1082;
       }
      } while(0);
      $1084 = HEAP32[$2>>2]|0;
      $base$0 = $1084;$pc$0 = $33;
      continue L5;
      break;
     }
     case 19:  {
      $1085 = $34 >>> 23;
      $1086 = ((($base$1) + ($1085<<4)|0) + 8|0);
      $1087 = HEAP32[$1086>>2]|0;
      $1088 = ($1087|0)==(0);
      if ($1088) {
       $1094 = 1;
      } else {
       $1089 = ($1087|0)==(1);
       if ($1089) {
        $1090 = (($base$1) + ($1085<<4)|0);
        $1091 = HEAP32[$1090>>2]|0;
        $1092 = ($1091|0)==(0);
        $1094 = $1092;
       } else {
        $1094 = 0;
       }
      }
      $1093 = $1094&1;
      HEAP32[$84>>2] = $1093;
      $1095 = ((($base$1) + ($83<<4)|0) + 8|0);
      HEAP32[$1095>>2] = 1;
      $base$0 = $base$1;$pc$0 = $33;
      continue L5;
      break;
     }
     case 20:  {
      $1096 = $34 >>> 23;
      $1097 = (($base$1) + ($1096<<4)|0);
      $1098 = ((($base$1) + ($1096<<4)|0) + 8|0);
      $1099 = HEAP32[$1098>>2]|0;
      if ((($1099|0) == 5)) {
       $1100 = HEAP32[$1097>>2]|0;
       $1101 = (_luaH_getn($1100)|0);
       $1102 = (+($1101|0));
       HEAPF64[$84>>3] = $1102;
       $1103 = ((($base$1) + ($83<<4)|0) + 8|0);
       HEAP32[$1103>>2] = 3;
       $base$0 = $base$1;$pc$0 = $33;
       continue L5;
      } else if ((($1099|0) == 4)) {
       $1104 = HEAP32[$1097>>2]|0;
       $1105 = (($1104) + 12|0);
       $1106 = HEAP32[$1105>>2]|0;
       $1107 = (+($1106>>>0));
       HEAPF64[$84>>3] = $1107;
       $1108 = ((($base$1) + ($83<<4)|0) + 8|0);
       HEAP32[$1108>>2] = 3;
       $base$0 = $base$1;$pc$0 = $33;
       continue L5;
      } else {
       HEAP32[$0>>2] = $33;
       $1109 = (_luaT_gettmbyobj($L,$1097,12)|0);
       $1110 = (($1109) + 8|0);
       $1111 = HEAP32[$1110>>2]|0;
       $1112 = ($1111|0)==(0);
       if ($1112) {
        $1113 = (_luaT_gettmbyobj($L,1648,12)|0);
        $$phi$trans$insert$i = (($1113) + 8|0);
        $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
        $1114 = ($$pre$i|0)==(0);
        if ($1114) {
         _luaG_typeerror($L,$1097,4024);
        } else {
         $tm$01$i = $1113;
         label = 230;
        }
       } else {
        $tm$01$i = $1109;
        label = 230;
       }
       if ((label|0) == 230) {
        label = 0;
        $1115 = HEAP32[$7>>2]|0;
        $1116 = $84;
        $1117 = $1115;
        $1118 = (($1116) - ($1117))|0;
        $1119 = HEAP32[$8>>2]|0;
        $1120 = $tm$01$i;
        $1121 = $1120;
        $1122 = HEAP32[$1121>>2]|0;
        $1123 = (($1120) + 4)|0;
        $1124 = $1123;
        $1125 = HEAP32[$1124>>2]|0;
        $1126 = $1119;
        $1127 = $1126;
        HEAP32[$1127>>2] = $1122;
        $1128 = (($1126) + 4)|0;
        $1129 = $1128;
        HEAP32[$1129>>2] = $1125;
        $1130 = (($tm$01$i) + 8|0);
        $1131 = HEAP32[$1130>>2]|0;
        $1132 = (($1119) + 8|0);
        HEAP32[$1132>>2] = $1131;
        $1133 = HEAP32[$8>>2]|0;
        $1134 = (($1133) + 16|0);
        $1135 = $1097;
        $1136 = $1135;
        $1137 = HEAP32[$1136>>2]|0;
        $1138 = (($1135) + 4)|0;
        $1139 = $1138;
        $1140 = HEAP32[$1139>>2]|0;
        $1141 = $1134;
        $1142 = $1141;
        HEAP32[$1142>>2] = $1137;
        $1143 = (($1141) + 4)|0;
        $1144 = $1143;
        HEAP32[$1144>>2] = $1140;
        $1145 = HEAP32[$1098>>2]|0;
        $1146 = (($1133) + 24|0);
        HEAP32[$1146>>2] = $1145;
        $1147 = HEAP32[$8>>2]|0;
        $1148 = (($1147) + 32|0);
        $1149 = 1648;
        $1150 = $1149;
        $1151 = HEAP32[$1150>>2]|0;
        $1152 = (($1149) + 4)|0;
        $1153 = $1152;
        $1154 = HEAP32[$1153>>2]|0;
        $1155 = $1148;
        $1156 = $1155;
        HEAP32[$1156>>2] = $1151;
        $1157 = (($1155) + 4)|0;
        $1158 = $1157;
        HEAP32[$1158>>2] = $1154;
        $1159 = (($1147) + 40|0);
        HEAP32[$1159>>2] = $17;
        $1160 = HEAP32[$9>>2]|0;
        $1161 = HEAP32[$8>>2]|0;
        $1162 = $1160;
        $1163 = $1161;
        $1164 = (($1162) - ($1163))|0;
        $1165 = ($1164|0)<(49);
        if ($1165) {
         _luaD_growstack($L,3);
         $$pre$i48 = HEAP32[$8>>2]|0;
         $1167 = $$pre$i48;
        } else {
         $1167 = $1161;
        }
        $1166 = (($1167) + 48|0);
        HEAP32[$8>>2] = $1166;
        _luaD_call($L,$1167,1);
        $1168 = HEAP32[$7>>2]|0;
        $1169 = (($1168) + ($1118)|0);
        $1170 = HEAP32[$8>>2]|0;
        $1171 = (($1170) + -16|0);
        HEAP32[$8>>2] = $1171;
        $1172 = $1171;
        $1173 = $1172;
        $1174 = HEAP32[$1173>>2]|0;
        $1175 = (($1172) + 4)|0;
        $1176 = $1175;
        $1177 = HEAP32[$1176>>2]|0;
        $1178 = $1169;
        $1179 = $1178;
        HEAP32[$1179>>2] = $1174;
        $1180 = (($1178) + 4)|0;
        $1181 = $1180;
        HEAP32[$1181>>2] = $1177;
        $1182 = (($1170) + -8|0);
        $1183 = HEAP32[$1182>>2]|0;
        $$sum$i = (($1118) + 8)|0;
        $1184 = (($1168) + ($$sum$i)|0);
        HEAP32[$1184>>2] = $1183;
       }
       $1185 = HEAP32[$2>>2]|0;
       $base$0 = $1185;$pc$0 = $33;
       continue L5;
      }
      break;
     }
     case 21:  {
      $1186 = $34 >>> 23;
      $1187 = $34 >>> 14;
      $1188 = $1187 & 511;
      HEAP32[$0>>2] = $33;
      $1189 = (1 - ($1186))|0;
      $1190 = (($1189) + ($1188))|0;
      _luaV_concat($L,$1190,$1188);
      $1191 = HEAP32[$6>>2]|0;
      $1192 = (($1191) + 68|0);
      $1193 = HEAP32[$1192>>2]|0;
      $1194 = (($1191) + 64|0);
      $1195 = HEAP32[$1194>>2]|0;
      $1196 = ($1193>>>0)<($1195>>>0);
      if (!($1196)) {
       _luaC_step($L);
      }
      $1197 = HEAP32[$2>>2]|0;
      $1198 = (($1197) + ($1186<<4)|0);
      $1199 = (($1197) + ($83<<4)|0);
      $1200 = $1198;
      $1201 = $1200;
      $1202 = HEAP32[$1201>>2]|0;
      $1203 = (($1200) + 4)|0;
      $1204 = $1203;
      $1205 = HEAP32[$1204>>2]|0;
      $1206 = $1199;
      $1207 = $1206;
      HEAP32[$1207>>2] = $1202;
      $1208 = (($1206) + 4)|0;
      $1209 = $1208;
      HEAP32[$1209>>2] = $1205;
      $1210 = ((($1197) + ($1186<<4)|0) + 8|0);
      $1211 = HEAP32[$1210>>2]|0;
      $1212 = ((($1197) + ($83<<4)|0) + 8|0);
      HEAP32[$1212>>2] = $1211;
      $base$0 = $1197;$pc$0 = $33;
      continue L5;
      break;
     }
     case 22:  {
      $1213 = $34 >>> 14;
      $$sum28 = (($1213) + -131070)|0;
      $1214 = (($pc$0) + ($$sum28<<2)|0);
      $base$0 = $base$1;$pc$0 = $1214;
      continue L5;
      break;
     }
     case 23:  {
      $1215 = $34 >>> 23;
      $1216 = $1215 & 256;
      $1217 = ($1216|0)==(0);
      if ($1217) {
       $1220 = (($base$1) + ($1215<<4)|0);
       $1229 = $1220;
      } else {
       $1218 = $1215 & 255;
       $1219 = (($30) + ($1218<<4)|0);
       $1229 = $1219;
      }
      $1221 = $34 >>> 14;
      $1222 = $1221 & 256;
      $1223 = ($1222|0)==(0);
      if ($1223) {
       $1226 = $1221 & 511;
       $1227 = (($base$1) + ($1226<<4)|0);
       $1232 = $1227;
      } else {
       $1224 = $1221 & 255;
       $1225 = (($30) + ($1224<<4)|0);
       $1232 = $1225;
      }
      HEAP32[$0>>2] = $33;
      $1228 = (($1229) + 8|0);
      $1230 = HEAP32[$1228>>2]|0;
      $1231 = (($1232) + 8|0);
      $1233 = HEAP32[$1231>>2]|0;
      $1234 = ($1230|0)==($1233|0);
      if ($1234) {
       $1235 = (_luaV_equalval($L,$1229,$1232)|0);
       $1236 = ($1235|0)!=(0);
       $1238 = $1236;
      } else {
       $1238 = 0;
      }
      $1237 = $1238&1;
      $1239 = ($1237|0)==($83|0);
      if ($1239) {
       $1240 = HEAP32[$33>>2]|0;
       $1241 = $1240 >>> 14;
       $$sum27 = (($1241) + -131070)|0;
       $1242 = (($pc$0) + ($$sum27<<2)|0);
       $pc$1 = $1242;
      } else {
       $pc$1 = $33;
      }
      $1243 = HEAP32[$2>>2]|0;
      $1244 = (($pc$1) + 4|0);
      $base$0 = $1243;$pc$0 = $1244;
      continue L5;
      break;
     }
     case 24:  {
      HEAP32[$0>>2] = $33;
      $1245 = $34 >>> 23;
      $1246 = $1245 & 256;
      $1247 = ($1246|0)==(0);
      if ($1247) {
       $1250 = (($base$1) + ($1245<<4)|0);
       $1258 = $1250;
      } else {
       $1248 = $1245 & 255;
       $1249 = (($30) + ($1248<<4)|0);
       $1258 = $1249;
      }
      $1251 = $34 >>> 14;
      $1252 = $1251 & 256;
      $1253 = ($1252|0)==(0);
      if ($1253) {
       $1256 = $1251 & 511;
       $1257 = (($base$1) + ($1256<<4)|0);
       $1259 = $1257;
      } else {
       $1254 = $1251 & 255;
       $1255 = (($30) + ($1254<<4)|0);
       $1259 = $1255;
      }
      $1260 = (_luaV_lessthan($L,$1258,$1259)|0);
      $1261 = ($1260|0)==($83|0);
      if ($1261) {
       $1262 = HEAP32[$33>>2]|0;
       $1263 = $1262 >>> 14;
       $$sum26 = (($1263) + -131070)|0;
       $1264 = (($pc$0) + ($$sum26<<2)|0);
       $pc$2 = $1264;
      } else {
       $pc$2 = $33;
      }
      $1265 = HEAP32[$2>>2]|0;
      $1266 = (($pc$2) + 4|0);
      $base$0 = $1265;$pc$0 = $1266;
      continue L5;
      break;
     }
     case 25:  {
      HEAP32[$0>>2] = $33;
      $1267 = $34 >>> 23;
      $1268 = $1267 & 256;
      $1269 = ($1268|0)==(0);
      if ($1269) {
       $1272 = (($base$1) + ($1267<<4)|0);
       $1281 = $1272;
      } else {
       $1270 = $1267 & 255;
       $1271 = (($30) + ($1270<<4)|0);
       $1281 = $1271;
      }
      $1273 = $34 >>> 14;
      $1274 = $1273 & 256;
      $1275 = ($1274|0)==(0);
      if ($1275) {
       $1278 = $1273 & 511;
       $1279 = (($base$1) + ($1278<<4)|0);
       $1284 = $1279;
      } else {
       $1276 = $1273 & 255;
       $1277 = (($30) + ($1276<<4)|0);
       $1284 = $1277;
      }
      $1280 = (($1281) + 8|0);
      $1282 = HEAP32[$1280>>2]|0;
      $1283 = (($1284) + 8|0);
      $1285 = HEAP32[$1283>>2]|0;
      $1286 = ($1282|0)==($1285|0);
      do {
       if ($1286) {
        if ((($1282|0) == 3)) {
         $1288 = +HEAPF64[$1281>>3];
         $1289 = +HEAPF64[$1284>>3];
         $1290 = $1288 <= $1289;
         $1291 = $1290&1;
         $$0$i49 = $1291;
         break;
        } else if ((($1282|0) == 4)) {
         $1292 = HEAP32[$1281>>2]|0;
         $1293 = HEAP32[$1284>>2]|0;
         $1294 = (($1292) + 16|0);
         $1295 = (($1293) + 16|0);
         $1296 = (_strcoll($1294,$1295)|0);
         $1297 = ($1296|0)==(0);
         L361: do {
          if ($1297) {
           $1298 = (($1293) + 12|0);
           $1299 = (($1292) + 12|0);
           $1300 = HEAP32[$1298>>2]|0;
           $1301 = HEAP32[$1299>>2]|0;
           $l$01$i$i = $1294;$ll$02$i$i = $1301;$lr$04$i$i = $1300;$r$03$i$i = $1295;
           while(1) {
            $1302 = (_strlen(($l$01$i$i|0))|0);
            $1303 = ($1302|0)==($lr$04$i$i|0);
            $1304 = ($1302|0)==($ll$02$i$i|0);
            if ($1303) {
             break;
            }
            if ($1304) {
             $$0$i$i = -1;
             break L361;
            }
            $1307 = (($1302) + 1)|0;
            $1308 = (($l$01$i$i) + ($1307)|0);
            $1309 = (($ll$02$i$i) - ($1307))|0;
            $1310 = (($r$03$i$i) + ($1307)|0);
            $1311 = (($lr$04$i$i) - ($1307))|0;
            $1312 = (_strcoll($1308,$1310)|0);
            $1313 = ($1312|0)==(0);
            if ($1313) {
             $l$01$i$i = $1308;$ll$02$i$i = $1309;$lr$04$i$i = $1311;$r$03$i$i = $1310;
            } else {
             $$0$i$i = $1312;
             break L361;
            }
           }
           $1305 = $1304&1;
           $1306 = $1305 ^ 1;
           $$0$i$i = $1306;
          } else {
           $$0$i$i = $1296;
          }
         } while(0);
         $1314 = ($$0$i$i|0)<(1);
         $1315 = $1314&1;
         $$0$i49 = $1315;
         break;
        } else {
         $1316 = (_luaT_gettmbyobj($L,$1281,14)|0);
         $1317 = (($1316) + 8|0);
         $1318 = HEAP32[$1317>>2]|0;
         $1319 = ($1318|0)==(0);
         if (!($1319)) {
          $1320 = (_luaT_gettmbyobj($L,$1284,14)|0);
          $1321 = (_luaO_rawequalObj($1316,$1320)|0);
          $1322 = ($1321|0)==(0);
          if (!($1322)) {
           $1323 = HEAP32[$8>>2]|0;
           $1324 = HEAP32[$7>>2]|0;
           $1325 = $1323;
           $1326 = $1324;
           $1327 = (($1325) - ($1326))|0;
           $1328 = $1316;
           $1329 = $1328;
           $1330 = HEAP32[$1329>>2]|0;
           $1331 = (($1328) + 4)|0;
           $1332 = $1331;
           $1333 = HEAP32[$1332>>2]|0;
           $1334 = $1323;
           $1335 = $1334;
           HEAP32[$1335>>2] = $1330;
           $1336 = (($1334) + 4)|0;
           $1337 = $1336;
           HEAP32[$1337>>2] = $1333;
           $1338 = HEAP32[$1317>>2]|0;
           $1339 = (($1323) + 8|0);
           HEAP32[$1339>>2] = $1338;
           $1340 = HEAP32[$8>>2]|0;
           $1341 = (($1340) + 16|0);
           $1342 = $1281;
           $1343 = $1342;
           $1344 = HEAP32[$1343>>2]|0;
           $1345 = (($1342) + 4)|0;
           $1346 = $1345;
           $1347 = HEAP32[$1346>>2]|0;
           $1348 = $1341;
           $1349 = $1348;
           HEAP32[$1349>>2] = $1344;
           $1350 = (($1348) + 4)|0;
           $1351 = $1350;
           HEAP32[$1351>>2] = $1347;
           $1352 = HEAP32[$1280>>2]|0;
           $1353 = (($1340) + 24|0);
           HEAP32[$1353>>2] = $1352;
           $1354 = HEAP32[$8>>2]|0;
           $1355 = (($1354) + 32|0);
           $1356 = $1284;
           $1357 = $1356;
           $1358 = HEAP32[$1357>>2]|0;
           $1359 = (($1356) + 4)|0;
           $1360 = $1359;
           $1361 = HEAP32[$1360>>2]|0;
           $1362 = $1355;
           $1363 = $1362;
           HEAP32[$1363>>2] = $1358;
           $1364 = (($1362) + 4)|0;
           $1365 = $1364;
           HEAP32[$1365>>2] = $1361;
           $1366 = HEAP32[$1283>>2]|0;
           $1367 = (($1354) + 40|0);
           HEAP32[$1367>>2] = $1366;
           $1368 = HEAP32[$9>>2]|0;
           $1369 = HEAP32[$8>>2]|0;
           $1370 = $1368;
           $1371 = $1369;
           $1372 = (($1370) - ($1371))|0;
           $1373 = ($1372|0)<(49);
           if ($1373) {
            _luaD_growstack($L,3);
            $$pre$i$i = HEAP32[$8>>2]|0;
            $1375 = $$pre$i$i;
           } else {
            $1375 = $1369;
           }
           $1374 = (($1375) + 48|0);
           HEAP32[$8>>2] = $1374;
           _luaD_call($L,$1375,1);
           $1376 = HEAP32[$7>>2]|0;
           $1377 = (($1376) + ($1327)|0);
           $1378 = HEAP32[$8>>2]|0;
           $1379 = (($1378) + -16|0);
           HEAP32[$8>>2] = $1379;
           $1380 = $1379;
           $1381 = $1380;
           $1382 = HEAP32[$1381>>2]|0;
           $1383 = (($1380) + 4)|0;
           $1384 = $1383;
           $1385 = HEAP32[$1384>>2]|0;
           $1386 = $1377;
           $1387 = $1386;
           HEAP32[$1387>>2] = $1382;
           $1388 = (($1386) + 4)|0;
           $1389 = $1388;
           HEAP32[$1389>>2] = $1385;
           $1390 = (($1378) + -8|0);
           $1391 = HEAP32[$1390>>2]|0;
           $$sum$i$i = (($1327) + 8)|0;
           $1392 = (($1376) + ($$sum$i$i)|0);
           HEAP32[$1392>>2] = $1391;
           $1393 = HEAP32[$8>>2]|0;
           $1394 = (($1393) + 8|0);
           $1395 = HEAP32[$1394>>2]|0;
           $1396 = ($1395|0)==(0);
           if ($1396) {
            $1400 = 0;
           } else {
            $1397 = ($1395|0)==(1);
            if ($1397) {
             $1398 = HEAP32[$1393>>2]|0;
             $phitmp$i$i = ($1398|0)!=(0);
             $1400 = $phitmp$i$i;
            } else {
             $1400 = 1;
            }
           }
           $1399 = $1400&1;
           $$0$i49 = $1399;
           break;
          }
         }
         $1401 = (_luaT_gettmbyobj($L,$1284,13)|0);
         $1402 = (($1401) + 8|0);
         $1403 = HEAP32[$1402>>2]|0;
         $1404 = ($1403|0)==(0);
         if (!($1404)) {
          $1405 = (_luaT_gettmbyobj($L,$1281,13)|0);
          $1406 = (_luaO_rawequalObj($1401,$1405)|0);
          $1407 = ($1406|0)==(0);
          if (!($1407)) {
           $1408 = HEAP32[$8>>2]|0;
           $1409 = HEAP32[$7>>2]|0;
           $1410 = $1408;
           $1411 = $1409;
           $1412 = (($1410) - ($1411))|0;
           $1413 = $1401;
           $1414 = $1413;
           $1415 = HEAP32[$1414>>2]|0;
           $1416 = (($1413) + 4)|0;
           $1417 = $1416;
           $1418 = HEAP32[$1417>>2]|0;
           $1419 = $1408;
           $1420 = $1419;
           HEAP32[$1420>>2] = $1415;
           $1421 = (($1419) + 4)|0;
           $1422 = $1421;
           HEAP32[$1422>>2] = $1418;
           $1423 = HEAP32[$1402>>2]|0;
           $1424 = (($1408) + 8|0);
           HEAP32[$1424>>2] = $1423;
           $1425 = HEAP32[$8>>2]|0;
           $1426 = (($1425) + 16|0);
           $1427 = $1284;
           $1428 = $1427;
           $1429 = HEAP32[$1428>>2]|0;
           $1430 = (($1427) + 4)|0;
           $1431 = $1430;
           $1432 = HEAP32[$1431>>2]|0;
           $1433 = $1426;
           $1434 = $1433;
           HEAP32[$1434>>2] = $1429;
           $1435 = (($1433) + 4)|0;
           $1436 = $1435;
           HEAP32[$1436>>2] = $1432;
           $1437 = HEAP32[$1283>>2]|0;
           $1438 = (($1425) + 24|0);
           HEAP32[$1438>>2] = $1437;
           $1439 = HEAP32[$8>>2]|0;
           $1440 = (($1439) + 32|0);
           $1441 = $1281;
           $1442 = $1441;
           $1443 = HEAP32[$1442>>2]|0;
           $1444 = (($1441) + 4)|0;
           $1445 = $1444;
           $1446 = HEAP32[$1445>>2]|0;
           $1447 = $1440;
           $1448 = $1447;
           HEAP32[$1448>>2] = $1443;
           $1449 = (($1447) + 4)|0;
           $1450 = $1449;
           HEAP32[$1450>>2] = $1446;
           $1451 = HEAP32[$1280>>2]|0;
           $1452 = (($1439) + 40|0);
           HEAP32[$1452>>2] = $1451;
           $1453 = HEAP32[$9>>2]|0;
           $1454 = HEAP32[$8>>2]|0;
           $1455 = $1453;
           $1456 = $1454;
           $1457 = (($1455) - ($1456))|0;
           $1458 = ($1457|0)<(49);
           if ($1458) {
            _luaD_growstack($L,3);
            $$pre$i5$i = HEAP32[$8>>2]|0;
            $1460 = $$pre$i5$i;
           } else {
            $1460 = $1454;
           }
           $1459 = (($1460) + 48|0);
           HEAP32[$8>>2] = $1459;
           _luaD_call($L,$1460,1);
           $1461 = HEAP32[$7>>2]|0;
           $1462 = (($1461) + ($1412)|0);
           $1463 = HEAP32[$8>>2]|0;
           $1464 = (($1463) + -16|0);
           HEAP32[$8>>2] = $1464;
           $1465 = $1464;
           $1466 = $1465;
           $1467 = HEAP32[$1466>>2]|0;
           $1468 = (($1465) + 4)|0;
           $1469 = $1468;
           $1470 = HEAP32[$1469>>2]|0;
           $1471 = $1462;
           $1472 = $1471;
           HEAP32[$1472>>2] = $1467;
           $1473 = (($1471) + 4)|0;
           $1474 = $1473;
           HEAP32[$1474>>2] = $1470;
           $1475 = (($1463) + -8|0);
           $1476 = HEAP32[$1475>>2]|0;
           $$sum$i6$i = (($1412) + 8)|0;
           $1477 = (($1461) + ($$sum$i6$i)|0);
           HEAP32[$1477>>2] = $1476;
           $1478 = HEAP32[$8>>2]|0;
           $1479 = (($1478) + 8|0);
           $1480 = HEAP32[$1479>>2]|0;
           $1481 = ($1480|0)==(0);
           if ($1481) {
            $1485 = 0;
           } else {
            $1482 = ($1480|0)==(1);
            if ($1482) {
             $1483 = HEAP32[$1478>>2]|0;
             $phitmp$i2$i = ($1483|0)!=(0);
             $1485 = $phitmp$i2$i;
            } else {
             $1485 = 1;
            }
           }
           $1484 = $1485&1;
           $1486 = $1484 ^ 1;
           $$0$i49 = $1486;
           break;
          }
         }
         $1487 = (_luaG_ordererror($L,$1281,$1284)|0);
         $$0$i49 = $1487;
         break;
        }
       } else {
        $1287 = (_luaG_ordererror($L,$1281,$1284)|0);
        $$0$i49 = $1287;
       }
      } while(0);
      $1488 = ($$0$i49|0)==($83|0);
      if ($1488) {
       $1489 = HEAP32[$33>>2]|0;
       $1490 = $1489 >>> 14;
       $$sum25 = (($1490) + -131070)|0;
       $1491 = (($pc$0) + ($$sum25<<2)|0);
       $pc$3 = $1491;
      } else {
       $pc$3 = $33;
      }
      $1492 = HEAP32[$2>>2]|0;
      $1493 = (($pc$3) + 4|0);
      $base$0 = $1492;$pc$0 = $1493;
      continue L5;
      break;
     }
     case 26:  {
      $1494 = ((($base$1) + ($83<<4)|0) + 8|0);
      $1495 = HEAP32[$1494>>2]|0;
      $1496 = ($1495|0)==(0);
      if ($1496) {
       $1501 = 1;
      } else {
       $1497 = ($1495|0)==(1);
       if ($1497) {
        $1498 = HEAP32[$84>>2]|0;
        $1499 = ($1498|0)==(0);
        $1501 = $1499;
       } else {
        $1501 = 0;
       }
      }
      $1500 = $1501&1;
      $1502 = $34 >>> 14;
      $1503 = $1502 & 511;
      $1504 = ($1500|0)==($1503|0);
      if ($1504) {
       $pc$4 = $33;
      } else {
       $1505 = HEAP32[$33>>2]|0;
       $1506 = $1505 >>> 14;
       $$sum24 = (($1506) + -131070)|0;
       $1507 = (($pc$0) + ($$sum24<<2)|0);
       $pc$4 = $1507;
      }
      $1508 = (($pc$4) + 4|0);
      $base$0 = $base$1;$pc$0 = $1508;
      continue L5;
      break;
     }
     case 27:  {
      $1509 = $34 >>> 23;
      $1510 = (($base$1) + ($1509<<4)|0);
      $1511 = ((($base$1) + ($1509<<4)|0) + 8|0);
      $1512 = HEAP32[$1511>>2]|0;
      $1513 = ($1512|0)==(0);
      if ($1513) {
       $1518 = 1;
      } else {
       $1514 = ($1512|0)==(1);
       if ($1514) {
        $1515 = HEAP32[$1510>>2]|0;
        $1516 = ($1515|0)==(0);
        $1518 = $1516;
       } else {
        $1518 = 0;
       }
      }
      $1517 = $1518&1;
      $1519 = $34 >>> 14;
      $1520 = $1519 & 511;
      $1521 = ($1517|0)==($1520|0);
      if ($1521) {
       $pc$5 = $33;
      } else {
       $1522 = $1510;
       $1523 = $1522;
       $1524 = HEAP32[$1523>>2]|0;
       $1525 = (($1522) + 4)|0;
       $1526 = $1525;
       $1527 = HEAP32[$1526>>2]|0;
       $1528 = $84;
       $1529 = $1528;
       HEAP32[$1529>>2] = $1524;
       $1530 = (($1528) + 4)|0;
       $1531 = $1530;
       HEAP32[$1531>>2] = $1527;
       $1532 = ((($base$1) + ($83<<4)|0) + 8|0);
       HEAP32[$1532>>2] = $1512;
       $1533 = HEAP32[$33>>2]|0;
       $1534 = $1533 >>> 14;
       $$sum23 = (($1534) + -131070)|0;
       $1535 = (($pc$0) + ($$sum23<<2)|0);
       $pc$5 = $1535;
      }
      $1536 = (($pc$5) + 4|0);
      $base$0 = $base$1;$pc$0 = $1536;
      continue L5;
      break;
     }
     case 29:  {
      $1550 = $34 >>> 23;
      $1551 = ($1550|0)==(0);
      if (!($1551)) {
       $$sum21 = (($83) + ($1550))|0;
       $1552 = (($base$1) + ($$sum21<<4)|0);
       HEAP32[$8>>2] = $1552;
      }
      HEAP32[$0>>2] = $33;
      $1553 = (_luaD_precall($L,$84,-1)|0);
      if ((($1553|0) == 0)) {
       break L5;
      } else if (!((($1553|0) == 1))) {
       label = 389;
       break L1;
      }
      $1599 = HEAP32[$2>>2]|0;
      $base$0 = $1599;$pc$0 = $33;
      continue L5;
      break;
     }
     case 28:  {
      $1537 = $34 >>> 23;
      $1538 = $34 >>> 14;
      $1539 = $1538 & 511;
      $1540 = (($1539) + -1)|0;
      $1541 = ($1537|0)==(0);
      if (!($1541)) {
       $$sum22 = (($83) + ($1537))|0;
       $1542 = (($base$1) + ($$sum22<<4)|0);
       HEAP32[$8>>2] = $1542;
      }
      HEAP32[$0>>2] = $33;
      $1543 = (_luaD_precall($L,$84,$1540)|0);
      if ((($1543|0) == 0)) {
       label = 311;
       break L3;
      } else if (!((($1543|0) == 1))) {
       label = 389;
       break L1;
      }
      $1545 = ($1539|0)==(0);
      if (!($1545)) {
       $1546 = HEAP32[$1>>2]|0;
       $1547 = (($1546) + 8|0);
       $1548 = HEAP32[$1547>>2]|0;
       HEAP32[$8>>2] = $1548;
      }
      $1549 = HEAP32[$2>>2]|0;
      $base$0 = $1549;$pc$0 = $33;
      continue L5;
      break;
     }
     case 31:  {
      $$sum15 = (($83) + 2)|0;
      $1612 = (($base$1) + ($$sum15<<4)|0);
      $1613 = +HEAPF64[$1612>>3];
      $1614 = +HEAPF64[$84>>3];
      $1615 = $1613 + $1614;
      $$sum16 = (($83) + 1)|0;
      $1616 = (($base$1) + ($$sum16<<4)|0);
      $1617 = +HEAPF64[$1616>>3];
      $1618 = $1613 > 0.0;
      if ($1618) {
       $1619 = !($1615 <= $1617);
       if ($1619) {
        $base$0 = $base$1;$pc$0 = $33;
        continue L5;
       }
      } else {
       $1620 = !($1617 <= $1615);
       if ($1620) {
        $base$0 = $base$1;$pc$0 = $33;
        continue L5;
       }
      }
      $1621 = $34 >>> 14;
      $$sum17 = (($1621) + -131070)|0;
      $1622 = (($pc$0) + ($$sum17<<2)|0);
      HEAPF64[$84>>3] = $1615;
      $1623 = ((($base$1) + ($83<<4)|0) + 8|0);
      HEAP32[$1623>>2] = 3;
      $$sum18 = (($83) + 3)|0;
      $1624 = (($base$1) + ($$sum18<<4)|0);
      HEAPF64[$1624>>3] = $1615;
      $1625 = ((($base$1) + ($$sum18<<4)|0) + 8|0);
      HEAP32[$1625>>2] = 3;
      $base$0 = $base$1;$pc$0 = $1622;
      continue L5;
      break;
     }
     case 32:  {
      $$sum12 = (($83) + 1)|0;
      $1626 = (($base$1) + ($$sum12<<4)|0);
      $$sum13 = (($83) + 2)|0;
      $1627 = (($base$1) + ($$sum13<<4)|0);
      HEAP32[$0>>2] = $33;
      $1628 = ((($base$1) + ($83<<4)|0) + 8|0);
      $1629 = HEAP32[$1628>>2]|0;
      $1630 = ($1629|0)==(3);
      do {
       if ($1630) {
        label = 340;
       } else {
        $cond313 = ($1629|0)==(4);
        if ($cond313) {
         $1631 = HEAP32[$84>>2]|0;
         $1632 = (($1631) + 16|0);
         $1633 = (_luaO_str2d($1632,$num$i)|0);
         $1634 = ($1633|0)==(0);
         if (!($1634)) {
          $1635 = +HEAPF64[$num$i>>3];
          HEAPF64[$84>>3] = $1635;
          HEAP32[$1628>>2] = 3;
          $1636 = ($84|0)==(0|0);
          if (!($1636)) {
           label = 340;
           break;
          }
         }
        }
        _luaG_runerror($L,4040,$vararg_buffer);
       }
      } while(0);
      L437: do {
       if ((label|0) == 340) {
        label = 0;
        $1637 = ((($base$1) + ($$sum12<<4)|0) + 8|0);
        $1638 = HEAP32[$1637>>2]|0;
        $1639 = ($1638|0)==(3);
        do {
         if (!($1639)) {
          $cond314 = ($1638|0)==(4);
          if ($cond314) {
           $1640 = HEAP32[$1626>>2]|0;
           $1641 = (($1640) + 16|0);
           $1642 = (_luaO_str2d($1641,$num$i51)|0);
           $1643 = ($1642|0)==(0);
           if (!($1643)) {
            $1644 = +HEAPF64[$num$i51>>3];
            HEAPF64[$1626>>3] = $1644;
            HEAP32[$1637>>2] = 3;
            break;
           }
          }
          _luaG_runerror($L,4080,$vararg_buffer1);
          break L437;
         }
        } while(0);
        $1645 = ((($base$1) + ($$sum13<<4)|0) + 8|0);
        $1646 = HEAP32[$1645>>2]|0;
        $1647 = ($1646|0)==(3);
        if (!($1647)) {
         $cond315 = ($1646|0)==(4);
         if (!($cond315)) {
          label = 349;
          break L1;
         }
         $1648 = HEAP32[$1627>>2]|0;
         $1649 = (($1648) + 16|0);
         $1650 = (_luaO_str2d($1649,$num$i54)|0);
         $1651 = ($1650|0)==(0);
         if ($1651) {
          label = 349;
          break L1;
         }
         $1652 = +HEAPF64[$num$i54>>3];
         HEAPF64[$1627>>3] = $1652;
         HEAP32[$1645>>2] = 3;
        }
       }
      } while(0);
      $1653 = +HEAPF64[$84>>3];
      $1654 = +HEAPF64[$1627>>3];
      $1655 = $1653 - $1654;
      HEAPF64[$84>>3] = $1655;
      HEAP32[$1628>>2] = 3;
      $1656 = $34 >>> 14;
      $$sum14 = (($1656) + -131070)|0;
      $1657 = (($pc$0) + ($$sum14<<2)|0);
      $base$0 = $base$1;$pc$0 = $1657;
      continue L5;
      break;
     }
     case 30:  {
      break L3;
      break;
     }
     case 33:  {
      $$sum3 = (($83) + 3)|0;
      $1658 = (($base$1) + ($$sum3<<4)|0);
      $$sum4 = (($83) + 2)|0;
      $1659 = (($base$1) + ($$sum4<<4)|0);
      $$sum5 = (($83) + 5)|0;
      $1660 = (($base$1) + ($$sum5<<4)|0);
      $1661 = $1659;
      $1662 = $1661;
      $1663 = HEAP32[$1662>>2]|0;
      $1664 = (($1661) + 4)|0;
      $1665 = $1664;
      $1666 = HEAP32[$1665>>2]|0;
      $1667 = $1660;
      $1668 = $1667;
      HEAP32[$1668>>2] = $1663;
      $1669 = (($1667) + 4)|0;
      $1670 = $1669;
      HEAP32[$1670>>2] = $1666;
      $1671 = ((($base$1) + ($$sum4<<4)|0) + 8|0);
      $1672 = HEAP32[$1671>>2]|0;
      $1673 = ((($base$1) + ($$sum5<<4)|0) + 8|0);
      HEAP32[$1673>>2] = $1672;
      $$sum6 = (($83) + 1)|0;
      $1674 = (($base$1) + ($$sum6<<4)|0);
      $$sum7 = (($83) + 4)|0;
      $1675 = (($base$1) + ($$sum7<<4)|0);
      $1676 = $1674;
      $1677 = $1676;
      $1678 = HEAP32[$1677>>2]|0;
      $1679 = (($1676) + 4)|0;
      $1680 = $1679;
      $1681 = HEAP32[$1680>>2]|0;
      $1682 = $1675;
      $1683 = $1682;
      HEAP32[$1683>>2] = $1678;
      $1684 = (($1682) + 4)|0;
      $1685 = $1684;
      HEAP32[$1685>>2] = $1681;
      $1686 = ((($base$1) + ($$sum6<<4)|0) + 8|0);
      $1687 = HEAP32[$1686>>2]|0;
      $1688 = ((($base$1) + ($$sum7<<4)|0) + 8|0);
      HEAP32[$1688>>2] = $1687;
      $1689 = $84;
      $1690 = $1689;
      $1691 = HEAP32[$1690>>2]|0;
      $1692 = (($1689) + 4)|0;
      $1693 = $1692;
      $1694 = HEAP32[$1693>>2]|0;
      $1695 = $1658;
      $1696 = $1695;
      HEAP32[$1696>>2] = $1691;
      $1697 = (($1695) + 4)|0;
      $1698 = $1697;
      HEAP32[$1698>>2] = $1694;
      $1699 = ((($base$1) + ($83<<4)|0) + 8|0);
      $1700 = HEAP32[$1699>>2]|0;
      $1701 = ((($base$1) + ($$sum3<<4)|0) + 8|0);
      HEAP32[$1701>>2] = $1700;
      $$sum8 = (($83) + 6)|0;
      $1702 = (($base$1) + ($$sum8<<4)|0);
      HEAP32[$8>>2] = $1702;
      HEAP32[$0>>2] = $33;
      $1703 = $34 >>> 14;
      $1704 = $1703 & 511;
      _luaD_call($L,$1658,$1704);
      $1705 = HEAP32[$2>>2]|0;
      $1706 = HEAP32[$1>>2]|0;
      $1707 = (($1706) + 8|0);
      $1708 = HEAP32[$1707>>2]|0;
      HEAP32[$8>>2] = $1708;
      $1709 = ((($1705) + ($$sum3<<4)|0) + 8|0);
      $1710 = HEAP32[$1709>>2]|0;
      $1711 = ($1710|0)==(0);
      if ($1711) {
       $pc$6 = $33;
      } else {
       $1712 = (($1705) + ($$sum4<<4)|0);
       $1713 = (($1705) + ($$sum3<<4)|0);
       $1714 = $1713;
       $1715 = $1714;
       $1716 = HEAP32[$1715>>2]|0;
       $1717 = (($1714) + 4)|0;
       $1718 = $1717;
       $1719 = HEAP32[$1718>>2]|0;
       $1720 = $1712;
       $1721 = $1720;
       HEAP32[$1721>>2] = $1716;
       $1722 = (($1720) + 4)|0;
       $1723 = $1722;
       HEAP32[$1723>>2] = $1719;
       $1724 = ((($1705) + ($$sum4<<4)|0) + 8|0);
       HEAP32[$1724>>2] = $1710;
       $1725 = HEAP32[$33>>2]|0;
       $1726 = $1725 >>> 14;
       $$sum11 = (($1726) + -131070)|0;
       $1727 = (($pc$0) + ($$sum11<<2)|0);
       $pc$6 = $1727;
      }
      $1728 = (($pc$6) + 4|0);
      $base$0 = $1705;$pc$0 = $1728;
      continue L5;
      break;
     }
     case 34:  {
      $1729 = $34 >>> 23;
      $1730 = $34 >>> 14;
      $1731 = $1730 & 511;
      $1732 = ($1729|0)==(0);
      if ($1732) {
       $1733 = HEAP32[$8>>2]|0;
       $1734 = $1733;
       $1735 = $84;
       $1736 = (($1734) - ($1735))|0;
       $1737 = $1736 >> 4;
       $1738 = (($1737) + -1)|0;
       $1739 = HEAP32[$1>>2]|0;
       $1740 = (($1739) + 8|0);
       $1741 = HEAP32[$1740>>2]|0;
       HEAP32[$8>>2] = $1741;
       $n$0 = $1738;
      } else {
       $n$0 = $1729;
      }
      $1742 = ($1731|0)==(0);
      if ($1742) {
       $1743 = (($pc$0) + 8|0);
       $1744 = HEAP32[$33>>2]|0;
       $c75$0 = $1744;$pc$7 = $1743;
      } else {
       $c75$0 = $1731;$pc$7 = $33;
      }
      $1745 = ((($base$1) + ($83<<4)|0) + 8|0);
      $1746 = HEAP32[$1745>>2]|0;
      $1747 = ($1746|0)==(5);
      if (!($1747)) {
       $base$0 = $base$1;$pc$0 = $pc$7;
       continue L5;
      }
      $1748 = HEAP32[$84>>2]|0;
      $1749 = ($c75$0*50)|0;
      $1750 = (($n$0) + -50)|0;
      $1751 = (($1750) + ($1749))|0;
      $1752 = (($1748) + 28|0);
      $1753 = HEAP32[$1752>>2]|0;
      $1754 = ($1751|0)>($1753|0);
      if ($1754) {
       _luaH_resizearray($L,$1748,$1751);
      }
      $1755 = ($n$0|0)>(0);
      if (!($1755)) {
       $base$0 = $base$1;$pc$0 = $pc$7;
       continue L5;
      }
      $1756 = (($1748) + 5|0);
      $last$0195 = $1751;$n$1196 = $n$0;
      while(1) {
       $$sum2 = (($n$1196) + ($83))|0;
       $1757 = (($base$1) + ($$sum2<<4)|0);
       $1758 = (($last$0195) + -1)|0;
       $1759 = (_luaH_setnum($L,$1748,$last$0195)|0);
       $1760 = $1757;
       $1761 = $1760;
       $1762 = HEAP32[$1761>>2]|0;
       $1763 = (($1760) + 4)|0;
       $1764 = $1763;
       $1765 = HEAP32[$1764>>2]|0;
       $1766 = $1759;
       $1767 = $1766;
       HEAP32[$1767>>2] = $1762;
       $1768 = (($1766) + 4)|0;
       $1769 = $1768;
       HEAP32[$1769>>2] = $1765;
       $1770 = ((($base$1) + ($$sum2<<4)|0) + 8|0);
       $1771 = HEAP32[$1770>>2]|0;
       $1772 = (($1759) + 8|0);
       HEAP32[$1772>>2] = $1771;
       $1773 = HEAP32[$1770>>2]|0;
       $1774 = ($1773|0)>(3);
       if ($1774) {
        $1775 = HEAP32[$1757>>2]|0;
        $1776 = (($1775) + 5|0);
        $1777 = HEAP8[$1776>>0]|0;
        $1778 = $1777 & 3;
        $1779 = ($1778<<24>>24)==(0);
        if (!($1779)) {
         $1780 = HEAP8[$1756>>0]|0;
         $1781 = $1780 & 4;
         $1782 = ($1781<<24>>24)==(0);
         if (!($1782)) {
          _luaC_barrierback($L,$1748);
         }
        }
       }
       $1783 = (($n$1196) + -1)|0;
       $1784 = ($1783|0)>(0);
       if ($1784) {
        $last$0195 = $1758;$n$1196 = $1783;
       } else {
        $base$0 = $base$1;$pc$0 = $pc$7;
        continue L5;
       }
      }
      break;
     }
     case 35:  {
      _luaF_close($L,$84);
      $base$0 = $base$1;$pc$0 = $33;
      continue L5;
      break;
     }
     case 36:  {
      $1785 = $34 >>> 14;
      $1786 = HEAP32[$27>>2]|0;
      $1787 = (($1786) + 16|0);
      $1788 = HEAP32[$1787>>2]|0;
      $1789 = (($1788) + ($1785<<2)|0);
      $1790 = HEAP32[$1789>>2]|0;
      $1791 = (($1790) + 72|0);
      $1792 = HEAP8[$1791>>0]|0;
      $1793 = $1792&255;
      $1794 = HEAP32[$32>>2]|0;
      $1795 = (_luaF_newLclosure($L,$1793,$1794)|0);
      $1796 = (($1795) + 16|0);
      HEAP32[$1796>>2] = $1790;
      $1797 = ($1792<<24>>24)==(0);
      if ($1797) {
       $pc$8$lcssa = $33;
      } else {
       $1798 = ($1792&255)>(1);
       $j$0191 = 0;$pc$8192 = $33;
       while(1) {
        $1799 = HEAP32[$pc$8192>>2]|0;
        $1800 = $1799 & 63;
        $1801 = ($1800|0)==(4);
        $1802 = $1799 >>> 23;
        if ($1801) {
         $1803 = (($31) + ($1802<<2)|0);
         $1804 = HEAP32[$1803>>2]|0;
         $1805 = ((($1795) + ($j$0191<<2)|0) + 20|0);
         HEAP32[$1805>>2] = $1804;
        } else {
         $1806 = (($base$1) + ($1802<<4)|0);
         $1807 = (_luaF_findupval($L,$1806)|0);
         $1808 = ((($1795) + ($j$0191<<2)|0) + 20|0);
         HEAP32[$1808>>2] = $1807;
        }
        $1809 = (($j$0191) + 1)|0;
        $1810 = (($pc$8192) + 4|0);
        $1811 = ($1809|0)<($1793|0);
        if ($1811) {
         $j$0191 = $1809;$pc$8192 = $1810;
        } else {
         break;
        }
       }
       $$op = (($1793) + 1)|0;
       $$sum301 = $1798 ? $$op : 2;
       $scevgep252 = (($pc$0) + ($$sum301<<2)|0);
       $pc$8$lcssa = $scevgep252;
      }
      HEAP32[$84>>2] = $1795;
      $1812 = ((($base$1) + ($83<<4)|0) + 8|0);
      HEAP32[$1812>>2] = 6;
      HEAP32[$0>>2] = $pc$8$lcssa;
      $1813 = HEAP32[$6>>2]|0;
      $1814 = (($1813) + 68|0);
      $1815 = HEAP32[$1814>>2]|0;
      $1816 = (($1813) + 64|0);
      $1817 = HEAP32[$1816>>2]|0;
      $1818 = ($1815>>>0)<($1817>>>0);
      if (!($1818)) {
       _luaC_step($L);
      }
      $1819 = HEAP32[$2>>2]|0;
      $base$0 = $1819;$pc$0 = $pc$8$lcssa;
      continue L5;
      break;
     }
     case 37:  {
      $1820 = $34 >>> 23;
      $1821 = (($1820) + -1)|0;
      $1822 = HEAP32[$1>>2]|0;
      $1823 = HEAP32[$1822>>2]|0;
      $1824 = (($1822) + 4|0);
      $1825 = HEAP32[$1824>>2]|0;
      $1826 = $1823;
      $1827 = $1825;
      $1828 = (($1826) - ($1827))|0;
      $1829 = $1828 >> 4;
      $1830 = HEAP32[$27>>2]|0;
      $1831 = (($1830) + 73|0);
      $1832 = HEAP8[$1831>>0]|0;
      $1833 = $1832&255;
      $1834 = (($1829) - ($1833))|0;
      $1835 = (($1834) + -1)|0;
      $1836 = ($1820|0)==(0);
      if ($1836) {
       HEAP32[$0>>2] = $33;
       $1837 = HEAP32[$9>>2]|0;
       $1838 = HEAP32[$8>>2]|0;
       $1839 = $1837;
       $1840 = $1838;
       $1841 = (($1839) - ($1840))|0;
       $1842 = $1835 << 4;
       $1843 = ($1841|0)>($1842|0);
       if (!($1843)) {
        _luaD_growstack($L,$1835);
       }
       $1844 = HEAP32[$2>>2]|0;
       $1845 = (($1844) + ($83<<4)|0);
       $$sum1 = (($1835) + ($83))|0;
       $1846 = (($1844) + ($$sum1<<4)|0);
       HEAP32[$8>>2] = $1846;
       $b79$0 = $1835;$base$2 = $1844;$ra$0 = $1845;
      } else {
       $b79$0 = $1821;$base$2 = $base$1;$ra$0 = $84;
      }
      $1847 = ($b79$0|0)>(0);
      if (!($1847)) {
       $base$0 = $base$2;$pc$0 = $33;
       continue L5;
      }
      $1848 = (1 - ($1834))|0;
      $j80$0190 = 0;
      while(1) {
       $1849 = ($j80$0190|0)<($1835|0);
       if ($1849) {
        $1850 = HEAP32[$1822>>2]|0;
        $$sum = (($j80$0190) + ($1848))|0;
        $1851 = (($1850) + ($$sum<<4)|0);
        $1852 = (($ra$0) + ($j80$0190<<4)|0);
        $1853 = $1851;
        $1854 = $1853;
        $1855 = HEAP32[$1854>>2]|0;
        $1856 = (($1853) + 4)|0;
        $1857 = $1856;
        $1858 = HEAP32[$1857>>2]|0;
        $1859 = $1852;
        $1860 = $1859;
        HEAP32[$1860>>2] = $1855;
        $1861 = (($1859) + 4)|0;
        $1862 = $1861;
        HEAP32[$1862>>2] = $1858;
        $1863 = ((($1850) + ($$sum<<4)|0) + 8|0);
        $1864 = HEAP32[$1863>>2]|0;
        $1865 = ((($ra$0) + ($j80$0190<<4)|0) + 8|0);
        HEAP32[$1865>>2] = $1864;
       } else {
        $1866 = ((($ra$0) + ($j80$0190<<4)|0) + 8|0);
        HEAP32[$1866>>2] = 0;
       }
       $1867 = (($j80$0190) + 1)|0;
       $exitcond = ($1867|0)==($b79$0|0);
       if ($exitcond) {
        $base$0 = $base$2;$pc$0 = $33;
        continue L5;
       } else {
        $j80$0190 = $1867;
       }
      }
      break;
     }
     default: {
      $base$0 = $base$1;$pc$0 = $33;
      continue L5;
     }
     }
    } while(0);
   }
   $1554 = HEAP32[$1>>2]|0;
   $1555 = (($1554) + -20|0);
   $1556 = HEAP32[$1555>>2]|0;
   $1557 = (($1554) + 4|0);
   $1558 = HEAP32[$1557>>2]|0;
   $1559 = HEAP32[$21>>2]|0;
   $1560 = ($1559|0)==(0|0);
   $$pre300 = (($1554) + -24|0);
   if ($1560) {
    $1568 = $1556;
   } else {
    $1561 = HEAP32[$$pre300>>2]|0;
    _luaF_close($L,$1561);
    $$pre298 = HEAP32[$1555>>2]|0;
    $1568 = $$pre298;
   }
   $1562 = HEAP32[$1554>>2]|0;
   $1563 = $1562;
   $1564 = $1558;
   $1565 = (($1563) - ($1564))|0;
   $1566 = $1565 >> 4;
   $1567 = (($1568) + ($1566<<4)|0);
   HEAP32[$$pre300>>2] = $1567;
   HEAP32[$2>>2] = $1567;
   $1569 = HEAP32[$8>>2]|0;
   $1570 = ($1558>>>0)<($1569>>>0);
   if ($1570) {
    $1571 = $1558;$1578 = $1556;$aux$0235 = 0;
    while(1) {
     $1572 = $1571;
     $1573 = $1572;
     $1574 = HEAP32[$1573>>2]|0;
     $1575 = (($1572) + 4)|0;
     $1576 = $1575;
     $1577 = HEAP32[$1576>>2]|0;
     $1579 = $1578;
     $1580 = $1579;
     HEAP32[$1580>>2] = $1574;
     $1581 = (($1579) + 4)|0;
     $1582 = $1581;
     HEAP32[$1582>>2] = $1577;
     $1583 = ((($1558) + ($aux$0235<<4)|0) + 8|0);
     $1584 = HEAP32[$1583>>2]|0;
     $1585 = ((($1556) + ($aux$0235<<4)|0) + 8|0);
     HEAP32[$1585>>2] = $1584;
     $1586 = (($aux$0235) + 1)|0;
     $1587 = (($1558) + ($1586<<4)|0);
     $1588 = HEAP32[$8>>2]|0;
     $1589 = ($1587>>>0)<($1588>>>0);
     $1590 = (($1556) + ($1586<<4)|0);
     if ($1589) {
      $1571 = $1587;$1578 = $1590;$aux$0235 = $1586;
     } else {
      $$lcssa234 = $1590;
      break;
     }
    }
   } else {
    $$lcssa234 = $1556;
   }
   HEAP32[$8>>2] = $$lcssa234;
   $1591 = (($1554) + -16|0);
   HEAP32[$1591>>2] = $$lcssa234;
   $1592 = HEAP32[$0>>2]|0;
   $1593 = (($1554) + -12|0);
   HEAP32[$1593>>2] = $1592;
   $1594 = (($1554) + -4|0);
   $1595 = HEAP32[$1594>>2]|0;
   $1596 = (($1595) + 1)|0;
   HEAP32[$1594>>2] = $1596;
   $1597 = HEAP32[$1>>2]|0;
   $1598 = (($1597) + -24|0);
   HEAP32[$1>>2] = $1598;
   $1868 = $1592;$23 = $1598;
  }
  if ((label|0) == 311) {
   label = 0;
   $1544 = (($$0$ph) + 1)|0;
   $$0$ph = $1544;
   continue;
  }
  $1600 = $34 >>> 23;
  $1601 = ($1600|0)==(0);
  if (!($1601)) {
   $$sum19 = (($1600) + -1)|0;
   $$sum20 = (($$sum19) + ($83))|0;
   $1602 = (($base$1) + ($$sum20<<4)|0);
   HEAP32[$8>>2] = $1602;
  }
  $1603 = HEAP32[$21>>2]|0;
  $1604 = ($1603|0)==(0|0);
  if (!($1604)) {
   _luaF_close($L,$base$1);
  }
  HEAP32[$0>>2] = $33;
  $1605 = (_luaD_poscall($L,$84)|0);
  $1606 = (($$0$ph) + -1)|0;
  $1607 = ($1606|0)==(0);
  if ($1607) {
   label = 389;
   break;
  }
  $1608 = ($1605|0)==(0);
  if ($1608) {
   $$0$ph = $1606;
   continue;
  }
  $1609 = HEAP32[$1>>2]|0;
  $1610 = (($1609) + 8|0);
  $1611 = HEAP32[$1610>>2]|0;
  HEAP32[$8>>2] = $1611;
  $$0$ph = $1606;
 }
 if ((label|0) == 17) {
  HEAP32[$0>>2] = $pc$0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 349) {
  _luaG_runerror($L,4112,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 389) {
  STACKTOP = sp;return;
 }
}
function _luaZ_fill($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $0 = (($z) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($z) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($z) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$3 & 15]($1,$5,$size)|0);
 $7 = ($6|0)==(0|0);
 $8 = HEAP32[$size>>2]|0;
 $9 = ($8|0)==(0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($8) + -1)|0;
 HEAP32[$z>>2] = $10;
 $11 = (($z) + 4|0);
 $12 = (($6) + 1|0);
 HEAP32[$11>>2] = $12;
 $13 = HEAP8[$6>>0]|0;
 $14 = $13&255;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _luaZ_lookahead($z) {
 $z = $z|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0;
 var $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$i = sp;
 $0 = HEAP32[$z>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (($z) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($z) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($z) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (FUNCTION_TABLE_iiii[$5 & 15]($3,$7,$size$i)|0);
   $9 = ($8|0)==(0|0);
   $10 = HEAP32[$size$i>>2]|0;
   $11 = ($10|0)==(0);
   $or$cond$i = $9 | $11;
   if ($or$cond$i) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $12 = (($z) + 4|0);
    HEAP32[$z>>2] = $10;
    HEAP32[$12>>2] = $8;
    $14 = $8;
    break;
   }
  } else {
   $$phi$trans$insert = (($z) + 4|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $14 = $$pre;
  }
 } while(0);
 $13 = HEAP8[$14>>0]|0;
 $15 = $13&255;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _luaZ_init($L,$z,$reader,$data) {
 $L = $L|0;
 $z = $z|0;
 $reader = $reader|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 16|0);
 HEAP32[$0>>2] = $L;
 $1 = (($z) + 8|0);
 HEAP32[$1>>2] = $reader;
 $2 = (($z) + 12|0);
 HEAP32[$2>>2] = $data;
 HEAP32[$z>>2] = 0;
 $3 = (($z) + 4|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function _luaZ_read($z,$b,$n) {
 $z = $z|0;
 $b = $b|0;
 $n = $n|0;
 var $$$01 = 0, $$0 = 0, $$014 = 0, $$023 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, $size$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$i$i = sp;
 $0 = ($n|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($z) + 16|0);
 $2 = (($z) + 8|0);
 $3 = (($z) + 12|0);
 $4 = (($z) + 4|0);
 $$pre = HEAP32[$z>>2]|0;
 $$014 = $n;$$023 = $b;$5 = $$pre;
 while(1) {
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$2>>2]|0;
   $9 = HEAP32[$3>>2]|0;
   $10 = (FUNCTION_TABLE_iiii[$8 & 15]($7,$9,$size$i$i)|0);
   $11 = ($10|0)==(0|0);
   $12 = HEAP32[$size$i$i>>2]|0;
   $13 = ($12|0)==(0);
   $or$cond$i$i = $11 | $13;
   if ($or$cond$i$i) {
    $$0 = $$014;
    label = 8;
    break;
   }
   HEAP32[$z>>2] = $12;
   HEAP32[$4>>2] = $10;
   $15 = $12;$16 = $10;
  } else {
   $$pre6 = HEAP32[$4>>2]|0;
   $15 = $5;$16 = $$pre6;
  }
  $14 = ($$014>>>0)>($15>>>0);
  $$$01 = $14 ? $15 : $$014;
  _memcpy(($$023|0),($16|0),($$$01|0))|0;
  $17 = HEAP32[$z>>2]|0;
  $18 = (($17) - ($$$01))|0;
  HEAP32[$z>>2] = $18;
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + ($$$01)|0);
  HEAP32[$4>>2] = $20;
  $21 = (($$023) + ($$$01)|0);
  $22 = (($$014) - ($$$01))|0;
  $23 = ($$014|0)==($$$01|0);
  if ($23) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $$014 = $22;$$023 = $21;$5 = $18;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaZ_openspace($L,$buff,$n) {
 $L = $L|0;
 $buff = $buff|0;
 $n = $n|0;
 var $$n = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($buff) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if (!($2)) {
  $$pre = HEAP32[$buff>>2]|0;
  $10 = $$pre;
  STACKTOP = sp;return ($10|0);
 }
 $3 = ($n>>>0)<(32);
 $$n = $3 ? 32 : $n;
 $4 = (($$n) + 1)|0;
 $5 = ($4>>>0)<(4294967294);
 if ($5) {
  $6 = HEAP32[$buff>>2]|0;
  $7 = (_luaM_realloc_($L,$6,$1,$$n)|0);
  $$pre$phiZ2D = $buff;$9 = $7;
 } else {
  $8 = (_luaM_toobig($L)|0);
  $$pre$phiZ2D = $buff;$9 = $8;
 }
 HEAP32[$$pre$phiZ2D>>2] = $9;
 HEAP32[$0>>2] = $$n;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _luaL_loadfile($L,$filename) {
 $L = $L|0;
 $filename = $filename|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $lf = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $lf = sp + 56|0;
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + 1)|0;
 HEAP32[$lf>>2] = 0;
 $2 = ($filename|0)==(0|0);
 if ($2) {
  _lua_pushlstring($L,4144,6);
  $3 = HEAP32[_stdin>>2]|0;
  $4 = (($lf) + 4|0);
  HEAP32[$4>>2] = $3;
  $14 = $3;
 } else {
  HEAP32[$vararg_buffer>>2] = $filename;
  (_lua_pushfstring($L,4152,$vararg_buffer)|0);
  $5 = (_fopen(($filename|0),(4160|0))|0);
  $6 = (($lf) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = ($5|0)==(0|0);
  if ($7) {
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strerror(($9|0))|0);
   $11 = (_lua_tolstring($L,$1,0)|0);
   $12 = (($11) + 1|0);
   HEAP32[$vararg_buffer1>>2] = 4168;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $12;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $10;
   (_lua_pushfstring($L,4264,$vararg_buffer1)|0);
   _lua_remove($L,$1);
   $$0 = 6;
   STACKTOP = sp;return ($$0|0);
  } else {
   $14 = $5;
  }
 }
 $13 = (($lf) + 4|0);
 $15 = (_getc(($14|0))|0);
 $16 = ($15|0)==(35);
 do {
  if ($16) {
   HEAP32[$lf>>2] = 1;
   while(1) {
    $17 = HEAP32[$13>>2]|0;
    $18 = (_getc(($17|0))|0);
    if ((($18|0) == 10)) {
     label = 9;
     break;
    } else if ((($18|0) == -1)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    $19 = ($filename|0)!=(0|0);
    $45 = $19;$c$1 = -1;
    break;
   }
   else if ((label|0) == 9) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (_getc(($20|0))|0);
    $c$0 = $21;
    label = 10;
    break;
   }
  } else {
   $c$0 = $15;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $22 = ($c$0|0)==(27);
  $23 = ($filename|0)!=(0|0);
  $or$cond = $22 & $23;
  if ($or$cond) {
   $24 = HEAP32[$13>>2]|0;
   $25 = (_freopen(($filename|0),(4176|0),($24|0))|0);
   HEAP32[$13>>2] = $25;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $27 = (___errno_location()|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (_strerror(($28|0))|0);
    $30 = (_lua_tolstring($L,$1,0)|0);
    $31 = (($30) + 1|0);
    HEAP32[$vararg_buffer6>>2] = 4184;
    $vararg_ptr9 = (($vararg_buffer6) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $31;
    $vararg_ptr10 = (($vararg_buffer6) + 8|0);
    HEAP32[$vararg_ptr10>>2] = $29;
    (_lua_pushfstring($L,4264,$vararg_buffer6)|0);
    _lua_remove($L,$1);
    $$0 = 6;
    STACKTOP = sp;return ($$0|0);
   } else {
    $32 = $25;
   }
   while(1) {
    $33 = (_getc(($32|0))|0);
    if ((($33|0) == 27) | (($33|0) == -1)) {
     break;
    }
    $$pre = HEAP32[$13>>2]|0;
    $32 = $$pre;
   }
   HEAP32[$lf>>2] = 0;
   $45 = 1;$c$1 = $33;
  } else {
   $45 = $23;$c$1 = $c$0;
  }
 }
 $34 = HEAP32[$13>>2]|0;
 (_ungetc(($c$1|0),($34|0))|0);
 $35 = (_lua_tolstring($L,-1,0)|0);
 $36 = (_lua_load($L,10,$lf,$35)|0);
 $37 = HEAP32[$13>>2]|0;
 $38 = (_ferror(($37|0))|0);
 if ($45) {
  (_fclose(($37|0))|0);
 }
 $39 = ($38|0)==(0);
 if ($39) {
  _lua_remove($L,$1);
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_settop($L,$1);
  $40 = (___errno_location()|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_strerror(($41|0))|0);
  $43 = (_lua_tolstring($L,$1,0)|0);
  $44 = (($43) + 1|0);
  HEAP32[$vararg_buffer11>>2] = 4192;
  $vararg_ptr14 = (($vararg_buffer11) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $44;
  $vararg_ptr15 = (($vararg_buffer11) + 8|0);
  HEAP32[$vararg_ptr15>>2] = $42;
  (_lua_pushfstring($L,4264,$vararg_buffer11)|0);
  _lua_remove($L,$1);
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaL_newstate() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_newstate(11,0)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  (_lua_atpanic($0,12)|0);
 }
 STACKTOP = sp;return ($0|0);
}
function _getF($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  HEAP32[$ud>>2] = 0;
  HEAP32[$size>>2] = 1;
  $$0 = 4256;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($ud) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_feof(($3|0))|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($ud) + 8|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = (_fread(($6|0),1,1024,($7|0))|0);
 HEAP32[$size>>2] = $8;
 $9 = ($8|0)==(0);
 $$ = $9 ? 0 : $6;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _l_alloc($ud,$ptr,$osize,$nsize) {
 $ud = $ud|0;
 $ptr = $ptr|0;
 $osize = $osize|0;
 $nsize = $nsize|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nsize|0)==(0);
 if ($0) {
  _free($ptr);
  $$0 = 0;
 } else {
  $1 = (_realloc($ptr,$nsize)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _panic($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = (_lua_tolstring($L,-1,0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(4200|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return 0;
}
function _luaK_nil($fs,$from,$n) {
 $fs = $fs|0;
 $from = $from|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)>($3|0);
 do {
  if ($4) {
   $5 = ($1|0)==(0);
   if ($5) {
    $6 = (($fs) + 50|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    $9 = ($8|0)>($from|0);
    if ($9) {
     break;
    }
    STACKTOP = sp;return;
   }
   $10 = (($1) + -1)|0;
   $11 = HEAP32[$fs>>2]|0;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($10<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 63;
   $17 = ($16|0)==(3);
   if ($17) {
    $18 = $15 >>> 6;
    $19 = $18 & 255;
    $20 = $15 >>> 23;
    $21 = ($19|0)>($from|0);
    $22 = (($20) + 1)|0;
    $23 = ($22|0)<($from|0);
    $or$cond = $21 | $23;
    if (!($or$cond)) {
     $24 = (($from) + -1)|0;
     $25 = (($24) + ($n))|0;
     $26 = ($25|0)>($20|0);
     if (!($26)) {
      STACKTOP = sp;return;
     }
     $27 = $15 & 8388607;
     $28 = $25 << 23;
     $29 = $27 | $28;
     HEAP32[$14>>2] = $29;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $30 = (($n) + ($from))|0;
 $31 = $from << 6;
 $32 = $30 << 23;
 $33 = (($32) + -8388608)|0;
 $34 = $31 | $33;
 $35 = $34 | 3;
 $36 = (($fs) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 (_luaK_code($fs,$35,$39)|0);
 STACKTOP = sp;return;
}
function _luaK_codeABC($fs,$o,$a,$b,$c) {
 $fs = $fs|0;
 $o = $o|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | $o;
 $2 = $b << 23;
 $3 = $1 | $2;
 $4 = $c << 14;
 $5 = $3 | $4;
 $6 = (($fs) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_luaK_code($fs,$5,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _luaK_jump($fs) {
 $fs = $fs|0;
 var $$neg$i$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $ispos$i$i = 0, $list$0$i = 0, $neg$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = -1;
 $2 = (($fs) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_luaK_code($fs,2147450902,$5)|0);
 $7 = ($1|0)==(-1);
 if ($7) {
  $26 = $6;
  STACKTOP = sp;return ($26|0);
 }
 $8 = ($6|0)==(-1);
 if ($8) {
  $26 = $1;
  STACKTOP = sp;return ($26|0);
 }
 $fs$idx$val$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i = (($fs$idx$val$i) + 12|0);
 $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
 $list$0$i = $6;
 while(1) {
  $9 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 14;
  $12 = (($11) + -131071)|0;
  $13 = ($12|0)==(-1);
  if ($13) {
   break;
  }
  $14 = (($list$0$i) + 1)|0;
  $15 = (($14) + ($12))|0;
  $16 = ($15|0)==(-1);
  if ($16) {
   break;
  } else {
   $list$0$i = $15;
  }
 }
 $$neg$i$i = $list$0$i ^ -1;
 $17 = (($1) + ($$neg$i$i))|0;
 $ispos$i$i = ($17|0)>(-1);
 $neg$i$i = (0 - ($17))|0;
 $18 = $ispos$i$i ? $17 : $neg$i$i;
 $19 = ($18|0)>(131071);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  _luaX_syntaxerror($20,4376);
  $$pre$i = HEAP32[$9>>2]|0;
  $22 = $$pre$i;
 } else {
  $22 = $10;
 }
 $21 = $22 & 16383;
 $23 = $17 << 14;
 $24 = (($23) + 2147467264)|0;
 $25 = $21 | $24;
 HEAP32[$9>>2] = $25;
 $26 = $6;
 STACKTOP = sp;return ($26|0);
}
function _luaK_codeABx($fs,$o,$a,$bc) {
 $fs = $fs|0;
 $o = $o|0;
 $a = $a|0;
 $bc = $bc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | $o;
 $2 = $bc << 14;
 $3 = $1 | $2;
 $4 = (($fs) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_luaK_code($fs,$3,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _luaK_concat($fs,$l1,$l2) {
 $fs = $fs|0;
 $l1 = $l1|0;
 $l2 = $l2|0;
 var $$neg$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $fs$idx$val = 0, $fs$idx$val$idx = 0, $fs$idx$val$idx$val = 0, $ispos$i = 0, $list$0 = 0, $neg$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l2|0)==(-1);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$l1>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  HEAP32[$l1>>2] = $l2;
  STACKTOP = sp;return;
 }
 $fs$idx$val = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx = (($fs$idx$val) + 12|0);
 $fs$idx$val$idx$val = HEAP32[$fs$idx$val$idx>>2]|0;
 $list$0 = $1;
 while(1) {
  $3 = (($fs$idx$val$idx$val) + ($list$0<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 >>> 14;
  $6 = (($5) + -131071)|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   break;
  }
  $8 = (($list$0) + 1)|0;
  $9 = (($8) + ($6))|0;
  $10 = ($9|0)==(-1);
  if ($10) {
   break;
  } else {
   $list$0 = $9;
  }
 }
 $$neg$i = $list$0 ^ -1;
 $11 = (($$neg$i) + ($l2))|0;
 $ispos$i = ($11|0)>(-1);
 $neg$i = (0 - ($11))|0;
 $12 = $ispos$i ? $11 : $neg$i;
 $13 = ($12|0)>(131071);
 if ($13) {
  $14 = (($fs) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  _luaX_syntaxerror($15,4376);
  $$pre = HEAP32[$3>>2]|0;
  $17 = $$pre;
 } else {
  $17 = $4;
 }
 $16 = $17 & 16383;
 $18 = $11 << 14;
 $19 = (($18) + 2147467264)|0;
 $20 = $16 | $19;
 HEAP32[$3>>2] = $20;
 STACKTOP = sp;return;
}
function _luaK_ret($fs,$first,$nret) {
 $fs = $fs|0;
 $first = $first|0;
 $nret = $nret|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $first << 6;
 $1 = $nret << 23;
 $2 = (($1) + 8388608)|0;
 $3 = $0 | $2;
 $4 = $3 | 30;
 $5 = (($fs) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 (_luaK_code($fs,$4,$8)|0);
 STACKTOP = sp;return;
}
function _luaK_getlabel($fs) {
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 28|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return ($1|0);
}
function _luaK_patchlist($fs,$list,$target) {
 $fs = $fs|0;
 $list = $list|0;
 $target = $target|0;
 var $$0$i$i = 0, $$0$i$i5 = 0, $$02$i = 0, $$neg$i = 0, $$neg$i$i$i = 0, $$neg$i1 = 0, $$pre = 0, $$pre$i$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i = 0, $fs$idx$val$i$i = 0;
 var $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $ispos$i = 0, $ispos$i$i$i = 0, $ispos$i2 = 0, $list$0$i$i = 0, $neg$i = 0, $neg$i$i$i = 0, $neg$i3 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($target|0);
 if ($2) {
  $3 = (($fs) + 28|0);
  HEAP32[$3>>2] = $target;
  $4 = (($fs) + 32|0);
  $5 = ($list|0)==(-1);
  if ($5) {
   STACKTOP = sp;return;
  }
  $6 = HEAP32[$4>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   HEAP32[$4>>2] = $list;
   STACKTOP = sp;return;
  }
  $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
  $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 12|0);
  $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
  $list$0$i$i = $6;
  while(1) {
   $8 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 >>> 14;
   $11 = (($10) + -131071)|0;
   $12 = ($11|0)==(-1);
   if ($12) {
    break;
   }
   $13 = (($list$0$i$i) + 1)|0;
   $14 = (($13) + ($11))|0;
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   } else {
    $list$0$i$i = $14;
   }
  }
  $$neg$i$i$i = $list$0$i$i ^ -1;
  $16 = (($$neg$i$i$i) + ($list))|0;
  $ispos$i$i$i = ($16|0)>(-1);
  $neg$i$i$i = (0 - ($16))|0;
  $17 = $ispos$i$i$i ? $16 : $neg$i$i$i;
  $18 = ($17|0)>(131071);
  if ($18) {
   $19 = (($fs) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   _luaX_syntaxerror($20,4376);
   $$pre$i$i = HEAP32[$8>>2]|0;
   $22 = $$pre$i$i;
  } else {
   $22 = $9;
  }
  $21 = $22 & 16383;
  $23 = $16 << 14;
  $24 = (($23) + 2147467264)|0;
  $25 = $21 | $24;
  HEAP32[$8>>2] = $25;
  STACKTOP = sp;return;
 }
 $26 = ($list|0)==(-1);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = (($fs) + 12|0);
 $$02$i = $list;
 while(1) {
  $fs$idx$val$i = HEAP32[$fs>>2]|0;
  $fs$idx$val$idx$i = (($fs$idx$val$i) + 12|0);
  $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
  $28 = (($fs$idx$val$idx$val$i) + ($$02$i<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 >>> 14;
  $31 = (($30) + -131071)|0;
  $32 = ($31|0)==(-1);
  if ($32) {
   $$0$i$i = -1;
  } else {
   $33 = (($$02$i) + 1)|0;
   $34 = (($33) + ($31))|0;
   $$0$i$i = $34;
  }
  $35 = ($$02$i|0)>(0);
  if ($35) {
   $$sum$i$i = (($$02$i) + -1)|0;
   $36 = (($fs$idx$val$idx$val$i) + ($$sum$i$i<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 & 63;
   $39 = (2528 + ($38)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)<(0);
   if ($41) {
    $$0$i$i5 = $36;$43 = $37;
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
  if ((label|0) == 17) {
   label = 0;
   $$0$i$i5 = $28;$43 = $29;
  }
  $42 = $43 & 63;
  $44 = ($42|0)==(27);
  if ($44) {
   $45 = $43 >>> 23;
   $46 = $45 << 6;
   $47 = $43 & 8372224;
   $48 = $47 | $46;
   $49 = $48 | 26;
   HEAP32[$$0$i$i5>>2] = $49;
   $$neg$i = $$02$i ^ -1;
   $50 = (($$neg$i) + ($target))|0;
   $ispos$i = ($50|0)>(-1);
   $neg$i = (0 - ($50))|0;
   $51 = $ispos$i ? $50 : $neg$i;
   $52 = ($51|0)>(131071);
   if ($52) {
    $53 = HEAP32[$27>>2]|0;
    _luaX_syntaxerror($53,4376);
   }
   $54 = HEAP32[$28>>2]|0;
   $55 = $54 & 16383;
   $56 = $50 << 14;
   $57 = (($56) + 2147467264)|0;
   $58 = $55 | $57;
   $storemerge = $58;
  } else {
   $$neg$i1 = $$02$i ^ -1;
   $59 = (($$neg$i1) + ($target))|0;
   $ispos$i2 = ($59|0)>(-1);
   $neg$i3 = (0 - ($59))|0;
   $60 = $ispos$i2 ? $59 : $neg$i3;
   $61 = ($60|0)>(131071);
   if ($61) {
    $62 = HEAP32[$27>>2]|0;
    _luaX_syntaxerror($62,4376);
    $$pre = HEAP32[$28>>2]|0;
    $64 = $$pre;
   } else {
    $64 = $29;
   }
   $63 = $64 & 16383;
   $65 = $59 << 14;
   $66 = (($65) + 2147467264)|0;
   $67 = $63 | $66;
   $storemerge = $67;
  }
  HEAP32[$28>>2] = $storemerge;
  $68 = ($$0$i$i|0)==(-1);
  if ($68) {
   break;
  } else {
   $$02$i = $$0$i$i;
  }
 }
 STACKTOP = sp;return;
}
function _luaK_patchtohere($fs,$list) {
 $fs = $fs|0;
 $list = $list|0;
 var $$neg$i$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $ispos$i$i = 0, $list$0$i = 0, $neg$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 28|0);
 HEAP32[$2>>2] = $1;
 $3 = (($fs) + 32|0);
 $4 = ($list|0)==(-1);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  HEAP32[$3>>2] = $list;
  STACKTOP = sp;return;
 }
 $fs$idx$val$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i = (($fs$idx$val$i) + 12|0);
 $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
 $list$0$i = $5;
 while(1) {
  $7 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 14;
  $10 = (($9) + -131071)|0;
  $11 = ($10|0)==(-1);
  if ($11) {
   break;
  }
  $12 = (($list$0$i) + 1)|0;
  $13 = (($12) + ($10))|0;
  $14 = ($13|0)==(-1);
  if ($14) {
   break;
  } else {
   $list$0$i = $13;
  }
 }
 $$neg$i$i = $list$0$i ^ -1;
 $15 = (($$neg$i$i) + ($list))|0;
 $ispos$i$i = ($15|0)>(-1);
 $neg$i$i = (0 - ($15))|0;
 $16 = $ispos$i$i ? $15 : $neg$i$i;
 $17 = ($16|0)>(131071);
 if ($17) {
  $18 = (($fs) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  _luaX_syntaxerror($19,4376);
  $$pre$i = HEAP32[$7>>2]|0;
  $21 = $$pre$i;
 } else {
  $21 = $8;
 }
 $20 = $21 & 16383;
 $22 = $15 << 14;
 $23 = (($22) + 2147467264)|0;
 $24 = $20 | $23;
 HEAP32[$7>>2] = $24;
 STACKTOP = sp;return;
}
function _luaK_checkstack($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($n))|0;
 $3 = HEAP32[$fs>>2]|0;
 $4 = (($3) + 75|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($2|0)>($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ($2|0)>(249);
 if ($8) {
  $9 = (($fs) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  _luaX_syntaxerror($10,4288);
  $$pre = HEAP32[$fs>>2]|0;
  $13 = $$pre;
 } else {
  $13 = $3;
 }
 $11 = $2&255;
 $12 = (($13) + 75|0);
 HEAP8[$12>>0] = $11;
 STACKTOP = sp;return;
}
function _luaK_reserveregs($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $$pre = 0, $$pre$i = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($n))|0;
 $3 = HEAP32[$fs>>2]|0;
 $4 = (($3) + 75|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($2|0)>($6|0);
 if (!($7)) {
  $15 = $1;
  $14 = (($15) + ($n))|0;
  HEAP32[$0>>2] = $14;
  STACKTOP = sp;return;
 }
 $8 = ($2|0)>(249);
 if ($8) {
  $9 = (($fs) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  _luaX_syntaxerror($10,4288);
  $$pre$i = HEAP32[$fs>>2]|0;
  $$pre$pre = HEAP32[$0>>2]|0;
  $$pre = $$pre$pre;$13 = $$pre$i;
 } else {
  $$pre = $1;$13 = $3;
 }
 $11 = $2&255;
 $12 = (($13) + 75|0);
 HEAP8[$12>>0] = $11;
 $15 = $$pre;
 $14 = (($15) + ($n))|0;
 HEAP32[$0>>2] = $14;
 STACKTOP = sp;return;
}
function _luaK_stringK($fs,$s) {
 $fs = $fs|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $o = sp;
 HEAP32[$o>>2] = $s;
 $0 = (($o) + 8|0);
 HEAP32[$0>>2] = 4;
 $1 = (_addk($fs,$o,$o)|0);
 STACKTOP = sp;return ($1|0);
}
function _luaK_numberK($fs,$r) {
 $fs = $fs|0;
 $r = +$r;
 var $0 = 0, $1 = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $o = sp;
 HEAPF64[$o>>3] = $r;
 $0 = (($o) + 8|0);
 HEAP32[$0>>2] = 3;
 $1 = (_addk($fs,$o,$o)|0);
 STACKTOP = sp;return ($1|0);
}
function _luaK_setreturns($fs,$e,$nresults) {
 $fs = $fs|0;
 $e = $e|0;
 $nresults = $nresults|0;
 var $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 if ((($0|0) == 14)) {
  $13 = (($e) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$fs>>2]|0;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 8388607;
  $21 = $nresults << 23;
  $22 = (($21) + 8388608)|0;
  $23 = $20 | $22;
  HEAP32[$18>>2] = $23;
  $24 = HEAP32[$13>>2]|0;
  $25 = (($17) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & -16321;
  $28 = (($fs) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 << 6;
  $31 = $30 & 16320;
  $32 = $31 | $27;
  HEAP32[$25>>2] = $32;
  $33 = HEAP32[$28>>2]|0;
  $34 = (($33) + 1)|0;
  $35 = (($15) + 75|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = ($33|0)<($37|0);
  if ($38) {
   $46 = $33;
  } else {
   $39 = ($33|0)>(248);
   if ($39) {
    $40 = (($fs) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    _luaX_syntaxerror($41,4288);
    $$pre$i$i = HEAP32[$fs>>2]|0;
    $$pre$pre$i = HEAP32[$28>>2]|0;
    $$pre$i = $$pre$pre$i;$44 = $$pre$i$i;
   } else {
    $$pre$i = $33;$44 = $15;
   }
   $42 = $34&255;
   $43 = (($44) + 75|0);
   HEAP8[$43>>0] = $42;
   $46 = $$pre$i;
  }
  $45 = (($46) + 1)|0;
  HEAP32[$28>>2] = $45;
  STACKTOP = sp;return;
 } else if ((($0|0) == 13)) {
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$fs>>2]|0;
  $4 = (($3) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -8372225;
  $9 = $nresults << 14;
  $10 = (($9) + 16384)|0;
  $11 = $10 & 8372224;
  $12 = $8 | $11;
  HEAP32[$6>>2] = $12;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _luaK_setoneret($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 if ((($0|0) == 14)) {
  $10 = (($e) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$fs>>2]|0;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 8388607;
  $18 = $17 | 16777216;
  HEAP32[$15>>2] = $18;
  HEAP32[$e>>2] = 11;
  STACKTOP = sp;return;
 } else if ((($0|0) == 13)) {
  HEAP32[$e>>2] = 12;
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$fs>>2]|0;
  $4 = (($3) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 6;
  $9 = $8 & 255;
  HEAP32[$1>>2] = $9;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _luaK_dischargevars($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 7:  {
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 << 23;
  $4 = $3 | 4;
  $5 = (($fs) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_luaK_code($fs,$4,$8)|0);
  HEAP32[$1>>2] = $9;
  HEAP32[$e>>2] = 11;
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  HEAP32[$e>>2] = 12;
  $50 = (($e) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$fs>>2]|0;
  $53 = (($52) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56 >>> 6;
  $58 = $57 & 255;
  HEAP32[$50>>2] = $58;
  STACKTOP = sp;return;
  break;
 }
 case 14:  {
  $59 = (($e) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$fs>>2]|0;
  $62 = (($61) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($60<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65 & 8388607;
  $67 = $66 | 16777216;
  HEAP32[$64>>2] = $67;
  HEAP32[$e>>2] = 11;
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $19 = (($e) + 8|0);
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 256;
  $23 = ($22|0)==(0);
  if ($23) {
   $24 = (($fs) + 50|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ($26|0)>($21|0);
   if (!($27)) {
    $28 = (($fs) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + -1)|0;
    HEAP32[$28>>2] = $30;
   }
  }
  $31 = HEAP32[$19>>2]|0;
  $32 = $31 & 256;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = (($fs) + 50|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)>($31|0);
   if (!($37)) {
    $38 = (($fs) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + -1)|0;
    HEAP32[$38>>2] = $40;
   }
  }
  $41 = $31 << 23;
  $42 = $21 << 14;
  $43 = $41 | $42;
  $44 = $43 | 6;
  $45 = (($fs) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_luaK_code($fs,$44,$48)|0);
  HEAP32[$19>>2] = $49;
  HEAP32[$e>>2] = 11;
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $10 = (($e) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 << 14;
  $13 = $12 | 5;
  $14 = (($fs) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_luaK_code($fs,$13,$17)|0);
  HEAP32[$10>>2] = $18;
  HEAP32[$e>>2] = 11;
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  HEAP32[$e>>2] = 12;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _luaK_exp2nextreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(12);
 if ($1) {
  $2 = (($e) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 256;
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (($fs) + 50|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = ($8|0)>($3|0);
   if (!($9)) {
    $10 = (($fs) + 36|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + -1)|0;
    HEAP32[$10>>2] = $12;
   }
  }
 }
 $13 = (($fs) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 $16 = HEAP32[$fs>>2]|0;
 $17 = (($16) + 75|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($14|0)<($19|0);
 if ($20) {
  $28 = $14;
  $27 = (($28) + 1)|0;
  HEAP32[$13>>2] = $27;
  _exp2reg($fs,$e,$28);
  STACKTOP = sp;return;
 }
 $21 = ($14|0)>(248);
 if ($21) {
  $22 = (($fs) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  _luaX_syntaxerror($23,4288);
  $$pre$i$i = HEAP32[$fs>>2]|0;
  $$pre$pre$i = HEAP32[$13>>2]|0;
  $$pre$i = $$pre$pre$i;$26 = $$pre$i$i;
 } else {
  $$pre$i = $14;$26 = $16;
 }
 $24 = $15&255;
 $25 = (($26) + 75|0);
 HEAP8[$25>>0] = $24;
 $28 = $$pre$i;
 $27 = (($28) + 1)|0;
 HEAP32[$13>>2] = $27;
 _exp2reg($fs,$e,$28);
 STACKTOP = sp;return;
}
function _luaK_exp2anyreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0 = 0, $$pre = 0, $$pre$phi2Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(12);
 if ($1) {
  $2 = (($e) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($e) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)==($5|0);
  $7 = (($e) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  if ($6) {
   $$0 = $8;
   STACKTOP = sp;return ($$0|0);
  }
  $9 = (($fs) + 50|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($8|0)<($11|0);
  if ($12) {
   $$pre$phi2Z2D = $7;
  } else {
   _exp2reg($fs,$e,$8);
   $13 = HEAP32[$7>>2]|0;
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$pre = (($e) + 8|0);
  $$pre$phi2Z2D = $$pre;
 }
 _luaK_exp2nextreg($fs,$e);
 $14 = HEAP32[$$pre$phi2Z2D>>2]|0;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _luaK_exp2val($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($e) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($e) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  _luaK_dischargevars($fs,$e);
  STACKTOP = sp;return;
 }
 _luaK_dischargevars($fs,$e);
 $5 = HEAP32[$e>>2]|0;
 $6 = ($5|0)==(12);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = ($7|0)==($8|0);
  $10 = (($e) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  if ($9) {
   STACKTOP = sp;return;
  }
  $12 = (($fs) + 50|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   _exp2reg($fs,$e,$11);
   STACKTOP = sp;return;
  }
 }
 _luaK_exp2nextreg($fs,$e);
 STACKTOP = sp;return;
}
function _luaK_exp2RK($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0 = 0, $$pre$i = 0, $$pre$phi2$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$i = 0, $o$i = 0, $o$i1 = 0, $v$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $o$i1 = sp + 48|0;
 $o$i = sp + 32|0;
 $k$i = sp + 16|0;
 $v$i = sp;
 $0 = (($e) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($e) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 _luaK_dischargevars($fs,$e);
 do {
  if (!($4)) {
   $5 = HEAP32[$e>>2]|0;
   $6 = ($5|0)==(12);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = HEAP32[$2>>2]|0;
    $9 = ($7|0)==($8|0);
    $10 = (($e) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    if ($9) {
     break;
    }
    $12 = (($fs) + 50|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&255;
    $15 = ($11|0)<($14|0);
    if (!($15)) {
     _exp2reg($fs,$e,$11);
     break;
    }
   }
   _luaK_exp2nextreg($fs,$e);
  }
 } while(0);
 $16 = HEAP32[$e>>2]|0;
 switch ($16|0) {
 case 1: case 3: case 2: case 5:  {
  $17 = (($fs) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<(256);
  if ($19) {
   if ((($16|0) == 5)) {
    $25 = (($e) + 8|0);
    $26 = +HEAPF64[$25>>3];
    HEAPF64[$o$i>>3] = $26;
    $27 = (($o$i) + 8|0);
    HEAP32[$27>>2] = 3;
    $28 = (_addk($fs,$o$i,$o$i)|0);
    $34 = $28;
   } else if ((($16|0) == 1)) {
    $20 = (($v$i) + 8|0);
    HEAP32[$20>>2] = 0;
    $21 = (($fs) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$k$i>>2] = $22;
    $23 = (($k$i) + 8|0);
    HEAP32[$23>>2] = 5;
    $24 = (_addk($fs,$k$i,$v$i)|0);
    $34 = $24;
   } else {
    $29 = ($16|0)==(2);
    $30 = $29&1;
    HEAP32[$o$i1>>2] = $30;
    $31 = (($o$i1) + 8|0);
    HEAP32[$31>>2] = 1;
    $32 = (_addk($fs,$o$i1,$o$i1)|0);
    $34 = $32;
   }
   $33 = (($e) + 8|0);
   HEAP32[$33>>2] = $34;
   HEAP32[$e>>2] = 4;
   $35 = $34 | 256;
   $$0 = $35;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 4:  {
  $36 = (($e) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)<(256);
  if ($38) {
   $39 = $37 | 256;
   $$0 = $39;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 default: {
 }
 }
 _luaK_dischargevars($fs,$e);
 $40 = HEAP32[$e>>2]|0;
 $41 = ($40|0)==(12);
 if ($41) {
  $42 = HEAP32[$0>>2]|0;
  $43 = HEAP32[$2>>2]|0;
  $44 = ($42|0)==($43|0);
  $45 = (($e) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  if ($44) {
   $$0 = $46;
   STACKTOP = sp;return ($$0|0);
  }
  $47 = (($fs) + 50|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = ($46|0)<($49|0);
  if ($50) {
   $$pre$phi2$iZ2D = $45;
  } else {
   _exp2reg($fs,$e,$46);
   $51 = HEAP32[$45>>2]|0;
   $$0 = $51;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$pre$i = (($e) + 8|0);
  $$pre$phi2$iZ2D = $$pre$i;
 }
 _luaK_exp2nextreg($fs,$e);
 $52 = HEAP32[$$pre$phi2$iZ2D>>2]|0;
 $$0 = $52;
 STACKTOP = sp;return ($$0|0);
}
function _luaK_storevar($fs,$var,$ex) {
 $fs = $fs|0;
 $var = $var|0;
 $ex = $ex|0;
 var $$0$i = 0, $$0$i6 = 0, $$pre$i = 0, $$pre$i2 = 0, $$pre$phi2$i5Z2D = 0, $$pre$phi2$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$var>>2]|0;
 if ((($0|0) == 8)) {
  _luaK_dischargevars($fs,$ex);
  $41 = HEAP32[$ex>>2]|0;
  $42 = ($41|0)==(12);
  if ($42) {
   $43 = (($ex) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($ex) + 20|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($44|0)==($46|0);
   $48 = (($ex) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   if ($47) {
    $$0$i6 = $49;
   } else {
    $50 = (($fs) + 50|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = ($49|0)<($52|0);
    if ($53) {
     $$pre$phi2$i5Z2D = $48;
     label = 19;
    } else {
     _exp2reg($fs,$ex,$49);
     $54 = HEAP32[$48>>2]|0;
     $$0$i6 = $54;
    }
   }
  } else {
   $$pre$i2 = (($ex) + 8|0);
   $$pre$phi2$i5Z2D = $$pre$i2;
   label = 19;
  }
  if ((label|0) == 19) {
   _luaK_exp2nextreg($fs,$ex);
   $55 = HEAP32[$$pre$phi2$i5Z2D>>2]|0;
   $$0$i6 = $55;
  }
  $56 = (($var) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $$0$i6 << 6;
  $59 = $57 << 14;
  $60 = $58 | $59;
  $61 = $60 | 7;
  $62 = (($fs) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  (_luaK_code($fs,$61,$65)|0);
 } else if ((($0|0) == 7)) {
  _luaK_dischargevars($fs,$ex);
  $16 = HEAP32[$ex>>2]|0;
  $17 = ($16|0)==(12);
  if ($17) {
   $18 = (($ex) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($ex) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($19|0)==($21|0);
   $23 = (($ex) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   if ($22) {
    $$0$i = $24;
   } else {
    $25 = (($fs) + 50|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = ($24|0)<($27|0);
    if ($28) {
     $$pre$phi2$iZ2D = $23;
     label = 12;
    } else {
     _exp2reg($fs,$ex,$24);
     $29 = HEAP32[$23>>2]|0;
     $$0$i = $29;
    }
   }
  } else {
   $$pre$i = (($ex) + 8|0);
   $$pre$phi2$iZ2D = $$pre$i;
   label = 12;
  }
  if ((label|0) == 12) {
   _luaK_exp2nextreg($fs,$ex);
   $30 = HEAP32[$$pre$phi2$iZ2D>>2]|0;
   $$0$i = $30;
  }
  $31 = (($var) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $$0$i << 6;
  $34 = $32 << 23;
  $35 = $33 | $34;
  $36 = $35 | 8;
  $37 = (($fs) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  (_luaK_code($fs,$36,$40)|0);
 } else if ((($0|0) == 6)) {
  $1 = HEAP32[$ex>>2]|0;
  $2 = ($1|0)==(12);
  if ($2) {
   $3 = (($ex) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = $4 & 256;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = (($fs) + 50|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $10 = ($9|0)>($4|0);
    if (!($10)) {
     $11 = (($fs) + 36|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($12) + -1)|0;
     HEAP32[$11>>2] = $13;
    }
   }
  }
  $14 = (($var) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  _exp2reg($fs,$ex,$15);
  STACKTOP = sp;return;
 } else if ((($0|0) == 9)) {
  $66 = (_luaK_exp2RK($fs,$ex)|0);
  $67 = (($var) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($67) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $68 << 6;
  $72 = $70 << 23;
  $73 = $66 << 14;
  $74 = $73 | $71;
  $75 = $74 | $72;
  $76 = $75 | 9;
  $77 = (($fs) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  (_luaK_code($fs,$76,$80)|0);
 }
 $81 = HEAP32[$ex>>2]|0;
 $82 = ($81|0)==(12);
 if (!($82)) {
  STACKTOP = sp;return;
 }
 $83 = (($ex) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 & 256;
 $86 = ($85|0)==(0);
 if (!($86)) {
  STACKTOP = sp;return;
 }
 $87 = (($fs) + 50|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = ($89|0)>($84|0);
 if ($90) {
  STACKTOP = sp;return;
 }
 $91 = (($fs) + 36|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + -1)|0;
 HEAP32[$91>>2] = $93;
 STACKTOP = sp;return;
}
function _luaK_self($fs,$e,$key) {
 $fs = $fs|0;
 $e = $e|0;
 $key = $key|0;
 var $$pre$i$i = 0, $$pre$i1 = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(12);
 if ($1) {
  $2 = (($e) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($e) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)==($5|0);
  $7 = (($e) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  if (!($6)) {
   $9 = (($fs) + 50|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($8|0)<($11|0);
   if ($12) {
    label = 5;
   } else {
    _exp2reg($fs,$e,$8);
   }
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  _luaK_exp2nextreg($fs,$e);
 }
 $13 = HEAP32[$e>>2]|0;
 $14 = ($13|0)==(12);
 if ($14) {
  $15 = (($e) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 256;
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = (($fs) + 50|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)>($16|0);
   if (!($22)) {
    $23 = (($fs) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + -1)|0;
    HEAP32[$23>>2] = $25;
   }
  }
 }
 $26 = (($fs) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 2)|0;
 $29 = HEAP32[$fs>>2]|0;
 $30 = (($29) + 75|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($28|0)>($32|0);
 if ($33) {
  $34 = ($28|0)>(249);
  if ($34) {
   $35 = (($fs) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   _luaX_syntaxerror($36,4288);
   $$pre$i$i = HEAP32[$fs>>2]|0;
   $$pre$pre$i = HEAP32[$26>>2]|0;
   $$pre$i1 = $$pre$pre$i;$39 = $$pre$i$i;
  } else {
   $$pre$i1 = $27;$39 = $29;
  }
  $37 = $28&255;
  $38 = (($39) + 75|0);
  HEAP8[$38>>0] = $37;
  $41 = $$pre$i1;
 } else {
  $41 = $27;
 }
 $40 = (($41) + 2)|0;
 HEAP32[$26>>2] = $40;
 $42 = (($e) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_luaK_exp2RK($fs,$key)|0);
 $45 = $27 << 6;
 $46 = $43 << 23;
 $47 = $44 << 14;
 $48 = $45 | $46;
 $49 = $48 | $47;
 $50 = $49 | 11;
 $51 = (($fs) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 (_luaK_code($fs,$50,$54)|0);
 $55 = HEAP32[$key>>2]|0;
 $56 = ($55|0)==(12);
 if (!($56)) {
  HEAP32[$42>>2] = $27;
  HEAP32[$e>>2] = 12;
  STACKTOP = sp;return;
 }
 $57 = (($key) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & 256;
 $60 = ($59|0)==(0);
 if (!($60)) {
  HEAP32[$42>>2] = $27;
  HEAP32[$e>>2] = 12;
  STACKTOP = sp;return;
 }
 $61 = (($fs) + 50|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = ($63|0)>($58|0);
 if ($64) {
  HEAP32[$42>>2] = $27;
  HEAP32[$e>>2] = 12;
  STACKTOP = sp;return;
 }
 $65 = HEAP32[$26>>2]|0;
 $66 = (($65) + -1)|0;
 HEAP32[$26>>2] = $66;
 HEAP32[$42>>2] = $27;
 HEAP32[$e>>2] = 12;
 STACKTOP = sp;return;
}
function _luaK_goiftrue($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0$i$i = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i2 = 0, $$pre$i1 = 0, $$pre$pre$i$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fs$idx$val = 0, $fs$idx$val$i = 0, $fs$idx$val$i$i = 0, $fs$idx$val$idx = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$val = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $list$0$i = 0, $list$0$i$i = 0, $neg$i$i = 0, $neg$i$i$i = 0, $pc$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 do {
  if ((($0|0) == 10)) {
   $fs$idx$val = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx = (($fs$idx$val) + 12|0);
   $fs$idx$val$idx$val = HEAP32[$fs$idx$val$idx>>2]|0;
   $1 = (($e) + 8|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($fs$idx$val$idx$val) + ($2<<2)|0);
   $4 = ($2|0)>(0);
   if ($4) {
    $$sum$i$i = (($2) + -1)|0;
    $5 = (($fs$idx$val$idx$val) + ($$sum$i$i<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = $6 & 63;
    $8 = (2528 + ($7)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)<(0);
    if ($10) {
     $$0$i$i = $5;$12 = $6;
    } else {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    $$pre$i = HEAP32[$3>>2]|0;
    $$0$i$i = $3;$12 = $$pre$i;
   }
   $11 = $12 & -16321;
   $13 = $12 & 16320;
   $14 = ($13|0)==(0);
   $15 = $14&1;
   $16 = $15 << 6;
   $17 = $16 | $11;
   HEAP32[$$0$i$i>>2] = $17;
   $18 = HEAP32[$1>>2]|0;
   $pc$0 = $18;
   label = 19;
  } else if (!((($0|0) == 2) | (($0|0) == 5) | (($0|0) == 4))) {
   $19 = (($e) + 8|0);
   if ((($0|0) == 11)) {
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$fs>>2]|0;
    $22 = (($21) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + ($20<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 63;
    $27 = ($26|0)==(19);
    if ($27) {
     $28 = (($fs) + 24|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + -1)|0;
     HEAP32[$28>>2] = $30;
     $31 = $25 >>> 23;
     $32 = (_condjump($fs,26,$31,0,1)|0);
     $pc$0 = $32;
     label = 19;
     break;
    } else {
     label = 9;
    }
   } else if ((($0|0) == 12)) {
    label = 15;
   } else {
    label = 9;
   }
   if ((label|0) == 9) {
    $33 = (($fs) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 1)|0;
    $36 = HEAP32[$fs>>2]|0;
    $37 = (($36) + 75|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = ($34|0)<($39|0);
    if ($40) {
     $48 = $34;
    } else {
     $41 = ($34|0)>(248);
     if ($41) {
      $42 = (($fs) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      _luaX_syntaxerror($43,4288);
      $$pre$i$i$i = HEAP32[$fs>>2]|0;
      $$pre$pre$i$i = HEAP32[$33>>2]|0;
      $$pre$i$i2 = $$pre$pre$i$i;$46 = $$pre$i$i$i;
     } else {
      $$pre$i$i2 = $34;$46 = $36;
     }
     $44 = $35&255;
     $45 = (($46) + 75|0);
     HEAP8[$45>>0] = $44;
     $48 = $$pre$i$i2;
    }
    $47 = (($48) + 1)|0;
    HEAP32[$33>>2] = $47;
    _discharge2reg($fs,$e,$48);
    $$pr = HEAP32[$e>>2]|0;
    $49 = ($$pr|0)==(12);
    if ($49) {
     label = 15;
    } else {
     $$pre = HEAP32[$19>>2]|0;
     $60 = $$pre;
    }
   }
   if ((label|0) == 15) {
    $50 = HEAP32[$19>>2]|0;
    $51 = $50 & 256;
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = (($fs) + 50|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = ($55|0)>($50|0);
     if ($56) {
      $60 = $50;
     } else {
      $57 = (($fs) + 36|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = (($58) + -1)|0;
      HEAP32[$57>>2] = $59;
      $60 = $50;
     }
    } else {
     $60 = $50;
    }
   }
   $61 = (_condjump($fs,27,255,$60,0)|0);
   $pc$0 = $61;
   label = 19;
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   $62 = (($e) + 20|0);
   $63 = ($pc$0|0)==(-1);
   if (!($63)) {
    $64 = HEAP32[$62>>2]|0;
    $65 = ($64|0)==(-1);
    if ($65) {
     HEAP32[$62>>2] = $pc$0;
     break;
    }
    $fs$idx$val$i = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i = (($fs$idx$val$i) + 12|0);
    $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
    $list$0$i = $64;
    while(1) {
     $66 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $67 >>> 14;
     $69 = (($68) + -131071)|0;
     $70 = ($69|0)==(-1);
     if ($70) {
      break;
     }
     $71 = (($list$0$i) + 1)|0;
     $72 = (($71) + ($69))|0;
     $73 = ($72|0)==(-1);
     if ($73) {
      break;
     } else {
      $list$0$i = $72;
     }
    }
    $$neg$i$i = $list$0$i ^ -1;
    $74 = (($pc$0) + ($$neg$i$i))|0;
    $ispos$i$i = ($74|0)>(-1);
    $neg$i$i = (0 - ($74))|0;
    $75 = $ispos$i$i ? $74 : $neg$i$i;
    $76 = ($75|0)>(131071);
    if ($76) {
     $77 = (($fs) + 12|0);
     $78 = HEAP32[$77>>2]|0;
     _luaX_syntaxerror($78,4376);
     $$pre$i1 = HEAP32[$66>>2]|0;
     $80 = $$pre$i1;
    } else {
     $80 = $67;
    }
    $79 = $80 & 16383;
    $81 = $74 << 14;
    $82 = (($81) + 2147467264)|0;
    $83 = $79 | $82;
    HEAP32[$66>>2] = $83;
   }
  }
 } while(0);
 $84 = (($e) + 16|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($fs) + 24|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($fs) + 28|0);
 HEAP32[$88>>2] = $87;
 $89 = (($fs) + 32|0);
 $90 = ($85|0)==(-1);
 if ($90) {
  HEAP32[$84>>2] = -1;
  STACKTOP = sp;return;
 }
 $91 = HEAP32[$89>>2]|0;
 $92 = ($91|0)==(-1);
 if ($92) {
  HEAP32[$89>>2] = $85;
  HEAP32[$84>>2] = -1;
  STACKTOP = sp;return;
 }
 $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 12|0);
 $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
 $list$0$i$i = $91;
 while(1) {
  $93 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $94 >>> 14;
  $96 = (($95) + -131071)|0;
  $97 = ($96|0)==(-1);
  if ($97) {
   break;
  }
  $98 = (($list$0$i$i) + 1)|0;
  $99 = (($98) + ($96))|0;
  $100 = ($99|0)==(-1);
  if ($100) {
   break;
  } else {
   $list$0$i$i = $99;
  }
 }
 $$neg$i$i$i = $list$0$i$i ^ -1;
 $101 = (($85) + ($$neg$i$i$i))|0;
 $ispos$i$i$i = ($101|0)>(-1);
 $neg$i$i$i = (0 - ($101))|0;
 $102 = $ispos$i$i$i ? $101 : $neg$i$i$i;
 $103 = ($102|0)>(131071);
 if ($103) {
  $104 = (($fs) + 12|0);
  $105 = HEAP32[$104>>2]|0;
  _luaX_syntaxerror($105,4376);
  $$pre$i$i = HEAP32[$93>>2]|0;
  $107 = $$pre$i$i;
 } else {
  $107 = $94;
 }
 $106 = $107 & 16383;
 $108 = $101 << 14;
 $109 = (($108) + 2147467264)|0;
 $110 = $106 | $109;
 HEAP32[$93>>2] = $110;
 HEAP32[$84>>2] = -1;
 STACKTOP = sp;return;
}
function _luaK_indexed($fs,$t,$k) {
 $fs = $fs|0;
 $t = $t|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaK_exp2RK($fs,$k)|0);
 $1 = (($t) + 8|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = $0;
 HEAP32[$t>>2] = 9;
 STACKTOP = sp;return;
}
function _luaK_prefix($fs,$op,$e) {
 $fs = $fs|0;
 $op = $op|0;
 $e = $e|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i9$i = 0, $$03$i$i = 0, $$03$i6$i = 0, $$phi$trans$insert$i = 0, $$pr$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i14$i = 0, $$pre$i$i8$i = 0, $$pre$i1 = 0, $$pre$pre$i$i$i = 0, $$pre16$i = 0, $$sum$i$i$i = 0, $$sum$i$i$i$i = 0, $$sum$i$i$i7$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $e2 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$val$idx$phi$trans$insert$i$i = 0, $fs$idx1$val$idx$phi$trans$insert$i3$i = 0, $fs$idx1$val$idx$val$pre$i$i = 0, $fs$idx1$val$idx$val$pre$i4$i = 0, $fs$idx1$val$pre$i$i = 0, $fs$idx1$val$pre$i2$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e2 = sp;
 $0 = (($e2) + 20|0);
 HEAP32[$0>>2] = -1;
 $1 = (($e2) + 16|0);
 HEAP32[$1>>2] = -1;
 HEAP32[$e2>>2] = 5;
 $2 = (($e2) + 8|0);
 HEAPF64[$2>>3] = 0.0;
 if ((($op|0) == 1)) {
  _luaK_dischargevars($fs,$e);
  $24 = HEAP32[$e>>2]|0;
  switch ($24|0) {
  case 11:  {
   $42 = (($fs) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 1)|0;
   $45 = HEAP32[$fs>>2]|0;
   $46 = (($45) + 75|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = ($43|0)<($48|0);
   if ($49) {
    $57 = $43;
   } else {
    $50 = ($43|0)>(248);
    if ($50) {
     $51 = (($fs) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     _luaX_syntaxerror($52,4288);
     $$pre$i$i$i$i = HEAP32[$fs>>2]|0;
     $$pre$pre$i$i$i = HEAP32[$42>>2]|0;
     $$pre$i$i14$i = $$pre$pre$i$i$i;$55 = $$pre$i$i$i$i;
    } else {
     $$pre$i$i14$i = $43;$55 = $45;
    }
    $53 = $44&255;
    $54 = (($55) + 75|0);
    HEAP8[$54>>0] = $53;
    $57 = $$pre$i$i14$i;
   }
   $56 = (($57) + 1)|0;
   HEAP32[$42>>2] = $56;
   _discharge2reg($fs,$e,$57);
   $$pre$i1 = HEAP32[$e>>2]|0;
   $phitmp$i = ($$pre$i1|0)==(12);
   if ($phitmp$i) {
    label = 24;
   } else {
    $$phi$trans$insert$i = (($e) + 8|0);
    $$pre16$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $71 = $$pre16$i;
    label = 27;
   }
   break;
  }
  case 2: case 5: case 4:  {
   HEAP32[$e>>2] = 3;
   break;
  }
  case 3: case 1:  {
   HEAP32[$e>>2] = 2;
   break;
  }
  case 10:  {
   $fs$idx$val$i = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i = (($fs$idx$val$i) + 12|0);
   $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
   $25 = (($e) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($fs$idx$val$idx$val$i) + ($26<<2)|0);
   $28 = ($26|0)>(0);
   if ($28) {
    $$sum$i$i$i = (($26) + -1)|0;
    $29 = (($fs$idx$val$idx$val$i) + ($$sum$i$i$i<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30 & 63;
    $32 = (2528 + ($31)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)<(0);
    if ($34) {
     $$0$i$i$i = $29;$36 = $30;
    } else {
     label = 16;
    }
   } else {
    label = 16;
   }
   if ((label|0) == 16) {
    $$pre$i$i = HEAP32[$27>>2]|0;
    $$0$i$i$i = $27;$36 = $$pre$i$i;
   }
   $35 = $36 & -16321;
   $37 = $36 & 16320;
   $38 = ($37|0)==(0);
   $39 = $38&1;
   $40 = $39 << 6;
   $41 = $40 | $35;
   HEAP32[$$0$i$i$i>>2] = $41;
   break;
  }
  case 12:  {
   label = 24;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 24) {
   $58 = (($e) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 256;
   $61 = ($60|0)==(0);
   if ($61) {
    $62 = (($fs) + 50|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = ($64|0)>($59|0);
    if ($65) {
     $71 = $59;
     label = 27;
    } else {
     $66 = (($fs) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + -1)|0;
     HEAP32[$66>>2] = $68;
     $71 = $59;
     label = 27;
    }
   } else {
    $71 = $59;
    label = 27;
   }
  }
  if ((label|0) == 27) {
   $69 = (($e) + 8|0);
   $70 = $71 << 23;
   $72 = $70 | 19;
   $73 = (($fs) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (_luaK_code($fs,$72,$76)|0);
   HEAP32[$69>>2] = $77;
   HEAP32[$e>>2] = 11;
  }
  $78 = (($e) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($e) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  HEAP32[$78>>2] = $81;
  HEAP32[$80>>2] = $79;
  $82 = ($81|0)==(-1);
  if ($82) {
   $106 = $79;
  } else {
   $fs$idx1$val$pre$i2$i = HEAP32[$fs>>2]|0;
   $fs$idx1$val$idx$phi$trans$insert$i3$i = (($fs$idx1$val$pre$i2$i) + 12|0);
   $fs$idx1$val$idx$val$pre$i4$i = HEAP32[$fs$idx1$val$idx$phi$trans$insert$i3$i>>2]|0;
   $$03$i6$i = $81;
   while(1) {
    $83 = (($fs$idx1$val$idx$val$pre$i4$i) + ($$03$i6$i<<2)|0);
    $84 = ($$03$i6$i|0)>(0);
    if ($84) {
     $$sum$i$i$i7$i = (($$03$i6$i) + -1)|0;
     $85 = (($fs$idx1$val$idx$val$pre$i4$i) + ($$sum$i$i$i7$i<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $86 & 63;
     $88 = (2528 + ($87)|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = ($89<<24>>24)<(0);
     if ($90) {
      $$0$i$i$i9$i = $85;$92 = $86;
     } else {
      label = 32;
     }
    } else {
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $$pre$i$i8$i = HEAP32[$83>>2]|0;
     $$0$i$i$i9$i = $83;$92 = $$pre$i$i8$i;
    }
    $91 = $92 & 63;
    $93 = ($91|0)==(27);
    if ($93) {
     $94 = $92 >>> 23;
     $95 = $94 << 6;
     $96 = $92 & 8372224;
     $97 = $96 | $95;
     $98 = $97 | 26;
     HEAP32[$$0$i$i$i9$i>>2] = $98;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = $99 >>> 14;
    $101 = (($100) + -131071)|0;
    $102 = ($101|0)==(-1);
    if ($102) {
     break;
    }
    $103 = (($$03$i6$i) + 1)|0;
    $104 = (($103) + ($101))|0;
    $105 = ($104|0)==(-1);
    if ($105) {
     break;
    } else {
     $$03$i6$i = $104;
    }
   }
   $$pr$i = HEAP32[$80>>2]|0;
   $106 = $$pr$i;
  }
  $107 = ($106|0)==(-1);
  if ($107) {
   STACKTOP = sp;return;
  }
  $fs$idx1$val$pre$i$i = HEAP32[$fs>>2]|0;
  $fs$idx1$val$idx$phi$trans$insert$i$i = (($fs$idx1$val$pre$i$i) + 12|0);
  $fs$idx1$val$idx$val$pre$i$i = HEAP32[$fs$idx1$val$idx$phi$trans$insert$i$i>>2]|0;
  $$03$i$i = $106;
  while(1) {
   $108 = (($fs$idx1$val$idx$val$pre$i$i) + ($$03$i$i<<2)|0);
   $109 = ($$03$i$i|0)>(0);
   if ($109) {
    $$sum$i$i$i$i = (($$03$i$i) + -1)|0;
    $110 = (($fs$idx1$val$idx$val$pre$i$i) + ($$sum$i$i$i$i<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $111 & 63;
    $113 = (2528 + ($112)|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = ($114<<24>>24)<(0);
    if ($115) {
     $$0$i$i$i$i = $110;$117 = $111;
    } else {
     label = 42;
    }
   } else {
    label = 42;
   }
   if ((label|0) == 42) {
    label = 0;
    $$pre$i$i$i = HEAP32[$108>>2]|0;
    $$0$i$i$i$i = $108;$117 = $$pre$i$i$i;
   }
   $116 = $117 & 63;
   $118 = ($116|0)==(27);
   if ($118) {
    $119 = $117 >>> 23;
    $120 = $119 << 6;
    $121 = $117 & 8372224;
    $122 = $121 | $120;
    $123 = $122 | 26;
    HEAP32[$$0$i$i$i$i>>2] = $123;
   }
   $124 = HEAP32[$108>>2]|0;
   $125 = $124 >>> 14;
   $126 = (($125) + -131071)|0;
   $127 = ($126|0)==(-1);
   if ($127) {
    label = 53;
    break;
   }
   $128 = (($$03$i$i) + 1)|0;
   $129 = (($128) + ($126))|0;
   $130 = ($129|0)==(-1);
   if ($130) {
    label = 53;
    break;
   } else {
    $$03$i$i = $129;
   }
  }
  if ((label|0) == 53) {
   STACKTOP = sp;return;
  }
 } else if ((($op|0) == 0)) {
  $3 = HEAP32[$e>>2]|0;
  $4 = ($3|0)==(5);
  if ($4) {
   $5 = (($e) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    $8 = (($e) + 20|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(-1);
    if (!($10)) {
     label = 5;
    }
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
  do {
   if ((label|0) == 5) {
    _luaK_dischargevars($fs,$e);
    $11 = HEAP32[$e>>2]|0;
    $12 = ($11|0)==(12);
    if ($12) {
     $13 = (($e) + 16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($e) + 20|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     $18 = (($e) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     if ($17) {
      break;
     }
     $20 = (($fs) + 50|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = $21&255;
     $23 = ($19|0)<($22|0);
     if (!($23)) {
      _exp2reg($fs,$e,$19);
      break;
     }
    }
    _luaK_exp2nextreg($fs,$e);
   }
  } while(0);
  _codearith($fs,18,$e,$e2);
  STACKTOP = sp;return;
 } else if ((($op|0) == 2)) {
  _luaK_dischargevars($fs,$e);
  $131 = HEAP32[$e>>2]|0;
  $132 = ($131|0)==(12);
  if ($132) {
   $133 = (($e) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($e) + 20|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($134|0)==($136|0);
   $138 = (($e) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   if (!($137)) {
    $140 = (($fs) + 50|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = ($139|0)<($142|0);
    if ($143) {
     label = 51;
    } else {
     _exp2reg($fs,$e,$139);
    }
   }
  } else {
   label = 51;
  }
  if ((label|0) == 51) {
   _luaK_exp2nextreg($fs,$e);
  }
  _codearith($fs,20,$e,$e2);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _luaK_infix($fs,$op,$v) {
 $fs = $fs|0;
 $op = $op|0;
 $v = $v|0;
 var $$neg$i$i$i = 0, $$neg$i$i$i$i = 0, $$pr$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i1$i = 0, $$pre$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i$i = 0, $fs$idx$val$i$i$i = 0, $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$i$i$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $ispos$i$i$i = 0;
 var $ispos$i$i$i$i = 0, $list$0$i$i = 0, $list$0$i$i$i = 0, $neg$i$i$i = 0, $neg$i$i$i$i = 0, $pc$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 14:  {
  _luaK_dischargevars($fs,$v);
  $0 = HEAP32[$v>>2]|0;
  do {
   if ((($0|0) == 10)) {
    $1 = (($v) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $pc$0$i = $2;
    label = 19;
   } else if (!((($0|0) == 3) | (($0|0) == 1))) {
    $3 = (($v) + 8|0);
    if ((($0|0) == 11)) {
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$fs>>2]|0;
     $6 = (($5) + 12|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = (($7) + ($4<<2)|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = $9 & 63;
     $11 = ($10|0)==(19);
     if ($11) {
      $12 = (($fs) + 24|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = (($13) + -1)|0;
      HEAP32[$12>>2] = $14;
      $15 = $9 >>> 23;
      $16 = (_condjump($fs,26,$15,0,0)|0);
      $pc$0$i = $16;
      label = 19;
      break;
     } else {
      $21 = $5;
      label = 9;
     }
    } else if ((($0|0) == 12)) {
     label = 15;
    } else {
     $$pre = HEAP32[$fs>>2]|0;
     $21 = $$pre;
     label = 9;
    }
    if ((label|0) == 9) {
     $17 = (($fs) + 36|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + 1)|0;
     $20 = (($21) + 75|0);
     $22 = HEAP8[$20>>0]|0;
     $23 = $22&255;
     $24 = ($18|0)<($23|0);
     if ($24) {
      $32 = $18;
     } else {
      $25 = ($18|0)>(248);
      if ($25) {
       $26 = (($fs) + 12|0);
       $27 = HEAP32[$26>>2]|0;
       _luaX_syntaxerror($27,4288);
       $$pre$i$i$i$i = HEAP32[$fs>>2]|0;
       $$pre$pre$i$i$i = HEAP32[$17>>2]|0;
       $$pre$i$i1$i = $$pre$pre$i$i$i;$30 = $$pre$i$i$i$i;
      } else {
       $$pre$i$i1$i = $18;$30 = $21;
      }
      $28 = $19&255;
      $29 = (($30) + 75|0);
      HEAP8[$29>>0] = $28;
      $32 = $$pre$i$i1$i;
     }
     $31 = (($32) + 1)|0;
     HEAP32[$17>>2] = $31;
     _discharge2reg($fs,$v,$32);
     $$pr$i = HEAP32[$v>>2]|0;
     $33 = ($$pr$i|0)==(12);
     if ($33) {
      label = 15;
     } else {
      $$pre$i = HEAP32[$3>>2]|0;
      $44 = $$pre$i;
     }
    }
    if ((label|0) == 15) {
     $34 = HEAP32[$3>>2]|0;
     $35 = $34 & 256;
     $36 = ($35|0)==(0);
     if ($36) {
      $37 = (($fs) + 50|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38&255;
      $40 = ($39|0)>($34|0);
      if ($40) {
       $44 = $34;
      } else {
       $41 = (($fs) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + -1)|0;
       HEAP32[$41>>2] = $43;
       $44 = $34;
      }
     } else {
      $44 = $34;
     }
    }
    $45 = (_condjump($fs,27,255,$44,1)|0);
    $pc$0$i = $45;
    label = 19;
   }
  } while(0);
  do {
   if ((label|0) == 19) {
    $46 = (($v) + 16|0);
    $47 = ($pc$0$i|0)==(-1);
    if (!($47)) {
     $48 = HEAP32[$46>>2]|0;
     $49 = ($48|0)==(-1);
     if ($49) {
      HEAP32[$46>>2] = $pc$0$i;
      break;
     }
     $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 12|0);
     $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
     $list$0$i$i = $48;
     while(1) {
      $50 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = $51 >>> 14;
      $53 = (($52) + -131071)|0;
      $54 = ($53|0)==(-1);
      if ($54) {
       break;
      }
      $55 = (($list$0$i$i) + 1)|0;
      $56 = (($55) + ($53))|0;
      $57 = ($56|0)==(-1);
      if ($57) {
       break;
      } else {
       $list$0$i$i = $56;
      }
     }
     $$neg$i$i$i = $list$0$i$i ^ -1;
     $58 = (($pc$0$i) + ($$neg$i$i$i))|0;
     $ispos$i$i$i = ($58|0)>(-1);
     $neg$i$i$i = (0 - ($58))|0;
     $59 = $ispos$i$i$i ? $58 : $neg$i$i$i;
     $60 = ($59|0)>(131071);
     if ($60) {
      $61 = (($fs) + 12|0);
      $62 = HEAP32[$61>>2]|0;
      _luaX_syntaxerror($62,4376);
      $$pre$i$i = HEAP32[$50>>2]|0;
      $64 = $$pre$i$i;
     } else {
      $64 = $51;
     }
     $63 = $64 & 16383;
     $65 = $58 << 14;
     $66 = (($65) + 2147467264)|0;
     $67 = $63 | $66;
     HEAP32[$50>>2] = $67;
    }
   }
  } while(0);
  $68 = (($v) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($fs) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($fs) + 28|0);
  HEAP32[$72>>2] = $71;
  $73 = (($fs) + 32|0);
  $74 = ($69|0)==(-1);
  do {
   if (!($74)) {
    $75 = HEAP32[$73>>2]|0;
    $76 = ($75|0)==(-1);
    if ($76) {
     HEAP32[$73>>2] = $69;
     break;
    }
    $fs$idx$val$i$i$i = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i$i$i = (($fs$idx$val$i$i$i) + 12|0);
    $fs$idx$val$idx$val$i$i$i = HEAP32[$fs$idx$val$idx$i$i$i>>2]|0;
    $list$0$i$i$i = $75;
    while(1) {
     $77 = (($fs$idx$val$idx$val$i$i$i) + ($list$0$i$i$i<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $78 >>> 14;
     $80 = (($79) + -131071)|0;
     $81 = ($80|0)==(-1);
     if ($81) {
      break;
     }
     $82 = (($list$0$i$i$i) + 1)|0;
     $83 = (($82) + ($80))|0;
     $84 = ($83|0)==(-1);
     if ($84) {
      break;
     } else {
      $list$0$i$i$i = $83;
     }
    }
    $$neg$i$i$i$i = $list$0$i$i$i ^ -1;
    $85 = (($69) + ($$neg$i$i$i$i))|0;
    $ispos$i$i$i$i = ($85|0)>(-1);
    $neg$i$i$i$i = (0 - ($85))|0;
    $86 = $ispos$i$i$i$i ? $85 : $neg$i$i$i$i;
    $87 = ($86|0)>(131071);
    if ($87) {
     $88 = (($fs) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     _luaX_syntaxerror($89,4376);
     $$pre$i$i$i = HEAP32[$77>>2]|0;
     $91 = $$pre$i$i$i;
    } else {
     $91 = $78;
    }
    $90 = $91 & 16383;
    $92 = $85 << 14;
    $93 = (($92) + 2147467264)|0;
    $94 = $90 | $93;
    HEAP32[$77>>2] = $94;
   }
  } while(0);
  HEAP32[$68>>2] = -1;
  STACKTOP = sp;return;
  break;
 }
 case 5: case 4: case 3: case 2: case 1: case 0:  {
  $95 = HEAP32[$v>>2]|0;
  $96 = ($95|0)==(5);
  if ($96) {
   $97 = (($v) + 16|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==(-1);
   if ($99) {
    $100 = (($v) + 20|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)==(-1);
    if ($102) {
     STACKTOP = sp;return;
    }
   }
  }
  (_luaK_exp2RK($fs,$v)|0);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  _luaK_exp2nextreg($fs,$v);
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  _luaK_goiftrue($fs,$v);
  STACKTOP = sp;return;
  break;
 }
 default: {
  (_luaK_exp2RK($fs,$v)|0);
  STACKTOP = sp;return;
 }
 }
}
function _luaK_posfix($fs,$op,$e1,$e2) {
 $fs = $fs|0;
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $$neg$i$i = 0, $$neg$i$i8 = 0, $$pre = 0, $$pre$i = 0, $$pre$i12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i = 0, $fs$idx$val$i2 = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i3 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i4 = 0, $ispos$i$i = 0;
 var $ispos$i$i9 = 0, $list$0$i = 0, $list$0$i6 = 0, $neg$i$i = 0, $neg$i$i10 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($op|0) {
  case 12:  {
   $239 = (_luaK_exp2RK($fs,$e1)|0);
   $240 = (_luaK_exp2RK($fs,$e2)|0);
   $241 = HEAP32[$e2>>2]|0;
   $242 = ($241|0)==(12);
   if ($242) {
    $243 = (($e2) + 8|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $244 & 256;
    $246 = ($245|0)==(0);
    if ($246) {
     $247 = (($fs) + 50|0);
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = ($249|0)>($244|0);
     if (!($250)) {
      $251 = (($fs) + 36|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = (($252) + -1)|0;
      HEAP32[$251>>2] = $253;
     }
    }
   }
   $254 = HEAP32[$e1>>2]|0;
   $255 = ($254|0)==(12);
   $256 = (($e1) + 8|0);
   if ($255) {
    $257 = HEAP32[$256>>2]|0;
    $258 = $257 & 256;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = (($fs) + 50|0);
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&255;
     $263 = ($262|0)>($257|0);
     if (!($263)) {
      $264 = (($fs) + 36|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = (($265) + -1)|0;
      HEAP32[$264>>2] = $266;
     }
    }
   }
   $267 = (_condjump($fs,25,1,$240,$239)|0);
   HEAP32[$256>>2] = $267;
   HEAP32[$e1>>2] = 10;
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $94 = (_luaK_exp2RK($fs,$e1)|0);
   $95 = (_luaK_exp2RK($fs,$e2)|0);
   $96 = HEAP32[$e2>>2]|0;
   $97 = ($96|0)==(12);
   if ($97) {
    $98 = (($e2) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $99 & 256;
    $101 = ($100|0)==(0);
    if ($101) {
     $102 = (($fs) + 50|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = $103&255;
     $105 = ($104|0)>($99|0);
     if (!($105)) {
      $106 = (($fs) + 36|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (($107) + -1)|0;
      HEAP32[$106>>2] = $108;
     }
    }
   }
   $109 = HEAP32[$e1>>2]|0;
   $110 = ($109|0)==(12);
   $111 = (($e1) + 8|0);
   if ($110) {
    $112 = HEAP32[$111>>2]|0;
    $113 = $112 & 256;
    $114 = ($113|0)==(0);
    if ($114) {
     $115 = (($fs) + 50|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $116&255;
     $118 = ($117|0)>($112|0);
     if (!($118)) {
      $119 = (($fs) + 36|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (($120) + -1)|0;
      HEAP32[$119>>2] = $121;
     }
    }
   }
   $122 = (_condjump($fs,23,1,$94,$95)|0);
   HEAP32[$111>>2] = $122;
   HEAP32[$e1>>2] = 10;
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   _codearith($fs,12,$e1,$e2);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   _codearith($fs,13,$e1,$e2);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   _codearith($fs,14,$e1,$e2);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   _codearith($fs,15,$e1,$e2);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   _codearith($fs,16,$e1,$e2);
   STACKTOP = sp;return;
   break;
  }
  case 14:  {
   _luaK_dischargevars($fs,$e2);
   $24 = (($e2) + 16|0);
   $25 = (($e1) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(-1);
   do {
    if (!($27)) {
     $28 = HEAP32[$24>>2]|0;
     $29 = ($28|0)==(-1);
     if ($29) {
      HEAP32[$24>>2] = $26;
      break;
     }
     $fs$idx$val$i2 = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i3 = (($fs$idx$val$i2) + 12|0);
     $fs$idx$val$idx$val$i4 = HEAP32[$fs$idx$val$idx$i3>>2]|0;
     $list$0$i6 = $28;
     while(1) {
      $30 = (($fs$idx$val$idx$val$i4) + ($list$0$i6<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = $31 >>> 14;
      $33 = (($32) + -131071)|0;
      $34 = ($33|0)==(-1);
      if ($34) {
       break;
      }
      $35 = (($list$0$i6) + 1)|0;
      $36 = (($35) + ($33))|0;
      $37 = ($36|0)==(-1);
      if ($37) {
       break;
      } else {
       $list$0$i6 = $36;
      }
     }
     $$neg$i$i8 = $list$0$i6 ^ -1;
     $38 = (($26) + ($$neg$i$i8))|0;
     $ispos$i$i9 = ($38|0)>(-1);
     $neg$i$i10 = (0 - ($38))|0;
     $39 = $ispos$i$i9 ? $38 : $neg$i$i10;
     $40 = ($39|0)>(131071);
     if ($40) {
      $41 = (($fs) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      _luaX_syntaxerror($42,4376);
      $$pre$i12 = HEAP32[$30>>2]|0;
      $44 = $$pre$i12;
     } else {
      $44 = $31;
     }
     $43 = $44 & 16383;
     $45 = $38 << 14;
     $46 = (($45) + 2147467264)|0;
     $47 = $43 | $46;
     HEAP32[$30>>2] = $47;
    }
   } while(0);
   ;HEAP32[$e1+0>>2]=HEAP32[$e2+0>>2]|0;HEAP32[$e1+4>>2]=HEAP32[$e2+4>>2]|0;HEAP32[$e1+8>>2]=HEAP32[$e2+8>>2]|0;HEAP32[$e1+12>>2]=HEAP32[$e2+12>>2]|0;HEAP32[$e1+16>>2]=HEAP32[$e2+16>>2]|0;HEAP32[$e1+20>>2]=HEAP32[$e2+20>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  case 13:  {
   _luaK_dischargevars($fs,$e2);
   $0 = (($e2) + 20|0);
   $1 = (($e1) + 20|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(-1);
   do {
    if (!($3)) {
     $4 = HEAP32[$0>>2]|0;
     $5 = ($4|0)==(-1);
     if ($5) {
      HEAP32[$0>>2] = $2;
      break;
     }
     $fs$idx$val$i = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i = (($fs$idx$val$i) + 12|0);
     $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
     $list$0$i = $4;
     while(1) {
      $6 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
      $7 = HEAP32[$6>>2]|0;
      $8 = $7 >>> 14;
      $9 = (($8) + -131071)|0;
      $10 = ($9|0)==(-1);
      if ($10) {
       break;
      }
      $11 = (($list$0$i) + 1)|0;
      $12 = (($11) + ($9))|0;
      $13 = ($12|0)==(-1);
      if ($13) {
       break;
      } else {
       $list$0$i = $12;
      }
     }
     $$neg$i$i = $list$0$i ^ -1;
     $14 = (($2) + ($$neg$i$i))|0;
     $ispos$i$i = ($14|0)>(-1);
     $neg$i$i = (0 - ($14))|0;
     $15 = $ispos$i$i ? $14 : $neg$i$i;
     $16 = ($15|0)>(131071);
     if ($16) {
      $17 = (($fs) + 12|0);
      $18 = HEAP32[$17>>2]|0;
      _luaX_syntaxerror($18,4376);
      $$pre$i = HEAP32[$6>>2]|0;
      $20 = $$pre$i;
     } else {
      $20 = $7;
     }
     $19 = $20 & 16383;
     $21 = $14 << 14;
     $22 = (($21) + 2147467264)|0;
     $23 = $19 | $22;
     HEAP32[$6>>2] = $23;
    }
   } while(0);
   ;HEAP32[$e1+0>>2]=HEAP32[$e2+0>>2]|0;HEAP32[$e1+4>>2]=HEAP32[$e2+4>>2]|0;HEAP32[$e1+8>>2]=HEAP32[$e2+8>>2]|0;HEAP32[$e1+12>>2]=HEAP32[$e2+12>>2]|0;HEAP32[$e1+16>>2]=HEAP32[$e2+16>>2]|0;HEAP32[$e1+20>>2]=HEAP32[$e2+20>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $181 = (_luaK_exp2RK($fs,$e1)|0);
   $182 = (_luaK_exp2RK($fs,$e2)|0);
   $183 = HEAP32[$e2>>2]|0;
   $184 = ($183|0)==(12);
   if ($184) {
    $185 = (($e2) + 8|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $186 & 256;
    $188 = ($187|0)==(0);
    if ($188) {
     $189 = (($fs) + 50|0);
     $190 = HEAP8[$189>>0]|0;
     $191 = $190&255;
     $192 = ($191|0)>($186|0);
     if (!($192)) {
      $193 = (($fs) + 36|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = (($194) + -1)|0;
      HEAP32[$193>>2] = $195;
     }
    }
   }
   $196 = HEAP32[$e1>>2]|0;
   $197 = ($196|0)==(12);
   $198 = (($e1) + 8|0);
   if ($197) {
    $199 = HEAP32[$198>>2]|0;
    $200 = $199 & 256;
    $201 = ($200|0)==(0);
    if ($201) {
     $202 = (($fs) + 50|0);
     $203 = HEAP8[$202>>0]|0;
     $204 = $203&255;
     $205 = ($204|0)>($199|0);
     if (!($205)) {
      $206 = (($fs) + 36|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($207) + -1)|0;
      HEAP32[$206>>2] = $208;
     }
    }
   }
   $209 = (_condjump($fs,25,1,$181,$182)|0);
   HEAP32[$198>>2] = $209;
   HEAP32[$e1>>2] = 10;
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $48 = (($e2) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($e2) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)==($51|0);
   _luaK_dischargevars($fs,$e2);
   do {
    if (!($52)) {
     $53 = HEAP32[$e2>>2]|0;
     $54 = ($53|0)==(12);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = HEAP32[$50>>2]|0;
      $57 = ($55|0)==($56|0);
      $58 = (($e2) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      if ($57) {
       break;
      }
      $60 = (($fs) + 50|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = ($59|0)<($62|0);
      if (!($63)) {
       _exp2reg($fs,$e2,$59);
       break;
      }
     }
     _luaK_exp2nextreg($fs,$e2);
    }
   } while(0);
   $64 = HEAP32[$e2>>2]|0;
   $65 = ($64|0)==(11);
   if ($65) {
    $66 = (($e2) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = HEAP32[$fs>>2]|0;
    $69 = (($68) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $72 & 63;
    $74 = ($73|0)==(21);
    if ($74) {
     $75 = HEAP32[$e1>>2]|0;
     $76 = ($75|0)==(12);
     $77 = (($e1) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $78 & 256;
     $80 = ($79|0)==(0);
     $or$cond = $76 & $80;
     if ($or$cond) {
      $81 = (($fs) + 50|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = $82&255;
      $84 = ($83|0)>($78|0);
      if ($84) {
       $89 = $72;
      } else {
       $85 = (($fs) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (($86) + -1)|0;
       HEAP32[$85>>2] = $87;
       $$pre = HEAP32[$71>>2]|0;
       $89 = $$pre;
      }
     } else {
      $89 = $72;
     }
     $88 = $89 & 8388607;
     $90 = (($e1) + 8|0);
     $91 = $78 << 23;
     $92 = $91 | $88;
     HEAP32[$71>>2] = $92;
     HEAP32[$e1>>2] = 11;
     $93 = HEAP32[$66>>2]|0;
     HEAP32[$90>>2] = $93;
     STACKTOP = sp;return;
    }
   }
   _luaK_exp2nextreg($fs,$e2);
   _codearith($fs,21,$e1,$e2);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $123 = (_luaK_exp2RK($fs,$e1)|0);
   $124 = (_luaK_exp2RK($fs,$e2)|0);
   $125 = HEAP32[$e2>>2]|0;
   $126 = ($125|0)==(12);
   if ($126) {
    $127 = (($e2) + 8|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $128 & 256;
    $130 = ($129|0)==(0);
    if ($130) {
     $131 = (($fs) + 50|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132&255;
     $134 = ($133|0)>($128|0);
     if (!($134)) {
      $135 = (($fs) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = (($136) + -1)|0;
      HEAP32[$135>>2] = $137;
     }
    }
   }
   $138 = HEAP32[$e1>>2]|0;
   $139 = ($138|0)==(12);
   $140 = (($e1) + 8|0);
   if ($139) {
    $141 = HEAP32[$140>>2]|0;
    $142 = $141 & 256;
    $143 = ($142|0)==(0);
    if ($143) {
     $144 = (($fs) + 50|0);
     $145 = HEAP8[$144>>0]|0;
     $146 = $145&255;
     $147 = ($146|0)>($141|0);
     if (!($147)) {
      $148 = (($fs) + 36|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($149) + -1)|0;
      HEAP32[$148>>2] = $150;
     }
    }
   }
   $151 = (_condjump($fs,23,0,$123,$124)|0);
   HEAP32[$140>>2] = $151;
   HEAP32[$e1>>2] = 10;
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $152 = (_luaK_exp2RK($fs,$e1)|0);
   $153 = (_luaK_exp2RK($fs,$e2)|0);
   $154 = HEAP32[$e2>>2]|0;
   $155 = ($154|0)==(12);
   if ($155) {
    $156 = (($e2) + 8|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $157 & 256;
    $159 = ($158|0)==(0);
    if ($159) {
     $160 = (($fs) + 50|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = ($162|0)>($157|0);
     if (!($163)) {
      $164 = (($fs) + 36|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = (($165) + -1)|0;
      HEAP32[$164>>2] = $166;
     }
    }
   }
   $167 = HEAP32[$e1>>2]|0;
   $168 = ($167|0)==(12);
   $169 = (($e1) + 8|0);
   if ($168) {
    $170 = HEAP32[$169>>2]|0;
    $171 = $170 & 256;
    $172 = ($171|0)==(0);
    if ($172) {
     $173 = (($fs) + 50|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175|0)>($170|0);
     if (!($176)) {
      $177 = (($fs) + 36|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = (($178) + -1)|0;
      HEAP32[$177>>2] = $179;
     }
    }
   }
   $180 = (_condjump($fs,24,1,$152,$153)|0);
   HEAP32[$169>>2] = $180;
   HEAP32[$e1>>2] = 10;
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $210 = (_luaK_exp2RK($fs,$e1)|0);
   $211 = (_luaK_exp2RK($fs,$e2)|0);
   $212 = HEAP32[$e2>>2]|0;
   $213 = ($212|0)==(12);
   if ($213) {
    $214 = (($e2) + 8|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $215 & 256;
    $217 = ($216|0)==(0);
    if ($217) {
     $218 = (($fs) + 50|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = $219&255;
     $221 = ($220|0)>($215|0);
     if (!($221)) {
      $222 = (($fs) + 36|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = (($223) + -1)|0;
      HEAP32[$222>>2] = $224;
     }
    }
   }
   $225 = HEAP32[$e1>>2]|0;
   $226 = ($225|0)==(12);
   $227 = (($e1) + 8|0);
   if ($226) {
    $228 = HEAP32[$227>>2]|0;
    $229 = $228 & 256;
    $230 = ($229|0)==(0);
    if ($230) {
     $231 = (($fs) + 50|0);
     $232 = HEAP8[$231>>0]|0;
     $233 = $232&255;
     $234 = ($233|0)>($228|0);
     if (!($234)) {
      $235 = (($fs) + 36|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (($236) + -1)|0;
      HEAP32[$235>>2] = $237;
     }
    }
   }
   $238 = (_condjump($fs,24,1,$211,$210)|0);
   HEAP32[$227>>2] = $238;
   HEAP32[$e1>>2] = 10;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   _codearith($fs,17,$e1,$e2);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _luaK_fixline($fs,$line) {
 $fs = $fs|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = HEAP32[$fs>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 HEAP32[$6>>2] = $line;
 STACKTOP = sp;return;
}
function _luaK_setlist($fs,$base,$nelems,$tostore) {
 $fs = $fs|0;
 $base = $base|0;
 $nelems = $nelems|0;
 $tostore = $tostore|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tostore$op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($nelems) + -1)|0;
 $1 = (($0|0) / 50)&-1;
 $2 = (($1) + 1)|0;
 $3 = ($tostore|0)==(-1);
 $4 = ($2|0)<(512);
 $5 = $base << 6;
 $tostore$op = $tostore << 23;
 $6 = $3 ? 0 : $tostore$op;
 $7 = $5 | $6;
 $8 = $7 | 34;
 if ($4) {
  $9 = $2 << 14;
  $10 = $9 | $8;
  $11 = (($fs) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  (_luaK_code($fs,$10,$14)|0);
  $22 = (($base) + 1)|0;
  $23 = (($fs) + 36|0);
  HEAP32[$23>>2] = $22;
  STACKTOP = sp;return;
 } else {
  $15 = (($fs) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  (_luaK_code($fs,$8,$18)|0);
  $19 = HEAP32[$15>>2]|0;
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  (_luaK_code($fs,$2,$21)|0);
  $22 = (($base) + 1)|0;
  $23 = (($fs) + 36|0);
  HEAP32[$23>>2] = $22;
  STACKTOP = sp;return;
 }
}
function _luaK_code($fs,$i,$line) {
 $fs = $fs|0;
 $i = $i|0;
 $line = $line|0;
 var $$0$i$i$i = 0, $$0$i$i5$i = 0, $$02$i$i = 0, $$neg$i$i = 0, $$neg$i1$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert4 = 0, $$pre = 0, $$pre$i = 0, $$pre1 = 0, $$pre2 = 0, $$pre3 = 0, $$pre5 = 0, $$sum$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $fs$idx$val$i$i = 0, $fs$idx$val$i$i$pre = 0, $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$val$i$i = 0, $ispos$i$i = 0, $ispos$i2$i = 0, $neg$i$i = 0, $neg$i3$i = 0, $storemerge$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($fs) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($fs) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==(-1);
 if ($5) {
  $50 = $4;
 } else {
  $6 = (($fs) + 12|0);
  $$02$i$i = $2;$fs$idx$val$i$i = $0;
  while(1) {
   $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 12|0);
   $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
   $7 = (($fs$idx$val$idx$val$i$i) + ($$02$i$i<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 >>> 14;
   $10 = (($9) + -131071)|0;
   $11 = ($10|0)==(-1);
   if ($11) {
    $$0$i$i$i = -1;
   } else {
    $12 = (($$02$i$i) + 1)|0;
    $13 = (($12) + ($10))|0;
    $$0$i$i$i = $13;
   }
   $14 = ($$02$i$i|0)>(0);
   if ($14) {
    $$sum$i$i$i = (($$02$i$i) + -1)|0;
    $15 = (($fs$idx$val$idx$val$i$i) + ($$sum$i$i$i<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 63;
    $18 = (2528 + ($17)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)<(0);
    if ($20) {
     $$0$i$i5$i = $15;$22 = $16;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    label = 0;
    $$0$i$i5$i = $7;$22 = $8;
   }
   $21 = $22 & 63;
   $23 = ($21|0)==(27);
   if ($23) {
    $24 = $22 >>> 23;
    $25 = $24 << 6;
    $26 = $22 & 8372224;
    $27 = $26 | $25;
    $28 = $27 | 26;
    HEAP32[$$0$i$i5$i>>2] = $28;
    $$neg$i$i = $$02$i$i ^ -1;
    $29 = (($4) + ($$neg$i$i))|0;
    $ispos$i$i = ($29|0)>(-1);
    $neg$i$i = (0 - ($29))|0;
    $30 = $ispos$i$i ? $29 : $neg$i$i;
    $31 = ($30|0)>(131071);
    if ($31) {
     $32 = HEAP32[$6>>2]|0;
     _luaX_syntaxerror($32,4376);
    }
    $33 = HEAP32[$7>>2]|0;
    $34 = $33 & 16383;
    $35 = $29 << 14;
    $36 = (($35) + 2147467264)|0;
    $37 = $34 | $36;
    $storemerge$i = $37;
   } else {
    $$neg$i1$i = $$02$i$i ^ -1;
    $38 = (($4) + ($$neg$i1$i))|0;
    $ispos$i2$i = ($38|0)>(-1);
    $neg$i3$i = (0 - ($38))|0;
    $39 = $ispos$i2$i ? $38 : $neg$i3$i;
    $40 = ($39|0)>(131071);
    if ($40) {
     $41 = HEAP32[$6>>2]|0;
     _luaX_syntaxerror($41,4376);
     $$pre$i = HEAP32[$7>>2]|0;
     $43 = $$pre$i;
    } else {
     $43 = $8;
    }
    $42 = $43 & 16383;
    $44 = $38 << 14;
    $45 = (($44) + 2147467264)|0;
    $46 = $42 | $45;
    $storemerge$i = $46;
   }
   HEAP32[$7>>2] = $storemerge$i;
   $47 = ($$0$i$i$i|0)==(-1);
   if ($47) {
    break;
   }
   $fs$idx$val$i$i$pre = HEAP32[$fs>>2]|0;
   $$02$i$i = $$0$i$i$i;$fs$idx$val$i$i = $fs$idx$val$i$i$pre;
  }
  $$pre = HEAP32[$3>>2]|0;
  $50 = $$pre;
 }
 HEAP32[$1>>2] = -1;
 $48 = (($0) + 44|0);
 $49 = HEAP32[$48>>2]|0;
 $51 = ($50|0)<($49|0);
 if ($51) {
  $$phi$trans$insert = (($0) + 12|0);
  $$pre2 = HEAP32[$$phi$trans$insert>>2]|0;
  $58 = $$pre2;$59 = $50;
 } else {
  $52 = (($fs) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($0) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (_luaM_growaux_($53,$55,$48,4,2147483645,4328)|0);
  HEAP32[$54>>2] = $56;
  $$pre1 = HEAP32[$3>>2]|0;
  $58 = $56;$59 = $$pre1;
 }
 $57 = (($58) + ($59<<2)|0);
 HEAP32[$57>>2] = $i;
 $60 = HEAP32[$3>>2]|0;
 $61 = (($0) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($60|0)<($62|0);
 if ($63) {
  $$phi$trans$insert4 = (($0) + 20|0);
  $$pre5 = HEAP32[$$phi$trans$insert4>>2]|0;
  $70 = $$pre5;$71 = $60;
  $69 = (($70) + ($71<<2)|0);
  HEAP32[$69>>2] = $line;
  $72 = HEAP32[$3>>2]|0;
  $73 = (($72) + 1)|0;
  HEAP32[$3>>2] = $73;
  STACKTOP = sp;return ($72|0);
 } else {
  $64 = (($fs) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($0) + 20|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_luaM_growaux_($65,$67,$61,4,2147483645,4328)|0);
  HEAP32[$66>>2] = $68;
  $$pre3 = HEAP32[$3>>2]|0;
  $70 = $68;$71 = $$pre3;
  $69 = (($70) + ($71<<2)|0);
  HEAP32[$69>>2] = $line;
  $72 = HEAP32[$3>>2]|0;
  $73 = (($72) + 1)|0;
  HEAP32[$3>>2] = $73;
  STACKTOP = sp;return ($72|0);
 }
 return 0|0;
}
function _addk($fs,$k,$v) {
 $fs = $fs|0;
 $k = $k|0;
 $v = $v|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldsize$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaH_set($1,$3,$k)|0);
 $5 = HEAP32[$fs>>2]|0;
 $6 = (($5) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(3);
 if ($10) {
  $11 = +HEAPF64[$4>>3];
  $12 = (~~(($11)));
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($fs) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 HEAPF64[$4>>3] = $15;
 HEAP32[$8>>2] = 3;
 $16 = ($14|0)<($7|0);
 if ($16) {
  $21 = $7;
 } else {
  $17 = (($5) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_luaM_growaux_($1,$18,$6,16,262143,4352)|0);
  HEAP32[$17>>2] = $19;
  $$pre = HEAP32[$6>>2]|0;
  $21 = $$pre;
 }
 $20 = ($7|0)<($21|0);
 $22 = (($5) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 if ($20) {
  $oldsize$01 = $7;
  while(1) {
   $24 = (($oldsize$01) + 1)|0;
   $25 = ((($23) + ($oldsize$01<<4)|0) + 8|0);
   HEAP32[$25>>2] = 0;
   $26 = ($24|0)<($21|0);
   if ($26) {
    $oldsize$01 = $24;
   } else {
    break;
   }
  }
 }
 $27 = HEAP32[$13>>2]|0;
 $28 = (($23) + ($27<<4)|0);
 $29 = $v;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $28;
 $36 = $35;
 HEAP32[$36>>2] = $31;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $34;
 $39 = (($v) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($23) + ($27<<4)|0) + 8|0);
 HEAP32[$41>>2] = $40;
 $42 = HEAP32[$39>>2]|0;
 $43 = ($42|0)>(3);
 if ($43) {
  $44 = HEAP32[$v>>2]|0;
  $45 = (($44) + 5|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 & 3;
  $48 = ($47<<24>>24)==(0);
  if (!($48)) {
   $49 = (($5) + 5|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50 & 4;
   $52 = ($51<<24>>24)==(0);
   if (!($52)) {
    _luaC_barrierf($1,$5,$44);
   }
  }
 }
 $53 = HEAP32[$13>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$13>>2] = $54;
 $$0 = $53;
 STACKTOP = sp;return ($$0|0);
}
function _exp2reg($fs,$e,$reg) {
 $fs = $fs|0;
 $e = $e|0;
 $reg = $reg|0;
 var $$0$i$i = 0, $$0$i$i$us = 0, $$0$i$i22 = 0, $$0$i$i22$us = 0, $$0$i$i48 = 0, $$0$i$i62 = 0, $$014$i = 0, $$014$i13 = 0, $$02$i = 0, $$02$i$us = 0, $$02$i44 = 0, $$neg$i = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$neg$i$i$i36 = 0, $$neg$i$us = 0, $$neg$i25 = 0, $$neg$i25$us = 0, $$neg$i52 = 0, $$neg$i56 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i40 = 0, $$pre$i1 = 0, $$pre$i15 = 0, $$pre$phi85Z2D = 0, $$pre$phi87Z2D = 0, $$pre81 = 0, $$pre82 = 0, $$pre84 = 0, $$pre86 = 0, $$sum$i$i = 0, $$sum$i$i14 = 0, $$sum$i$i20 = 0, $$sum$i$i20$us = 0, $$sum$i$i60 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i = 0, $fs$idx$val$i$i = 0, $fs$idx$val$i$i30 = 0, $fs$idx$val$i4 = 0, $fs$idx$val$i4$us = 0, $fs$idx$val$i45 = 0;
 var $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$i$i31 = 0, $fs$idx$val$idx$i46 = 0, $fs$idx$val$idx$i5 = 0, $fs$idx$val$idx$i5$us = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i32 = 0, $fs$idx$val$idx$val$i47 = 0, $fs$idx$val$idx$val$i6 = 0, $fs$idx$val$idx$val$i6$us = 0, $fs$idx2$val$i = 0, $fs$idx2$val$i9 = 0, $fs$idx2$val$idx$i = 0, $fs$idx2$val$idx$i10 = 0, $fs$idx2$val$idx$val$i = 0, $fs$idx2$val$idx$val$i11 = 0, $ispos$i = 0, $ispos$i$i = 0;
 var $ispos$i$i$i = 0, $ispos$i$i$i37 = 0, $ispos$i$us = 0, $ispos$i26 = 0, $ispos$i26$us = 0, $ispos$i53 = 0, $ispos$i57 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i34 = 0, $neg$i = 0, $neg$i$i = 0, $neg$i$i$i = 0, $neg$i$i$i38 = 0, $neg$i$us = 0, $neg$i27 = 0, $neg$i27$us = 0, $neg$i54 = 0, $neg$i58 = 0, $or$cond$i64 = 0;
 var $p_f$0 = 0, $p_t$0 = 0, $storemerge = 0, $storemerge$i = 0, $storemerge$i65 = 0, $storemerge88 = 0, $storemerge89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _discharge2reg($fs,$e,$reg);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(10);
 $2 = (($e) + 16|0);
 do {
  if ($1) {
   $3 = (($e) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(-1);
   if (!($5)) {
    $6 = HEAP32[$2>>2]|0;
    $7 = ($6|0)==(-1);
    if ($7) {
     HEAP32[$2>>2] = $4;
     break;
    }
    $fs$idx$val$i = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i = (($fs$idx$val$i) + 12|0);
    $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
    $list$0$i = $6;
    while(1) {
     $8 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = $9 >>> 14;
     $11 = (($10) + -131071)|0;
     $12 = ($11|0)==(-1);
     if ($12) {
      break;
     }
     $13 = (($list$0$i) + 1)|0;
     $14 = (($13) + ($11))|0;
     $15 = ($14|0)==(-1);
     if ($15) {
      break;
     } else {
      $list$0$i = $14;
     }
    }
    $$neg$i$i = $list$0$i ^ -1;
    $16 = (($4) + ($$neg$i$i))|0;
    $ispos$i$i = ($16|0)>(-1);
    $neg$i$i = (0 - ($16))|0;
    $17 = $ispos$i$i ? $16 : $neg$i$i;
    $18 = ($17|0)>(131071);
    if ($18) {
     $19 = (($fs) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     _luaX_syntaxerror($20,4376);
     $$pre$i = HEAP32[$8>>2]|0;
     $22 = $$pre$i;
    } else {
     $22 = $9;
    }
    $21 = $22 & 16383;
    $23 = $16 << 14;
    $24 = (($23) + 2147467264)|0;
    $25 = $21 | $24;
    HEAP32[$8>>2] = $25;
   }
  }
 } while(0);
 $26 = HEAP32[$2>>2]|0;
 $27 = (($e) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($26|0)==($28|0);
 if ($29) {
  HEAP32[$2>>2] = -1;
  HEAP32[$27>>2] = -1;
  $276 = (($e) + 8|0);
  HEAP32[$276>>2] = $reg;
  HEAP32[$e>>2] = 12;
  STACKTOP = sp;return;
 }
 $30 = ($26|0)==(-1);
 L18: do {
  if ($30) {
   label = 20;
  } else {
   $fs$idx2$val$i = HEAP32[$fs>>2]|0;
   $fs$idx2$val$idx$i = (($fs$idx2$val$i) + 12|0);
   $fs$idx2$val$idx$val$i = HEAP32[$fs$idx2$val$idx$i>>2]|0;
   $$014$i = $26;
   while(1) {
    $31 = (($fs$idx2$val$idx$val$i) + ($$014$i<<2)|0);
    $32 = ($$014$i|0)>(0);
    if ($32) {
     $$sum$i$i = (($$014$i) + -1)|0;
     $33 = (($fs$idx2$val$idx$val$i) + ($$sum$i$i<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $34 & 63;
     $36 = (2528 + ($35)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = ($37<<24>>24)<(0);
     if ($38) {
      $40 = $34;
     } else {
      label = 16;
     }
    } else {
     label = 16;
    }
    if ((label|0) == 16) {
     label = 0;
     $$pre$i1 = HEAP32[$31>>2]|0;
     $40 = $$pre$i1;
    }
    $39 = $40 & 63;
    $41 = ($39|0)==(27);
    if (!($41)) {
     label = 28;
     break L18;
    }
    $42 = HEAP32[$31>>2]|0;
    $43 = $42 >>> 14;
    $44 = (($43) + -131071)|0;
    $45 = ($44|0)==(-1);
    if ($45) {
     label = 20;
     break L18;
    }
    $46 = (($$014$i) + 1)|0;
    $47 = (($46) + ($44))|0;
    $48 = ($47|0)==(-1);
    if ($48) {
     label = 20;
     break;
    } else {
     $$014$i = $47;
    }
   }
  }
 } while(0);
 L29: do {
  if ((label|0) == 20) {
   $49 = ($28|0)==(-1);
   if ($49) {
    $p_f$0 = -1;$p_t$0 = -1;
   } else {
    $fs$idx2$val$i9 = HEAP32[$fs>>2]|0;
    $fs$idx2$val$idx$i10 = (($fs$idx2$val$i9) + 12|0);
    $fs$idx2$val$idx$val$i11 = HEAP32[$fs$idx2$val$idx$i10>>2]|0;
    $$014$i13 = $28;
    while(1) {
     $50 = (($fs$idx2$val$idx$val$i11) + ($$014$i13<<2)|0);
     $51 = ($$014$i13|0)>(0);
     if ($51) {
      $$sum$i$i14 = (($$014$i13) + -1)|0;
      $52 = (($fs$idx2$val$idx$val$i11) + ($$sum$i$i14<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = $53 & 63;
      $55 = (2528 + ($54)|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = ($56<<24>>24)<(0);
      if ($57) {
       $59 = $53;
      } else {
       label = 24;
      }
     } else {
      label = 24;
     }
     if ((label|0) == 24) {
      label = 0;
      $$pre$i15 = HEAP32[$50>>2]|0;
      $59 = $$pre$i15;
     }
     $58 = $59 & 63;
     $60 = ($58|0)==(27);
     if (!($60)) {
      label = 28;
      break L29;
     }
     $61 = HEAP32[$50>>2]|0;
     $62 = $61 >>> 14;
     $63 = (($62) + -131071)|0;
     $64 = ($63|0)==(-1);
     if ($64) {
      $p_f$0 = -1;$p_t$0 = -1;
      break L29;
     }
     $65 = (($$014$i13) + 1)|0;
     $66 = (($65) + ($63))|0;
     $67 = ($66|0)==(-1);
     if ($67) {
      $p_f$0 = -1;$p_t$0 = -1;
      break;
     } else {
      $$014$i13 = $66;
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 28) {
   $68 = HEAP32[$e>>2]|0;
   $69 = ($68|0)==(10);
   if ($69) {
    $$pre84 = (($fs) + 12|0);
    $$pre86 = (($fs) + 32|0);
    $$pre$phi85Z2D = $$pre84;$$pre$phi87Z2D = $$pre86;$112 = -1;
   } else {
    $70 = (($fs) + 32|0);
    $71 = HEAP32[$70>>2]|0;
    HEAP32[$70>>2] = -1;
    $72 = (($fs) + 12|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (_luaK_code($fs,2147450902,$75)|0);
    $77 = ($71|0)==(-1);
    if ($77) {
     $$pre$phi85Z2D = $72;$$pre$phi87Z2D = $70;$112 = $76;
    } else {
     $78 = ($76|0)==(-1);
     if ($78) {
      $$pre$phi85Z2D = $72;$$pre$phi87Z2D = $70;$112 = $71;
     } else {
      $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
      $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 12|0);
      $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
      $list$0$i$i = $76;
      while(1) {
       $79 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = $80 >>> 14;
       $82 = (($81) + -131071)|0;
       $83 = ($82|0)==(-1);
       if ($83) {
        break;
       }
       $84 = (($list$0$i$i) + 1)|0;
       $85 = (($84) + ($82))|0;
       $86 = ($85|0)==(-1);
       if ($86) {
        break;
       } else {
        $list$0$i$i = $85;
       }
      }
      $$neg$i$i$i = $list$0$i$i ^ -1;
      $87 = (($71) + ($$neg$i$i$i))|0;
      $ispos$i$i$i = ($87|0)>(-1);
      $neg$i$i$i = (0 - ($87))|0;
      $88 = $ispos$i$i$i ? $87 : $neg$i$i$i;
      $89 = ($88|0)>(131071);
      if ($89) {
       $90 = HEAP32[$72>>2]|0;
       _luaX_syntaxerror($90,4376);
       $$pre$i$i = HEAP32[$79>>2]|0;
       $92 = $$pre$i$i;
      } else {
       $92 = $80;
      }
      $91 = $92 & 16383;
      $93 = $87 << 14;
      $94 = (($93) + 2147467264)|0;
      $95 = $91 | $94;
      HEAP32[$79>>2] = $95;
      $$pre$phi85Z2D = $72;$$pre$phi87Z2D = $70;$112 = $76;
     }
    }
   }
   $96 = (($fs) + 24|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($fs) + 28|0);
   HEAP32[$98>>2] = $97;
   $99 = $reg << 6;
   $100 = $99 | 16386;
   $101 = HEAP32[$$pre$phi85Z2D>>2]|0;
   $102 = (($101) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (_luaK_code($fs,$100,$103)|0);
   $105 = HEAP32[$96>>2]|0;
   HEAP32[$98>>2] = $105;
   $106 = $99 | 8388610;
   $107 = HEAP32[$$pre$phi85Z2D>>2]|0;
   $108 = (($107) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (_luaK_code($fs,$106,$109)|0);
   $111 = HEAP32[$96>>2]|0;
   HEAP32[$98>>2] = $111;
   $113 = ($112|0)==(-1);
   if ($113) {
    $p_f$0 = $104;$p_t$0 = $110;
   } else {
    $114 = HEAP32[$$pre$phi87Z2D>>2]|0;
    $115 = ($114|0)==(-1);
    if ($115) {
     HEAP32[$$pre$phi87Z2D>>2] = $112;
     $p_f$0 = $104;$p_t$0 = $110;
     break;
    }
    $fs$idx$val$i$i30 = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i$i31 = (($fs$idx$val$i$i30) + 12|0);
    $fs$idx$val$idx$val$i$i32 = HEAP32[$fs$idx$val$idx$i$i31>>2]|0;
    $list$0$i$i34 = $114;
    while(1) {
     $116 = (($fs$idx$val$idx$val$i$i32) + ($list$0$i$i34<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $117 >>> 14;
     $119 = (($118) + -131071)|0;
     $120 = ($119|0)==(-1);
     if ($120) {
      break;
     }
     $121 = (($list$0$i$i34) + 1)|0;
     $122 = (($121) + ($119))|0;
     $123 = ($122|0)==(-1);
     if ($123) {
      break;
     } else {
      $list$0$i$i34 = $122;
     }
    }
    $$neg$i$i$i36 = $list$0$i$i34 ^ -1;
    $124 = (($112) + ($$neg$i$i$i36))|0;
    $ispos$i$i$i37 = ($124|0)>(-1);
    $neg$i$i$i38 = (0 - ($124))|0;
    $125 = $ispos$i$i$i37 ? $124 : $neg$i$i$i38;
    $126 = ($125|0)>(131071);
    if ($126) {
     $127 = HEAP32[$$pre$phi85Z2D>>2]|0;
     _luaX_syntaxerror($127,4376);
     $$pre$i$i40 = HEAP32[$116>>2]|0;
     $129 = $$pre$i$i40;
    } else {
     $129 = $117;
    }
    $128 = $129 & 16383;
    $130 = $124 << 14;
    $131 = (($130) + 2147467264)|0;
    $132 = $128 | $131;
    HEAP32[$116>>2] = $132;
    $p_f$0 = $104;$p_t$0 = $110;
   }
  }
 } while(0);
 $133 = (($fs) + 24|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = (($fs) + 28|0);
 HEAP32[$135>>2] = $134;
 $136 = HEAP32[$27>>2]|0;
 $137 = ($136|0)==(-1);
 if (!($137)) {
  $138 = ($reg|0)==(255);
  $139 = (($fs) + 12|0);
  $140 = $reg << 6;
  $141 = $140 & 16320;
  $$02$i44 = $136;
  while(1) {
   $fs$idx$val$i45 = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i46 = (($fs$idx$val$i45) + 12|0);
   $fs$idx$val$idx$val$i47 = HEAP32[$fs$idx$val$idx$i46>>2]|0;
   $142 = (($fs$idx$val$idx$val$i47) + ($$02$i44<<2)|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $143 >>> 14;
   $145 = (($144) + -131071)|0;
   $146 = ($145|0)==(-1);
   if ($146) {
    $$0$i$i48 = -1;
   } else {
    $147 = (($$02$i44) + 1)|0;
    $148 = (($147) + ($145))|0;
    $$0$i$i48 = $148;
   }
   $149 = ($$02$i44|0)>(0);
   if ($149) {
    $$sum$i$i60 = (($$02$i44) + -1)|0;
    $150 = (($fs$idx$val$idx$val$i47) + ($$sum$i$i60<<2)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151 & 63;
    $153 = (2528 + ($152)|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = ($154<<24>>24)<(0);
    if ($155) {
     $$0$i$i62 = $150;$157 = $151;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
   if ((label|0) == 53) {
    label = 0;
    $$0$i$i62 = $142;$157 = $143;
   }
   $156 = $157 & 63;
   $158 = ($156|0)==(27);
   if ($158) {
    $159 = $157 >>> 23;
    $160 = ($159|0)==($reg|0);
    $or$cond$i64 = $138 | $160;
    if ($or$cond$i64) {
     $163 = $159 << 6;
     $164 = $157 & 8372224;
     $165 = $164 | $163;
     $166 = $165 | 26;
     $storemerge$i65 = $166;
    } else {
     $161 = $157 & -16321;
     $162 = $161 | $141;
     $storemerge$i65 = $162;
    }
    HEAP32[$$0$i$i62>>2] = $storemerge$i65;
    $$neg$i52 = $$02$i44 ^ -1;
    $167 = (($134) + ($$neg$i52))|0;
    $ispos$i53 = ($167|0)>(-1);
    $neg$i54 = (0 - ($167))|0;
    $168 = $ispos$i53 ? $167 : $neg$i54;
    $169 = ($168|0)>(131071);
    if ($169) {
     $170 = HEAP32[$139>>2]|0;
     _luaX_syntaxerror($170,4376);
    }
    $171 = HEAP32[$142>>2]|0;
    $172 = $171 & 16383;
    $173 = $167 << 14;
    $174 = (($173) + 2147467264)|0;
    $175 = $172 | $174;
    $storemerge = $175;
   } else {
    $$neg$i56 = $$02$i44 ^ -1;
    $176 = (($p_f$0) + ($$neg$i56))|0;
    $ispos$i57 = ($176|0)>(-1);
    $neg$i58 = (0 - ($176))|0;
    $177 = $ispos$i57 ? $176 : $neg$i58;
    $178 = ($177|0)>(131071);
    if ($178) {
     $179 = HEAP32[$139>>2]|0;
     _luaX_syntaxerror($179,4376);
     $$pre82 = HEAP32[$142>>2]|0;
     $181 = $$pre82;
    } else {
     $181 = $143;
    }
    $180 = $181 & 16383;
    $182 = $176 << 14;
    $183 = (($182) + 2147467264)|0;
    $184 = $180 | $183;
    $storemerge = $184;
   }
   HEAP32[$142>>2] = $storemerge;
   $185 = ($$0$i$i48|0)==(-1);
   if ($185) {
    break;
   } else {
    $$02$i44 = $$0$i$i48;
   }
  }
 }
 $186 = HEAP32[$2>>2]|0;
 $187 = ($186|0)==(-1);
 if ($187) {
  HEAP32[$2>>2] = -1;
  HEAP32[$27>>2] = -1;
  $276 = (($e) + 8|0);
  HEAP32[$276>>2] = $reg;
  HEAP32[$e>>2] = 12;
  STACKTOP = sp;return;
 }
 $188 = ($reg|0)==(255);
 $189 = (($fs) + 12|0);
 $190 = $reg << 6;
 $191 = $190 & 16320;
 if ($188) {
  $$02$i$us = $186;
  while(1) {
   $fs$idx$val$i4$us = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i5$us = (($fs$idx$val$i4$us) + 12|0);
   $fs$idx$val$idx$val$i6$us = HEAP32[$fs$idx$val$idx$i5$us>>2]|0;
   $192 = (($fs$idx$val$idx$val$i6$us) + ($$02$i$us<<2)|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193 >>> 14;
   $195 = (($194) + -131071)|0;
   $196 = ($195|0)==(-1);
   if ($196) {
    $$0$i$i$us = -1;
   } else {
    $197 = (($$02$i$us) + 1)|0;
    $198 = (($197) + ($195))|0;
    $$0$i$i$us = $198;
   }
   $199 = ($$02$i$us|0)>(0);
   if ($199) {
    $$sum$i$i20$us = (($$02$i$us) + -1)|0;
    $200 = (($fs$idx$val$idx$val$i6$us) + ($$sum$i$i20$us<<2)|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = $201 & 63;
    $203 = (2528 + ($202)|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = ($204<<24>>24)<(0);
    if ($205) {
     $$0$i$i22$us = $200;$207 = $201;
    } else {
     label = 71;
    }
   } else {
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $$0$i$i22$us = $192;$207 = $193;
   }
   $206 = $207 & 63;
   $208 = ($206|0)==(27);
   if ($208) {
    $218 = $207 >>> 23;
    $219 = $218 << 6;
    $220 = $207 & 8372224;
    $221 = $220 | $219;
    $222 = $221 | 26;
    HEAP32[$$0$i$i22$us>>2] = $222;
    $$neg$i$us = $$02$i$us ^ -1;
    $223 = (($134) + ($$neg$i$us))|0;
    $ispos$i$us = ($223|0)>(-1);
    $neg$i$us = (0 - ($223))|0;
    $224 = $ispos$i$us ? $223 : $neg$i$us;
    $225 = ($224|0)>(131071);
    if ($225) {
     $226 = HEAP32[$189>>2]|0;
     _luaX_syntaxerror($226,4376);
    }
    $227 = HEAP32[$192>>2]|0;
    $228 = $227 & 16383;
    $229 = $223 << 14;
    $230 = (($229) + 2147467264)|0;
    $231 = $228 | $230;
    $storemerge89 = $231;
   } else {
    $$neg$i25$us = $$02$i$us ^ -1;
    $209 = (($p_t$0) + ($$neg$i25$us))|0;
    $ispos$i26$us = ($209|0)>(-1);
    $neg$i27$us = (0 - ($209))|0;
    $210 = $ispos$i26$us ? $209 : $neg$i27$us;
    $211 = ($210|0)>(131071);
    if ($211) {
     $212 = HEAP32[$189>>2]|0;
     _luaX_syntaxerror($212,4376);
     $$pre = HEAP32[$192>>2]|0;
     $214 = $$pre;
    } else {
     $214 = $193;
    }
    $213 = $214 & 16383;
    $215 = $209 << 14;
    $216 = (($215) + 2147467264)|0;
    $217 = $213 | $216;
    $storemerge89 = $217;
   }
   HEAP32[$192>>2] = $storemerge89;
   $232 = ($$0$i$i$us|0)==(-1);
   if ($232) {
    break;
   } else {
    $$02$i$us = $$0$i$i$us;
   }
  }
  HEAP32[$2>>2] = -1;
  HEAP32[$27>>2] = -1;
  $276 = (($e) + 8|0);
  HEAP32[$276>>2] = $reg;
  HEAP32[$e>>2] = 12;
  STACKTOP = sp;return;
 } else {
  $$02$i = $186;
 }
 while(1) {
  $fs$idx$val$i4 = HEAP32[$fs>>2]|0;
  $fs$idx$val$idx$i5 = (($fs$idx$val$i4) + 12|0);
  $fs$idx$val$idx$val$i6 = HEAP32[$fs$idx$val$idx$i5>>2]|0;
  $233 = (($fs$idx$val$idx$val$i6) + ($$02$i<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = $234 >>> 14;
  $236 = (($235) + -131071)|0;
  $237 = ($236|0)==(-1);
  if ($237) {
   $$0$i$i = -1;
  } else {
   $238 = (($$02$i) + 1)|0;
   $239 = (($238) + ($236))|0;
   $$0$i$i = $239;
  }
  $240 = ($$02$i|0)>(0);
  if ($240) {
   $$sum$i$i20 = (($$02$i) + -1)|0;
   $241 = (($fs$idx$val$idx$val$i6) + ($$sum$i$i20<<2)|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = $242 & 63;
   $244 = (2528 + ($243)|0);
   $245 = HEAP8[$244>>0]|0;
   $246 = ($245<<24>>24)<(0);
   if ($246) {
    $$0$i$i22 = $241;$248 = $242;
   } else {
    label = 84;
   }
  } else {
   label = 84;
  }
  if ((label|0) == 84) {
   label = 0;
   $$0$i$i22 = $233;$248 = $234;
  }
  $247 = $248 & 63;
  $249 = ($247|0)==(27);
  if ($249) {
   $250 = $248 >>> 23;
   $251 = ($250|0)==($reg|0);
   if ($251) {
    $254 = $248 & 8372224;
    $255 = $254 | $190;
    $256 = $255 | 26;
    $storemerge$i = $256;
   } else {
    $252 = $248 & -16321;
    $253 = $252 | $191;
    $storemerge$i = $253;
   }
   HEAP32[$$0$i$i22>>2] = $storemerge$i;
   $$neg$i = $$02$i ^ -1;
   $257 = (($134) + ($$neg$i))|0;
   $ispos$i = ($257|0)>(-1);
   $neg$i = (0 - ($257))|0;
   $258 = $ispos$i ? $257 : $neg$i;
   $259 = ($258|0)>(131071);
   if ($259) {
    $260 = HEAP32[$189>>2]|0;
    _luaX_syntaxerror($260,4376);
   }
   $261 = HEAP32[$233>>2]|0;
   $262 = $261 & 16383;
   $263 = $257 << 14;
   $264 = (($263) + 2147467264)|0;
   $265 = $262 | $264;
   $storemerge88 = $265;
  } else {
   $$neg$i25 = $$02$i ^ -1;
   $266 = (($p_t$0) + ($$neg$i25))|0;
   $ispos$i26 = ($266|0)>(-1);
   $neg$i27 = (0 - ($266))|0;
   $267 = $ispos$i26 ? $266 : $neg$i27;
   $268 = ($267|0)>(131071);
   if ($268) {
    $269 = HEAP32[$189>>2]|0;
    _luaX_syntaxerror($269,4376);
    $$pre81 = HEAP32[$233>>2]|0;
    $271 = $$pre81;
   } else {
    $271 = $234;
   }
   $270 = $271 & 16383;
   $272 = $266 << 14;
   $273 = (($272) + 2147467264)|0;
   $274 = $270 | $273;
   $storemerge88 = $274;
  }
  HEAP32[$233>>2] = $storemerge88;
  $275 = ($$0$i$i|0)==(-1);
  if ($275) {
   break;
  } else {
   $$02$i = $$0$i$i;
  }
 }
 HEAP32[$2>>2] = -1;
 HEAP32[$27>>2] = -1;
 $276 = (($e) + 8|0);
 HEAP32[$276>>2] = $reg;
 HEAP32[$e>>2] = 12;
 STACKTOP = sp;return;
}
function _condjump($fs,$op,$A,$B,$C) {
 $fs = $fs|0;
 $op = $op|0;
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $$neg$i$i$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i$i = 0, $fs$idx$val$idx$i$i = 0;
 var $fs$idx$val$idx$val$i$i = 0, $ispos$i$i$i = 0, $list$0$i$i = 0, $neg$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $A << 6;
 $1 = $0 | $op;
 $2 = $B << 23;
 $3 = $1 | $2;
 $4 = $C << 14;
 $5 = $3 | $4;
 $6 = (($fs) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 (_luaK_code($fs,$5,$9)|0);
 $10 = (($fs) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = -1;
 $12 = HEAP32[$6>>2]|0;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_luaK_code($fs,2147450902,$14)|0);
 $16 = ($11|0)==(-1);
 if ($16) {
  $35 = $15;
  STACKTOP = sp;return ($35|0);
 }
 $17 = ($15|0)==(-1);
 if ($17) {
  $35 = $11;
  STACKTOP = sp;return ($35|0);
 }
 $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 12|0);
 $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
 $list$0$i$i = $15;
 while(1) {
  $18 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 >>> 14;
  $21 = (($20) + -131071)|0;
  $22 = ($21|0)==(-1);
  if ($22) {
   break;
  }
  $23 = (($list$0$i$i) + 1)|0;
  $24 = (($23) + ($21))|0;
  $25 = ($24|0)==(-1);
  if ($25) {
   break;
  } else {
   $list$0$i$i = $24;
  }
 }
 $$neg$i$i$i = $list$0$i$i ^ -1;
 $26 = (($11) + ($$neg$i$i$i))|0;
 $ispos$i$i$i = ($26|0)>(-1);
 $neg$i$i$i = (0 - ($26))|0;
 $27 = $ispos$i$i$i ? $26 : $neg$i$i$i;
 $28 = ($27|0)>(131071);
 if ($28) {
  $29 = HEAP32[$6>>2]|0;
  _luaX_syntaxerror($29,4376);
  $$pre$i$i = HEAP32[$18>>2]|0;
  $31 = $$pre$i$i;
 } else {
  $31 = $19;
 }
 $30 = $31 & 16383;
 $32 = $26 << 14;
 $33 = (($32) + 2147467264)|0;
 $34 = $30 | $33;
 HEAP32[$18>>2] = $34;
 $35 = $15;
 STACKTOP = sp;return ($35|0);
}
function _discharge2reg($fs,$e,$reg) {
 $fs = $fs|0;
 $e = $e|0;
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $o$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $o$i = sp;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 L1: do {
  switch ($0|0) {
  case 5:  {
   $57 = (($e) + 8|0);
   $58 = +HEAPF64[$57>>3];
   HEAPF64[$o$i>>3] = $58;
   $59 = (($o$i) + 8|0);
   HEAP32[$59>>2] = 3;
   $60 = (_addk($fs,$o$i,$o$i)|0);
   $61 = $reg << 6;
   $62 = $60 << 14;
   $63 = $61 | $62;
   $64 = $63 | 1;
   $65 = (($fs) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($66) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   (_luaK_code($fs,$64,$68)|0);
   break;
  }
  case 4:  {
   $47 = (($e) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $reg << 6;
   $50 = $48 << 14;
   $51 = $49 | $50;
   $52 = $51 | 1;
   $53 = (($fs) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   (_luaK_code($fs,$52,$56)|0);
   break;
  }
  case 2: case 3:  {
   $37 = ($0|0)==(2);
   $38 = $37&1;
   $39 = $reg << 6;
   $40 = $38 << 23;
   $41 = $39 | $40;
   $42 = $41 | 2;
   $43 = (($fs) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   (_luaK_code($fs,$42,$46)|0);
   break;
  }
  case 1:  {
   $1 = (($fs) + 24|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($fs) + 28|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($2|0)>($4|0);
   do {
    if ($5) {
     $6 = ($2|0)==(0);
     if ($6) {
      $7 = (($fs) + 50|0);
      $8 = HEAP8[$7>>0]|0;
      $9 = $8&255;
      $10 = ($9|0)>($reg|0);
      if ($10) {
       break;
      } else {
       break L1;
      }
     }
     $11 = (($2) + -1)|0;
     $12 = HEAP32[$fs>>2]|0;
     $13 = (($12) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($14) + ($11<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = $16 & 63;
     $18 = ($17|0)==(3);
     if ($18) {
      $19 = $16 >>> 6;
      $20 = $19 & 255;
      $21 = $16 >>> 23;
      $22 = ($20|0)>($reg|0);
      $23 = (($21) + 1)|0;
      $24 = ($23|0)<($reg|0);
      $or$cond$i = $22 | $24;
      if (!($or$cond$i)) {
       $25 = ($21|0)<($reg|0);
       if (!($25)) {
        break L1;
       }
       $26 = $16 & 8388607;
       $27 = $reg << 23;
       $28 = $26 | $27;
       HEAP32[$15>>2] = $28;
       break L1;
      }
     }
    }
   } while(0);
   $29 = $reg << 6;
   $30 = $reg << 23;
   $31 = $30 | $29;
   $32 = $31 | 3;
   $33 = (($fs) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   (_luaK_code($fs,$32,$36)|0);
   break;
  }
  case 12:  {
   $80 = (($e) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==($reg|0);
   if (!($82)) {
    $83 = $reg << 6;
    $84 = $81 << 23;
    $85 = $84 | $83;
    $86 = (($fs) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    (_luaK_code($fs,$85,$89)|0);
   }
   break;
  }
  case 11:  {
   $69 = (($e) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$fs>>2]|0;
   $72 = (($71) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + ($70<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 & -16321;
   $77 = $reg << 6;
   $78 = $77 & 16320;
   $79 = $76 | $78;
   HEAP32[$74>>2] = $79;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $90 = (($e) + 8|0);
 HEAP32[$90>>2] = $reg;
 HEAP32[$e>>2] = 12;
 STACKTOP = sp;return;
}
function _codearith($fs,$op,$e1,$e2) {
 $fs = $fs|0;
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $r$0$i = 0.0;
 var $r$02$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e1>>2]|0;
 $1 = ($0|0)==(5);
 L1: do {
  if ($1) {
   $2 = (($e1) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(-1);
   if ($4) {
    $5 = (($e1) + 20|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(-1);
    if ($7) {
     $8 = HEAP32[$e2>>2]|0;
     $9 = ($8|0)==(5);
     if ($9) {
      $10 = (($e2) + 16|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(-1);
      if ($12) {
       $13 = (($e2) + 20|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ($14|0)==(-1);
       if ($15) {
        $16 = (($e1) + 8|0);
        $17 = +HEAPF64[$16>>3];
        $18 = (($e2) + 8|0);
        $19 = +HEAPF64[$18>>3];
        switch ($op|0) {
        case 16:  {
         $25 = $19 == 0.0;
         if ($25) {
          label = 20;
          break L1;
         }
         $26 = $17 / $19;
         $27 = (+Math_floor((+$26)));
         $28 = $19 * $27;
         $29 = $17 - $28;
         $r$0$i = $29;
         label = 17;
         break;
        }
        case 18:  {
         $31 = -$17;
         $r$0$i = $31;
         label = 17;
         break;
        }
        case 15:  {
         $23 = $19 == 0.0;
         if ($23) {
          label = 20;
          break L1;
         }
         $24 = $17 / $19;
         $r$0$i = $24;
         label = 17;
         break;
        }
        case 14:  {
         $22 = $17 * $19;
         $r$0$i = $22;
         label = 17;
         break;
        }
        case 13:  {
         $21 = $17 - $19;
         $r$0$i = $21;
         label = 17;
         break;
        }
        case 12:  {
         $20 = $17 + $19;
         $r$0$i = $20;
         label = 17;
         break;
        }
        case 17:  {
         $30 = (+Math_pow((+$17),(+$19)));
         $r$0$i = $30;
         label = 17;
         break;
        }
        case 20:  {
         $36 = 0;
         break L1;
         break;
        }
        default: {
         $r$02$i = 0.0;
        }
        }
        if ((label|0) == 17) {
         $32 = ($r$0$i == $r$0$i) & (0.0 == 0.0);
         if ($32) {
          $r$02$i = $r$0$i;
         } else {
          label = 19;
          break;
         }
        }
        HEAPF64[$16>>3] = $r$02$i;
        STACKTOP = sp;return;
       } else {
        label = 19;
       }
      } else {
       label = 19;
      }
     } else {
      label = 19;
     }
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  if ((($op|0) == 18) | (($op|0) == 20)) {
   $36 = 0;
  } else {
   label = 20;
  }
 }
 if ((label|0) == 20) {
  $33 = (_luaK_exp2RK($fs,$e2)|0);
  $36 = $33;
 }
 $34 = (_luaK_exp2RK($fs,$e1)|0);
 $35 = ($34|0)>($36|0);
 if ($35) {
  $37 = HEAP32[$e1>>2]|0;
  $38 = ($37|0)==(12);
  if ($38) {
   $39 = (($e1) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & 256;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = (($fs) + 50|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = ($45|0)>($40|0);
    if (!($46)) {
     $47 = (($fs) + 36|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + -1)|0;
     HEAP32[$47>>2] = $49;
    }
   }
  }
  $50 = HEAP32[$e2>>2]|0;
  $51 = ($50|0)==(12);
  if ($51) {
   $52 = (($e2) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $53 & 256;
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = (($fs) + 50|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = ($58|0)>($53|0);
    if (!($59)) {
     $60 = (($fs) + 36|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + -1)|0;
     HEAP32[$60>>2] = $62;
    }
   }
  }
 } else {
  $63 = HEAP32[$e2>>2]|0;
  $64 = ($63|0)==(12);
  if ($64) {
   $65 = (($e2) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 & 256;
   $68 = ($67|0)==(0);
   if ($68) {
    $69 = (($fs) + 50|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = ($71|0)>($66|0);
    if (!($72)) {
     $73 = (($fs) + 36|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + -1)|0;
     HEAP32[$73>>2] = $75;
    }
   }
  }
  $76 = HEAP32[$e1>>2]|0;
  $77 = ($76|0)==(12);
  if ($77) {
   $78 = (($e1) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 & 256;
   $81 = ($80|0)==(0);
   if ($81) {
    $82 = (($fs) + 50|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = ($84|0)>($79|0);
    if (!($85)) {
     $86 = (($fs) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) + -1)|0;
     HEAP32[$86>>2] = $88;
    }
   }
  }
 }
 $89 = $34 << 23;
 $90 = $36 << 14;
 $91 = $90 | $op;
 $92 = $91 | $89;
 $93 = (($fs) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (_luaK_code($fs,$92,$96)|0);
 $98 = (($e1) + 8|0);
 HEAP32[$98>>2] = $97;
 HEAP32[$e1>>2] = 11;
 STACKTOP = sp;return;
}
function _luaX_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = (4680 + ($i$01<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (_strlen(($1|0))|0);
  $3 = (_luaS_newlstr($L,$1,$2)|0);
  $4 = (($3) + 5|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = $6 | 32;
  $8 = $7&255;
  HEAP8[$4>>0] = $8;
  $9 = (($i$01) + 1)|0;
  $10 = $9&255;
  $11 = (($3) + 6|0);
  HEAP8[$11>>0] = $10;
  $exitcond = ($9|0)==(21);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $9;
  }
 }
 STACKTOP = sp;return;
}
function _luaX_token2str($ls,$token) {
 $ls = $ls|0;
 $token = $token|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($token|0)<(257);
 if (!($0)) {
  $7 = (($token) + -257)|0;
  $8 = (4680 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_iscntrl($token)|0);
 $2 = ($1|0)==(0);
 $3 = (($ls) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  HEAP32[$vararg_buffer1>>2] = $token;
  $6 = (_luaO_pushfstring($4,4824,$vararg_buffer1)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $token;
  $5 = (_luaO_pushfstring($4,4808,$vararg_buffer)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaX_lexerror($ls,$msg,$token) {
 $ls = $ls|0;
 $msg = $msg|0;
 $token = $token|0;
 var $$0$i = 0, $$off$i = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff = 0, $buff$i = 0, $switch$i = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buff$i = sp + 136|0;
 $buff = sp + 56|0;
 $0 = (($ls) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 _luaO_chunkid($buff,$2,80);
 $3 = (($ls) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($ls) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer>>2] = $buff;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $msg;
 $7 = (_luaO_pushfstring($4,4832,$vararg_buffer)|0);
 $8 = ($token|0)==(0);
 if ($8) {
  $45 = HEAP32[$3>>2]|0;
  _luaD_throw($45,3);
  // unreachable;
 }
 $9 = HEAP32[$3>>2]|0;
 $$off$i = (($token) + -284)|0;
 $switch$i = ($$off$i>>>0)<(3);
 do {
  if ($switch$i) {
   $10 = (($ls) + 60|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   $15 = (($11) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14>>>0)>($16>>>0);
   if ($17) {
    $18 = ($16>>>0)>(2147483645);
    if ($18) {
     $19 = HEAP32[$0>>2]|0;
     $20 = (($19) + 16|0);
     _luaO_chunkid($buff$i,$20,80);
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$5>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $buff$i;
     $vararg_ptr6 = (($vararg_buffer3) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $22;
     $vararg_ptr7 = (($vararg_buffer3) + 8|0);
     HEAP32[$vararg_ptr7>>2] = 4944;
     (_luaO_pushfstring($21,4832,$vararg_buffer3)|0);
     $23 = HEAP32[$3>>2]|0;
     _luaD_throw($23,3);
     // unreachable;
    }
    $24 = $16 << 1;
    $25 = ($24|0)==(-2);
    if ($25) {
     $28 = (_luaM_toobig($9)|0);
     $$pre$phiZ2D = $11;$29 = $28;
    } else {
     $26 = HEAP32[$11>>2]|0;
     $27 = (_luaM_realloc_($9,$26,$16,$24)|0);
     $$pre$phiZ2D = $11;$29 = $27;
    }
    HEAP32[$$pre$phiZ2D>>2] = $29;
    HEAP32[$15>>2] = $24;
    $$pre2 = HEAP32[$12>>2]|0;
    $31 = $$pre2;$33 = $29;
   } else {
    $$pre3 = HEAP32[$11>>2]|0;
    $31 = $13;$33 = $$pre3;
   }
   $30 = (($31) + 1)|0;
   HEAP32[$12>>2] = $30;
   $32 = (($33) + ($31)|0);
   HEAP8[$32>>0] = 0;
   $34 = HEAP32[$10>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $$0$i = $35;
  } else {
   $36 = ($token|0)<(257);
   if (!($36)) {
    $42 = (($token) + -257)|0;
    $43 = (4680 + ($42<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $$0$i = $44;
    break;
   }
   $37 = (_iscntrl($token)|0);
   $38 = ($37|0)==(0);
   $39 = HEAP32[$3>>2]|0;
   if ($38) {
    HEAP32[$vararg_buffer11>>2] = $token;
    $41 = (_luaO_pushfstring($39,4824,$vararg_buffer11)|0);
    $$0$i = $41;
    break;
   } else {
    HEAP32[$vararg_buffer8>>2] = $token;
    $40 = (_luaO_pushfstring($39,4808,$vararg_buffer8)|0);
    $$0$i = $40;
    break;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer14>>2] = $7;
 $vararg_ptr17 = (($vararg_buffer14) + 4|0);
 HEAP32[$vararg_ptr17>>2] = $$0$i;
 (_luaO_pushfstring($9,4848,$vararg_buffer14)|0);
 $45 = HEAP32[$3>>2]|0;
 _luaD_throw($45,3);
 // unreachable;
}
function _luaX_syntaxerror($ls,$msg) {
 $ls = $ls|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 _luaX_lexerror($ls,$msg,$1);
 STACKTOP = sp;return;
}
function _luaX_newstring($ls,$str,$l) {
 $ls = $ls|0;
 $str = $str|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaS_newlstr($1,$str,$l)|0);
 $3 = (($ls) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_luaH_setstr($1,$6,$2)|0);
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return ($2|0);
 }
 HEAP32[$7>>2] = 1;
 HEAP32[$8>>2] = 1;
 $11 = (($1) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14>>>0)<($16>>>0);
 if ($17) {
  STACKTOP = sp;return ($2|0);
 }
 _luaC_step($1);
 STACKTOP = sp;return ($2|0);
}
function _luaX_setinput($L,$ls,$z,$source) {
 $L = $L|0;
 $ls = $ls|0;
 $z = $z|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 68|0);
 HEAP8[$0>>0] = 46;
 $1 = (($ls) + 52|0);
 HEAP32[$1>>2] = $L;
 $2 = (($ls) + 32|0);
 HEAP32[$2>>2] = 287;
 $3 = (($ls) + 56|0);
 HEAP32[$3>>2] = $z;
 $4 = (($ls) + 48|0);
 HEAP32[$4>>2] = 0;
 $5 = (($ls) + 4|0);
 HEAP32[$5>>2] = 1;
 $6 = (($ls) + 8|0);
 HEAP32[$6>>2] = 1;
 $7 = (($ls) + 64|0);
 HEAP32[$7>>2] = $source;
 $8 = (($ls) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($9) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_luaM_realloc_($L,$10,$12,32)|0);
 $14 = HEAP32[$8>>2]|0;
 HEAP32[$14>>2] = $13;
 $15 = (($14) + 8|0);
 HEAP32[$15>>2] = 32;
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[$16>>2] = $18;
 $19 = ($17|0)==(0);
 if ($19) {
  $25 = (_luaZ_fill($16)|0);
  $26 = $25;
  HEAP32[$ls>>2] = $26;
  STACKTOP = sp;return;
 } else {
  $20 = (($16) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 1|0);
  HEAP32[$20>>2] = $22;
  $23 = HEAP8[$21>>0]|0;
  $24 = $23&255;
  $26 = $24;
  HEAP32[$ls>>2] = $26;
  STACKTOP = sp;return;
 }
}
function _luaX_next($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($ls) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(287);
 if ($5) {
  $7 = (($ls) + 24|0);
  $8 = (_llex($ls,$7)|0);
  $9 = (($ls) + 16|0);
  HEAP32[$9>>2] = $8;
  STACKTOP = sp;return;
 } else {
  $6 = (($ls) + 16|0);
  ;HEAP32[$6+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$3+12>>2]|0;
  HEAP32[$3>>2] = 287;
  STACKTOP = sp;return;
 }
}
function _luaX_lookahead($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 40|0);
 $1 = (_llex($ls,$0)|0);
 $2 = (($ls) + 32|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function _llex($ls,$seminfo) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 var $$0 = 0, $$be$i = 0, $$pr = 0, $$pr$i = 0, $$pr78 = 0, $$pre$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i15Z2D = 0, $$pre$phi$i16$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i24Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$i32Z2D = 0, $$pre$phi$i40$iZ2D = 0, $$pre$phi$i48$iZ2D = 0, $$pre$phi$i7Z2D = 0, $$pre$phi$i8$iZ2D = 0, $$pre1$i = 0, $$pre1$i$i = 0, $$pre1$i16 = 0;
 var $$pre1$i17$i = 0, $$pre1$i25 = 0, $$pre1$i25$i = 0, $$pre1$i33 = 0, $$pre1$i33$i = 0, $$pre1$i41$i = 0, $$pre1$i49$i = 0, $$pre1$i9$i = 0, $$pre2$i = 0, $$pre2$i$i = 0, $$pre2$i11 = 0, $$pre2$i12$i = 0, $$pre2$i20 = 0, $$pre2$i20$i = 0, $$pre2$i28 = 0, $$pre2$i28$i = 0, $$pre2$i36$i = 0, $$pre2$i4$i = 0, $$pre2$i44$i = 0, $$pre61$i = 0;
 var $$pre73 = 0, $$pre74 = 0, $$pre76 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $buff$i = 0, $buff$i$i = 0, $buff$i36 = 0, $buff$i38 = 0, $buff$i40 = 0, $buff$i51$i = 0, $buff$i52$i = 0, $buff$i53$i = 0, $buff$i54$i = 0, $buff$i55$i = 0, $buff$i56$i = 0, $buff$i57$i = 0, $c$0$i = 0, $c$1$i = 0, $i$0$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit2$i = 0, $isdigit4 = 0;
 var $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp1$i = 0, $isdigittmp3 = 0, $memchr = 0, $memchr41 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer37 = 0, $vararg_buffer42 = 0, $vararg_buffer47 = 0, $vararg_buffer52 = 0, $vararg_buffer57 = 0, $vararg_buffer8 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr55 = 0;
 var $vararg_ptr56 = 0, $vararg_ptr6 = 0, $vararg_ptr60 = 0, $vararg_ptr61 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer57 = sp + 184|0;
 $vararg_buffer52 = sp + 168|0;
 $vararg_buffer47 = sp + 152|0;
 $vararg_buffer42 = sp + 136|0;
 $vararg_buffer37 = sp + 120|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buff$i40 = sp + 1080|0;
 $buff$i38 = sp + 1000|0;
 $buff$i36 = sp + 920|0;
 $buff$i = sp + 840|0;
 $buff$i57$i = sp + 760|0;
 $buff$i56$i = sp + 680|0;
 $buff$i55$i = sp + 600|0;
 $buff$i54$i = sp + 520|0;
 $buff$i53$i = sp + 440|0;
 $buff$i52$i = sp + 360|0;
 $buff$i51$i = sp + 280|0;
 $buff$i$i = sp + 200|0;
 $0 = (($ls) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($ls) + 56|0);
 L1: while(1) {
  $$pr78 = HEAP32[$ls>>2]|0;
  $4 = $$pr78;
  L3: while(1) {
   switch ($4|0) {
   case 91:  {
    label = 21;
    break L1;
    break;
   }
   case 60:  {
    label = 33;
    break L1;
    break;
   }
   case 13: case 10:  {
    label = 4;
    break L3;
    break;
   }
   case 45:  {
    break L3;
    break;
   }
   case 61:  {
    break L1;
    break;
   }
   case -1:  {
    $$0 = 287;
    label = 237;
    break L1;
    break;
   }
   case 126:  {
    label = 49;
    break L1;
    break;
   }
   case 62:  {
    label = 41;
    break L1;
    break;
   }
   case 39: case 34:  {
    label = 57;
    break L1;
    break;
   }
   case 46:  {
    label = 163;
    break L1;
    break;
   }
   default: {
   }
   }
   $558 = (_isspace($4)|0);
   $559 = ($558|0)==(0);
   if ($559) {
    label = 209;
    break L1;
   }
   $560 = HEAP32[$3>>2]|0;
   $561 = HEAP32[$560>>2]|0;
   $562 = (($561) + -1)|0;
   HEAP32[$560>>2] = $562;
   $563 = ($561|0)==(0);
   if ($563) {
    $569 = (_luaZ_fill($560)|0);
    $570 = $569;
   } else {
    $564 = (($560) + 4|0);
    $565 = HEAP32[$564>>2]|0;
    $566 = (($565) + 1|0);
    HEAP32[$564>>2] = $566;
    $567 = HEAP8[$565>>0]|0;
    $568 = $567&255;
    $570 = $568;
   }
   HEAP32[$ls>>2] = $570;
   $4 = $570;
  }
  if ((label|0) == 4) {
   label = 0;
   _inclinenumber($ls);
   continue;
  }
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + -1)|0;
  HEAP32[$5>>2] = $7;
  $8 = ($6|0)==(0);
  if ($8) {
   $14 = (_luaZ_fill($5)|0);
   $15 = $14;
  } else {
   $9 = (($5) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 1|0);
   HEAP32[$9>>2] = $11;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12&255;
   $15 = $13;
  }
  HEAP32[$ls>>2] = $15;
  $16 = ($15|0)==(45);
  if (!($16)) {
   $$0 = 45;
   label = 237;
   break;
  }
  $17 = HEAP32[$3>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + -1)|0;
  HEAP32[$17>>2] = $19;
  $20 = ($18|0)==(0);
  if ($20) {
   $26 = (_luaZ_fill($17)|0);
   $27 = $26;
  } else {
   $21 = (($17) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 1|0);
   HEAP32[$21>>2] = $23;
   $24 = HEAP8[$22>>0]|0;
   $25 = $24&255;
   $27 = $25;
  }
  HEAP32[$ls>>2] = $27;
  $28 = ($27|0)==(91);
  do {
   if ($28) {
    $29 = (_skip_sep($ls)|0);
    $30 = HEAP32[$0>>2]|0;
    $31 = (($30) + 4|0);
    HEAP32[$31>>2] = 0;
    $32 = ($29|0)>(-1);
    if ($32) {
     _read_long_string($ls,0,$29);
     $33 = HEAP32[$0>>2]|0;
     $34 = (($33) + 4|0);
     HEAP32[$34>>2] = 0;
     continue L1;
    } else {
     $$pr = HEAP32[$ls>>2]|0;
     $657 = $$pr;
     break;
    }
   } else {
    $657 = $27;
   }
  } while(0);
  while(1) {
   if ((($657|0) == -1) | (($657|0) == 13) | (($657|0) == 10)) {
    continue L1;
   }
   $35 = HEAP32[$3>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + -1)|0;
   HEAP32[$35>>2] = $37;
   $38 = ($36|0)==(0);
   if ($38) {
    $44 = (_luaZ_fill($35)|0);
    $45 = $44;
   } else {
    $39 = (($35) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 1|0);
    HEAP32[$39>>2] = $41;
    $42 = HEAP8[$40>>0]|0;
    $43 = $42&255;
    $45 = $43;
   }
   HEAP32[$ls>>2] = $45;
   $657 = $45;
  }
 }
 do {
  if ((label|0) == 21) {
   $46 = (_skip_sep($ls)|0);
   $47 = ($46|0)>(-1);
   if ($47) {
    _read_long_string($ls,$seminfo,$46);
    $$0 = 286;
    STACKTOP = sp;return ($$0|0);
   }
   $48 = ($46|0)==(-1);
   if ($48) {
    $$0 = 91;
    STACKTOP = sp;return ($$0|0);
   } else {
    _luaX_lexerror($ls,4864,286);
    break;
   }
  }
  else if ((label|0) == 33) {
   $72 = HEAP32[$3>>2]|0;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + -1)|0;
   HEAP32[$72>>2] = $74;
   $75 = ($73|0)==(0);
   if ($75) {
    $81 = (_luaZ_fill($72)|0);
    $82 = $81;
   } else {
    $76 = (($72) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + 1|0);
    HEAP32[$76>>2] = $78;
    $79 = HEAP8[$77>>0]|0;
    $80 = $79&255;
    $82 = $80;
   }
   HEAP32[$ls>>2] = $82;
   $83 = ($82|0)==(61);
   if (!($83)) {
    $$0 = 60;
    STACKTOP = sp;return ($$0|0);
   }
   $84 = HEAP32[$3>>2]|0;
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + -1)|0;
   HEAP32[$84>>2] = $86;
   $87 = ($85|0)==(0);
   if ($87) {
    $93 = (_luaZ_fill($84)|0);
    $94 = $93;
   } else {
    $88 = (($84) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + 1|0);
    HEAP32[$88>>2] = $90;
    $91 = HEAP8[$89>>0]|0;
    $92 = $91&255;
    $94 = $92;
   }
   HEAP32[$ls>>2] = $94;
   $$0 = 282;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 41) {
   $95 = HEAP32[$3>>2]|0;
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + -1)|0;
   HEAP32[$95>>2] = $97;
   $98 = ($96|0)==(0);
   if ($98) {
    $104 = (_luaZ_fill($95)|0);
    $105 = $104;
   } else {
    $99 = (($95) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + 1|0);
    HEAP32[$99>>2] = $101;
    $102 = HEAP8[$100>>0]|0;
    $103 = $102&255;
    $105 = $103;
   }
   HEAP32[$ls>>2] = $105;
   $106 = ($105|0)==(61);
   if (!($106)) {
    $$0 = 62;
    STACKTOP = sp;return ($$0|0);
   }
   $107 = HEAP32[$3>>2]|0;
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + -1)|0;
   HEAP32[$107>>2] = $109;
   $110 = ($108|0)==(0);
   if ($110) {
    $116 = (_luaZ_fill($107)|0);
    $117 = $116;
   } else {
    $111 = (($107) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + 1|0);
    HEAP32[$111>>2] = $113;
    $114 = HEAP8[$112>>0]|0;
    $115 = $114&255;
    $117 = $115;
   }
   HEAP32[$ls>>2] = $117;
   $$0 = 281;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 49) {
   $118 = HEAP32[$3>>2]|0;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + -1)|0;
   HEAP32[$118>>2] = $120;
   $121 = ($119|0)==(0);
   if ($121) {
    $127 = (_luaZ_fill($118)|0);
    $128 = $127;
   } else {
    $122 = (($118) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + 1|0);
    HEAP32[$122>>2] = $124;
    $125 = HEAP8[$123>>0]|0;
    $126 = $125&255;
    $128 = $126;
   }
   HEAP32[$ls>>2] = $128;
   $129 = ($128|0)==(61);
   if (!($129)) {
    $$0 = 126;
    STACKTOP = sp;return ($$0|0);
   }
   $130 = HEAP32[$3>>2]|0;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($131) + -1)|0;
   HEAP32[$130>>2] = $132;
   $133 = ($131|0)==(0);
   if ($133) {
    $139 = (_luaZ_fill($130)|0);
    $140 = $139;
   } else {
    $134 = (($130) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + 1|0);
    HEAP32[$134>>2] = $136;
    $137 = HEAP8[$135>>0]|0;
    $138 = $137&255;
    $140 = $138;
   }
   HEAP32[$ls>>2] = $140;
   $$0 = 283;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 57) {
   $141 = HEAP32[$0>>2]|0;
   $142 = (($141) + 4|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (($143) + 1)|0;
   $145 = (($141) + 8|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ($144>>>0)>($146>>>0);
   if ($147) {
    $148 = ($146>>>0)>(2147483645);
    if ($148) {
     $149 = (($ls) + 64|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 16|0);
     _luaO_chunkid($buff$i51$i,$151,80);
     $152 = (($ls) + 52|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (($ls) + 4|0);
     $155 = HEAP32[$154>>2]|0;
     HEAP32[$vararg_buffer>>2] = $buff$i51$i;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $155;
     $vararg_ptr2 = (($vararg_buffer) + 8|0);
     HEAP32[$vararg_ptr2>>2] = 4944;
     (_luaO_pushfstring($153,4832,$vararg_buffer)|0);
     $156 = HEAP32[$152>>2]|0;
     _luaD_throw($156,3);
     // unreachable;
    }
    $$pre$i = (($ls) + 52|0);
    $157 = $146 << 1;
    $158 = ($157|0)==(-2);
    $159 = HEAP32[$$pre$i>>2]|0;
    if ($158) {
     $162 = (_luaM_toobig($159)|0);
     $$pre$phi$i$iZ2D = $141;$163 = $162;
    } else {
     $160 = HEAP32[$141>>2]|0;
     $161 = (_luaM_realloc_($159,$160,$146,$157)|0);
     $$pre$phi$i$iZ2D = $141;$163 = $161;
    }
    HEAP32[$$pre$phi$i$iZ2D>>2] = $163;
    HEAP32[$145>>2] = $157;
    $$pre1$i$i = HEAP32[$142>>2]|0;
    $166 = $$pre1$i$i;$168 = $163;
   } else {
    $$pre2$i$i = HEAP32[$141>>2]|0;
    $166 = $143;$168 = $$pre2$i$i;
   }
   $164 = $4&255;
   $165 = (($166) + 1)|0;
   HEAP32[$142>>2] = $165;
   $167 = (($168) + ($166)|0);
   HEAP8[$167>>0] = $164;
   $169 = HEAP32[$3>>2]|0;
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + -1)|0;
   HEAP32[$169>>2] = $171;
   $172 = ($170|0)==(0);
   if ($172) {
    $178 = (_luaZ_fill($169)|0);
    $179 = $178;
   } else {
    $173 = (($169) + 4|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) + 1|0);
    HEAP32[$173>>2] = $175;
    $176 = HEAP8[$174>>0]|0;
    $177 = $176&255;
    $179 = $177;
   }
   HEAP32[$ls>>2] = $179;
   $180 = ($179|0)==($4|0);
   L101: do {
    if (!($180)) {
     $181 = (($ls) + 64|0);
     $182 = (($ls) + 52|0);
     $183 = (($ls) + 4|0);
     $362 = $179;
     L103: while(1) {
      L105: do {
       if ((($362|0) == 92)) {
        $191 = HEAP32[$3>>2]|0;
        $192 = HEAP32[$191>>2]|0;
        $193 = (($192) + -1)|0;
        HEAP32[$191>>2] = $193;
        $194 = ($192|0)==(0);
        if ($194) {
         $200 = (_luaZ_fill($191)|0);
         $201 = $200;
        } else {
         $195 = (($191) + 4|0);
         $196 = HEAP32[$195>>2]|0;
         $197 = (($196) + 1|0);
         HEAP32[$195>>2] = $197;
         $198 = HEAP8[$196>>0]|0;
         $199 = $198&255;
         $201 = $199;
        }
        HEAP32[$ls>>2] = $201;
        switch ($201|0) {
        case 97:  {
         $c$1$i = 7;
         break;
        }
        case -1:  {
         $$be$i = -1;
         break L105;
         break;
        }
        case 98:  {
         $c$1$i = 8;
         break;
        }
        case 102:  {
         $c$1$i = 12;
         break;
        }
        case 110:  {
         $c$1$i = 10;
         break;
        }
        case 114:  {
         $c$1$i = 13;
         break;
        }
        case 116:  {
         $c$1$i = 9;
         break;
        }
        case 118:  {
         $c$1$i = 11;
         break;
        }
        case 13: case 10:  {
         $202 = HEAP32[$0>>2]|0;
         $203 = (($202) + 4|0);
         $204 = HEAP32[$203>>2]|0;
         $205 = (($204) + 1)|0;
         $206 = (($202) + 8|0);
         $207 = HEAP32[$206>>2]|0;
         $208 = ($205>>>0)>($207>>>0);
         if ($208) {
          $209 = ($207>>>0)>(2147483645);
          if ($209) {
           label = 88;
           break L103;
          }
          $215 = $207 << 1;
          $216 = ($215|0)==(-2);
          $217 = HEAP32[$182>>2]|0;
          if ($216) {
           $220 = (_luaM_toobig($217)|0);
           $$pre$phi$i8$iZ2D = $202;$221 = $220;
          } else {
           $218 = HEAP32[$202>>2]|0;
           $219 = (_luaM_realloc_($217,$218,$207,$215)|0);
           $$pre$phi$i8$iZ2D = $202;$221 = $219;
          }
          HEAP32[$$pre$phi$i8$iZ2D>>2] = $221;
          HEAP32[$206>>2] = $215;
          $$pre1$i9$i = HEAP32[$203>>2]|0;
          $223 = $$pre1$i9$i;$225 = $221;
         } else {
          $$pre2$i4$i = HEAP32[$202>>2]|0;
          $223 = $204;$225 = $$pre2$i4$i;
         }
         $222 = (($223) + 1)|0;
         HEAP32[$203>>2] = $222;
         $224 = (($225) + ($223)|0);
         HEAP8[$224>>0] = 10;
         _inclinenumber($ls);
         label = 71;
         break L105;
         break;
        }
        default: {
         $isdigittmp$i = (($201) + -48)|0;
         $isdigit$i = ($isdigittmp$i>>>0)<(10);
         if ($isdigit$i) {
          $264 = $201;$c$0$i = 0;$i$0$i = 0;
         } else {
          $226 = HEAP32[$0>>2]|0;
          $227 = (($226) + 4|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = (($228) + 1)|0;
          $230 = (($226) + 8|0);
          $231 = HEAP32[$230>>2]|0;
          $232 = ($229>>>0)>($231>>>0);
          if ($232) {
           $233 = ($231>>>0)>(2147483645);
           if ($233) {
            label = 98;
            break L103;
           }
           $239 = $231 << 1;
           $240 = ($239|0)==(-2);
           $241 = HEAP32[$182>>2]|0;
           if ($240) {
            $244 = (_luaM_toobig($241)|0);
            $$pre$phi$i16$iZ2D = $226;$245 = $244;
           } else {
            $242 = HEAP32[$226>>2]|0;
            $243 = (_luaM_realloc_($241,$242,$231,$239)|0);
            $$pre$phi$i16$iZ2D = $226;$245 = $243;
           }
           HEAP32[$$pre$phi$i16$iZ2D>>2] = $245;
           HEAP32[$230>>2] = $239;
           $$pre1$i17$i = HEAP32[$227>>2]|0;
           $248 = $$pre1$i17$i;$250 = $245;
          } else {
           $$pre2$i12$i = HEAP32[$226>>2]|0;
           $248 = $228;$250 = $$pre2$i12$i;
          }
          $246 = $201&255;
          $247 = (($248) + 1)|0;
          HEAP32[$227>>2] = $247;
          $249 = (($250) + ($248)|0);
          HEAP8[$249>>0] = $246;
          $251 = HEAP32[$3>>2]|0;
          $252 = HEAP32[$251>>2]|0;
          $253 = (($252) + -1)|0;
          HEAP32[$251>>2] = $253;
          $254 = ($252|0)==(0);
          if ($254) {
           $260 = (_luaZ_fill($251)|0);
           $261 = $260;
          } else {
           $255 = (($251) + 4|0);
           $256 = HEAP32[$255>>2]|0;
           $257 = (($256) + 1|0);
           HEAP32[$255>>2] = $257;
           $258 = HEAP8[$256>>0]|0;
           $259 = $258&255;
           $261 = $259;
          }
          HEAP32[$ls>>2] = $261;
          $$be$i = $261;
          break L105;
         }
         while(1) {
          $262 = ($c$0$i*10)|0;
          $263 = (($264) + -48)|0;
          $265 = (($263) + ($262))|0;
          $266 = HEAP32[$3>>2]|0;
          $267 = HEAP32[$266>>2]|0;
          $268 = (($267) + -1)|0;
          HEAP32[$266>>2] = $268;
          $269 = ($267|0)==(0);
          if ($269) {
           $275 = (_luaZ_fill($266)|0);
           $276 = $275;
          } else {
           $270 = (($266) + 4|0);
           $271 = HEAP32[$270>>2]|0;
           $272 = (($271) + 1|0);
           HEAP32[$270>>2] = $272;
           $273 = HEAP8[$271>>0]|0;
           $274 = $273&255;
           $276 = $274;
          }
          HEAP32[$ls>>2] = $276;
          $277 = (($i$0$i) + 1)|0;
          $278 = ($277|0)<(3);
          $isdigittmp1$i = (($276) + -48)|0;
          $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
          $or$cond$i = $278 & $isdigit2$i;
          if ($or$cond$i) {
           $264 = $276;$c$0$i = $265;$i$0$i = $277;
          } else {
           break;
          }
         }
         $279 = ($265|0)>(255);
         if ($279) {
          _luaX_lexerror($ls,5000,286);
         }
         $280 = HEAP32[$0>>2]|0;
         $281 = (($280) + 4|0);
         $282 = HEAP32[$281>>2]|0;
         $283 = (($282) + 1)|0;
         $284 = (($280) + 8|0);
         $285 = HEAP32[$284>>2]|0;
         $286 = ($283>>>0)>($285>>>0);
         if ($286) {
          $287 = ($285>>>0)>(2147483645);
          if ($287) {
           label = 116;
           break L103;
          }
          $293 = $285 << 1;
          $294 = ($293|0)==(-2);
          $295 = HEAP32[$182>>2]|0;
          if ($294) {
           $298 = (_luaM_toobig($295)|0);
           $$pre$phi$i24$iZ2D = $280;$299 = $298;
          } else {
           $296 = HEAP32[$280>>2]|0;
           $297 = (_luaM_realloc_($295,$296,$285,$293)|0);
           $$pre$phi$i24$iZ2D = $280;$299 = $297;
          }
          HEAP32[$$pre$phi$i24$iZ2D>>2] = $299;
          HEAP32[$284>>2] = $293;
          $$pre1$i25$i = HEAP32[$281>>2]|0;
          $302 = $$pre1$i25$i;$304 = $299;
         } else {
          $$pre2$i20$i = HEAP32[$280>>2]|0;
          $302 = $282;$304 = $$pre2$i20$i;
         }
         $300 = $265&255;
         $301 = (($302) + 1)|0;
         HEAP32[$281>>2] = $301;
         $303 = (($304) + ($302)|0);
         HEAP8[$303>>0] = $300;
         label = 71;
         break L105;
        }
        }
        $305 = HEAP32[$0>>2]|0;
        $306 = (($305) + 4|0);
        $307 = HEAP32[$306>>2]|0;
        $308 = (($307) + 1)|0;
        $309 = (($305) + 8|0);
        $310 = HEAP32[$309>>2]|0;
        $311 = ($308>>>0)>($310>>>0);
        if ($311) {
         $312 = ($310>>>0)>(2147483645);
         if ($312) {
          label = 125;
          break L103;
         }
         $318 = $310 << 1;
         $319 = ($318|0)==(-2);
         $320 = HEAP32[$182>>2]|0;
         if ($319) {
          $323 = (_luaM_toobig($320)|0);
          $$pre$phi$i32$iZ2D = $305;$324 = $323;
         } else {
          $321 = HEAP32[$305>>2]|0;
          $322 = (_luaM_realloc_($320,$321,$310,$318)|0);
          $$pre$phi$i32$iZ2D = $305;$324 = $322;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $324;
         HEAP32[$309>>2] = $318;
         $$pre1$i33$i = HEAP32[$306>>2]|0;
         $326 = $$pre1$i33$i;$328 = $324;
        } else {
         $$pre2$i28$i = HEAP32[$305>>2]|0;
         $326 = $307;$328 = $$pre2$i28$i;
        }
        $325 = (($326) + 1)|0;
        HEAP32[$306>>2] = $325;
        $327 = (($328) + ($326)|0);
        HEAP8[$327>>0] = $c$1$i;
        $329 = HEAP32[$3>>2]|0;
        $330 = HEAP32[$329>>2]|0;
        $331 = (($330) + -1)|0;
        HEAP32[$329>>2] = $331;
        $332 = ($330|0)==(0);
        if ($332) {
         $338 = (_luaZ_fill($329)|0);
         $339 = $338;
        } else {
         $333 = (($329) + 4|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = (($334) + 1|0);
         HEAP32[$333>>2] = $335;
         $336 = HEAP8[$334>>0]|0;
         $337 = $336&255;
         $339 = $337;
        }
        HEAP32[$ls>>2] = $339;
        $$be$i = $339;
       } else if ((($362|0) == -1)) {
        label = 73;
        break L103;
       } else if ((($362|0) == 13) | (($362|0) == 10)) {
        _luaX_lexerror($ls,4976,286);
        label = 71;
       } else {
        $341 = HEAP32[$0>>2]|0;
        $342 = (($341) + 4|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = (($343) + 1)|0;
        $345 = (($341) + 8|0);
        $346 = HEAP32[$345>>2]|0;
        $347 = ($344>>>0)>($346>>>0);
        if ($347) {
         $348 = ($346>>>0)>(2147483645);
         if ($348) {
          label = 138;
          break L103;
         }
         $354 = $346 << 1;
         $355 = ($354|0)==(-2);
         $356 = HEAP32[$182>>2]|0;
         if ($355) {
          $359 = (_luaM_toobig($356)|0);
          $$pre$phi$i40$iZ2D = $341;$360 = $359;
         } else {
          $357 = HEAP32[$341>>2]|0;
          $358 = (_luaM_realloc_($356,$357,$346,$354)|0);
          $$pre$phi$i40$iZ2D = $341;$360 = $358;
         }
         HEAP32[$$pre$phi$i40$iZ2D>>2] = $360;
         HEAP32[$345>>2] = $354;
         $$pre1$i41$i = HEAP32[$342>>2]|0;
         $364 = $$pre1$i41$i;$366 = $360;
        } else {
         $$pre2$i36$i = HEAP32[$341>>2]|0;
         $364 = $343;$366 = $$pre2$i36$i;
        }
        $361 = $362&255;
        $363 = (($364) + 1)|0;
        HEAP32[$342>>2] = $363;
        $365 = (($366) + ($364)|0);
        HEAP8[$365>>0] = $361;
        $367 = HEAP32[$3>>2]|0;
        $368 = HEAP32[$367>>2]|0;
        $369 = (($368) + -1)|0;
        HEAP32[$367>>2] = $369;
        $370 = ($368|0)==(0);
        if ($370) {
         $376 = (_luaZ_fill($367)|0);
         $377 = $376;
        } else {
         $371 = (($367) + 4|0);
         $372 = HEAP32[$371>>2]|0;
         $373 = (($372) + 1|0);
         HEAP32[$371>>2] = $373;
         $374 = HEAP8[$372>>0]|0;
         $375 = $374&255;
         $377 = $375;
        }
        HEAP32[$ls>>2] = $377;
        $$be$i = $377;
       }
      } while(0);
      if ((label|0) == 71) {
       label = 0;
       $$pr$i = HEAP32[$ls>>2]|0;
       $$be$i = $$pr$i;
      }
      $340 = ($$be$i|0)==($4|0);
      if ($340) {
       break L101;
      } else {
       $362 = $$be$i;
      }
     }
     if ((label|0) == 73) {
      $184 = HEAP32[$181>>2]|0;
      $185 = (($184) + 16|0);
      _luaO_chunkid($buff$i$i,$185,80);
      $186 = HEAP32[$182>>2]|0;
      $187 = HEAP32[$183>>2]|0;
      HEAP32[$vararg_buffer3>>2] = $buff$i$i;
      $vararg_ptr6 = (($vararg_buffer3) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $187;
      $vararg_ptr7 = (($vararg_buffer3) + 8|0);
      HEAP32[$vararg_ptr7>>2] = 4976;
      $188 = (_luaO_pushfstring($186,4832,$vararg_buffer3)|0);
      $189 = HEAP32[$182>>2]|0;
      HEAP32[$vararg_buffer8>>2] = $188;
      $vararg_ptr11 = (($vararg_buffer8) + 4|0);
      HEAP32[$vararg_ptr11>>2] = 4672;
      (_luaO_pushfstring($189,4848,$vararg_buffer8)|0);
      $190 = HEAP32[$182>>2]|0;
      _luaD_throw($190,3);
      // unreachable;
     }
     else if ((label|0) == 88) {
      $210 = HEAP32[$181>>2]|0;
      $211 = (($210) + 16|0);
      _luaO_chunkid($buff$i52$i,$211,80);
      $212 = HEAP32[$182>>2]|0;
      $213 = HEAP32[$183>>2]|0;
      HEAP32[$vararg_buffer12>>2] = $buff$i52$i;
      $vararg_ptr15 = (($vararg_buffer12) + 4|0);
      HEAP32[$vararg_ptr15>>2] = $213;
      $vararg_ptr16 = (($vararg_buffer12) + 8|0);
      HEAP32[$vararg_ptr16>>2] = 4944;
      (_luaO_pushfstring($212,4832,$vararg_buffer12)|0);
      $214 = HEAP32[$182>>2]|0;
      _luaD_throw($214,3);
      // unreachable;
     }
     else if ((label|0) == 98) {
      $234 = HEAP32[$181>>2]|0;
      $235 = (($234) + 16|0);
      _luaO_chunkid($buff$i53$i,$235,80);
      $236 = HEAP32[$182>>2]|0;
      $237 = HEAP32[$183>>2]|0;
      HEAP32[$vararg_buffer17>>2] = $buff$i53$i;
      $vararg_ptr20 = (($vararg_buffer17) + 4|0);
      HEAP32[$vararg_ptr20>>2] = $237;
      $vararg_ptr21 = (($vararg_buffer17) + 8|0);
      HEAP32[$vararg_ptr21>>2] = 4944;
      (_luaO_pushfstring($236,4832,$vararg_buffer17)|0);
      $238 = HEAP32[$182>>2]|0;
      _luaD_throw($238,3);
      // unreachable;
     }
     else if ((label|0) == 116) {
      $288 = HEAP32[$181>>2]|0;
      $289 = (($288) + 16|0);
      _luaO_chunkid($buff$i54$i,$289,80);
      $290 = HEAP32[$182>>2]|0;
      $291 = HEAP32[$183>>2]|0;
      HEAP32[$vararg_buffer22>>2] = $buff$i54$i;
      $vararg_ptr25 = (($vararg_buffer22) + 4|0);
      HEAP32[$vararg_ptr25>>2] = $291;
      $vararg_ptr26 = (($vararg_buffer22) + 8|0);
      HEAP32[$vararg_ptr26>>2] = 4944;
      (_luaO_pushfstring($290,4832,$vararg_buffer22)|0);
      $292 = HEAP32[$182>>2]|0;
      _luaD_throw($292,3);
      // unreachable;
     }
     else if ((label|0) == 125) {
      $313 = HEAP32[$181>>2]|0;
      $314 = (($313) + 16|0);
      _luaO_chunkid($buff$i55$i,$314,80);
      $315 = HEAP32[$182>>2]|0;
      $316 = HEAP32[$183>>2]|0;
      HEAP32[$vararg_buffer27>>2] = $buff$i55$i;
      $vararg_ptr30 = (($vararg_buffer27) + 4|0);
      HEAP32[$vararg_ptr30>>2] = $316;
      $vararg_ptr31 = (($vararg_buffer27) + 8|0);
      HEAP32[$vararg_ptr31>>2] = 4944;
      (_luaO_pushfstring($315,4832,$vararg_buffer27)|0);
      $317 = HEAP32[$182>>2]|0;
      _luaD_throw($317,3);
      // unreachable;
     }
     else if ((label|0) == 138) {
      $349 = HEAP32[$181>>2]|0;
      $350 = (($349) + 16|0);
      _luaO_chunkid($buff$i56$i,$350,80);
      $351 = HEAP32[$182>>2]|0;
      $352 = HEAP32[$183>>2]|0;
      HEAP32[$vararg_buffer32>>2] = $buff$i56$i;
      $vararg_ptr35 = (($vararg_buffer32) + 4|0);
      HEAP32[$vararg_ptr35>>2] = $352;
      $vararg_ptr36 = (($vararg_buffer32) + 8|0);
      HEAP32[$vararg_ptr36>>2] = 4944;
      (_luaO_pushfstring($351,4832,$vararg_buffer32)|0);
      $353 = HEAP32[$182>>2]|0;
      _luaD_throw($353,3);
      // unreachable;
     }
    }
   } while(0);
   $378 = HEAP32[$0>>2]|0;
   $379 = (($378) + 4|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = (($380) + 1)|0;
   $382 = (($378) + 8|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = ($381>>>0)>($383>>>0);
   if ($384) {
    $385 = ($383>>>0)>(2147483645);
    if ($385) {
     $386 = (($ls) + 64|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = (($387) + 16|0);
     _luaO_chunkid($buff$i57$i,$388,80);
     $389 = (($ls) + 52|0);
     $390 = HEAP32[$389>>2]|0;
     $391 = (($ls) + 4|0);
     $392 = HEAP32[$391>>2]|0;
     HEAP32[$vararg_buffer37>>2] = $buff$i57$i;
     $vararg_ptr40 = (($vararg_buffer37) + 4|0);
     HEAP32[$vararg_ptr40>>2] = $392;
     $vararg_ptr41 = (($vararg_buffer37) + 8|0);
     HEAP32[$vararg_ptr41>>2] = 4944;
     (_luaO_pushfstring($390,4832,$vararg_buffer37)|0);
     $393 = HEAP32[$389>>2]|0;
     _luaD_throw($393,3);
     // unreachable;
    }
    $$pre61$i = (($ls) + 52|0);
    $394 = $383 << 1;
    $395 = ($394|0)==(-2);
    $396 = HEAP32[$$pre61$i>>2]|0;
    if ($395) {
     $399 = (_luaM_toobig($396)|0);
     $$pre$phi$i48$iZ2D = $378;$400 = $399;
    } else {
     $397 = HEAP32[$378>>2]|0;
     $398 = (_luaM_realloc_($396,$397,$383,$394)|0);
     $$pre$phi$i48$iZ2D = $378;$400 = $398;
    }
    HEAP32[$$pre$phi$i48$iZ2D>>2] = $400;
    HEAP32[$382>>2] = $394;
    $$pre1$i49$i = HEAP32[$379>>2]|0;
    $402 = $$pre1$i49$i;$404 = $400;
   } else {
    $$pre2$i44$i = HEAP32[$378>>2]|0;
    $402 = $380;$404 = $$pre2$i44$i;
   }
   $401 = (($402) + 1)|0;
   HEAP32[$379>>2] = $401;
   $403 = (($404) + ($402)|0);
   HEAP8[$403>>0] = $164;
   $405 = HEAP32[$3>>2]|0;
   $406 = HEAP32[$405>>2]|0;
   $407 = (($406) + -1)|0;
   HEAP32[$405>>2] = $407;
   $408 = ($406|0)==(0);
   if ($408) {
    $414 = (_luaZ_fill($405)|0);
    $415 = $414;
   } else {
    $409 = (($405) + 4|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = (($410) + 1|0);
    HEAP32[$409>>2] = $411;
    $412 = HEAP8[$410>>0]|0;
    $413 = $412&255;
    $415 = $413;
   }
   HEAP32[$ls>>2] = $415;
   $416 = HEAP32[$0>>2]|0;
   $417 = HEAP32[$416>>2]|0;
   $418 = (($417) + 1|0);
   $419 = (($416) + 4|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = (($420) + -2)|0;
   $422 = (($ls) + 52|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = (_luaS_newlstr($423,$418,$421)|0);
   $425 = (($ls) + 48|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = (($426) + 4|0);
   $428 = HEAP32[$427>>2]|0;
   $429 = (_luaH_setstr($423,$428,$424)|0);
   $430 = (($429) + 8|0);
   $431 = HEAP32[$430>>2]|0;
   $432 = ($431|0)==(0);
   if ($432) {
    HEAP32[$429>>2] = 1;
    HEAP32[$430>>2] = 1;
    $433 = (($423) + 16|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = (($434) + 68|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = (($434) + 64|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = ($436>>>0)<($438>>>0);
    if (!($439)) {
     _luaC_step($423);
    }
   }
   HEAP32[$seminfo>>2] = $424;
   $$0 = 286;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 163) {
   $440 = HEAP32[$0>>2]|0;
   $441 = (($440) + 4|0);
   $442 = HEAP32[$441>>2]|0;
   $443 = (($442) + 1)|0;
   $444 = (($440) + 8|0);
   $445 = HEAP32[$444>>2]|0;
   $446 = ($443>>>0)>($445>>>0);
   if ($446) {
    $447 = ($445>>>0)>(2147483645);
    if ($447) {
     $448 = (($ls) + 64|0);
     $449 = HEAP32[$448>>2]|0;
     $450 = (($449) + 16|0);
     _luaO_chunkid($buff$i,$450,80);
     $451 = (($ls) + 52|0);
     $452 = HEAP32[$451>>2]|0;
     $453 = (($ls) + 4|0);
     $454 = HEAP32[$453>>2]|0;
     HEAP32[$vararg_buffer42>>2] = $buff$i;
     $vararg_ptr45 = (($vararg_buffer42) + 4|0);
     HEAP32[$vararg_ptr45>>2] = $454;
     $vararg_ptr46 = (($vararg_buffer42) + 8|0);
     HEAP32[$vararg_ptr46>>2] = 4944;
     (_luaO_pushfstring($452,4832,$vararg_buffer42)|0);
     $455 = HEAP32[$451>>2]|0;
     _luaD_throw($455,3);
     // unreachable;
    }
    $$pre73 = (($ls) + 52|0);
    $456 = $445 << 1;
    $457 = ($456|0)==(-2);
    $458 = HEAP32[$$pre73>>2]|0;
    if ($457) {
     $461 = (_luaM_toobig($458)|0);
     $$pre$phi$i7Z2D = $440;$462 = $461;
    } else {
     $459 = HEAP32[$440>>2]|0;
     $460 = (_luaM_realloc_($458,$459,$445,$456)|0);
     $$pre$phi$i7Z2D = $440;$462 = $460;
    }
    HEAP32[$$pre$phi$i7Z2D>>2] = $462;
    HEAP32[$444>>2] = $456;
    $$pre1$i = HEAP32[$441>>2]|0;
    $464 = $$pre1$i;$466 = $462;
   } else {
    $$pre2$i = HEAP32[$440>>2]|0;
    $464 = $442;$466 = $$pre2$i;
   }
   $463 = (($464) + 1)|0;
   HEAP32[$441>>2] = $463;
   $465 = (($466) + ($464)|0);
   HEAP8[$465>>0] = 46;
   $467 = HEAP32[$3>>2]|0;
   $468 = HEAP32[$467>>2]|0;
   $469 = (($468) + -1)|0;
   HEAP32[$467>>2] = $469;
   $470 = ($468|0)==(0);
   if ($470) {
    $476 = (_luaZ_fill($467)|0);
    $477 = $476;
   } else {
    $471 = (($467) + 4|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = (($472) + 1|0);
    HEAP32[$471>>2] = $473;
    $474 = HEAP8[$472>>0]|0;
    $475 = $474&255;
    $477 = $475;
   }
   HEAP32[$ls>>2] = $477;
   $memchr = (_memchr(4896,$477,2)|0);
   $478 = ($memchr|0)==(0|0);
   if ($478) {
    $isdigittmp = (($477) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if (!($isdigit)) {
     $$0 = 46;
     STACKTOP = sp;return ($$0|0);
    }
    _read_numeral($ls,$seminfo);
    $$0 = 284;
    STACKTOP = sp;return ($$0|0);
   }
   $479 = HEAP32[$0>>2]|0;
   $480 = (($479) + 4|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = (($481) + 1)|0;
   $483 = (($479) + 8|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = ($482>>>0)>($484>>>0);
   if ($485) {
    $486 = ($484>>>0)>(2147483645);
    if ($486) {
     $487 = (($ls) + 64|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = (($488) + 16|0);
     _luaO_chunkid($buff$i38,$489,80);
     $490 = (($ls) + 52|0);
     $491 = HEAP32[$490>>2]|0;
     $492 = (($ls) + 4|0);
     $493 = HEAP32[$492>>2]|0;
     HEAP32[$vararg_buffer47>>2] = $buff$i38;
     $vararg_ptr50 = (($vararg_buffer47) + 4|0);
     HEAP32[$vararg_ptr50>>2] = $493;
     $vararg_ptr51 = (($vararg_buffer47) + 8|0);
     HEAP32[$vararg_ptr51>>2] = 4944;
     (_luaO_pushfstring($491,4832,$vararg_buffer47)|0);
     $494 = HEAP32[$490>>2]|0;
     _luaD_throw($494,3);
     // unreachable;
    }
    $$pre74 = (($ls) + 52|0);
    $495 = $484 << 1;
    $496 = ($495|0)==(-2);
    $497 = HEAP32[$$pre74>>2]|0;
    if ($496) {
     $500 = (_luaM_toobig($497)|0);
     $$pre$phi$i24Z2D = $479;$501 = $500;
    } else {
     $498 = HEAP32[$479>>2]|0;
     $499 = (_luaM_realloc_($497,$498,$484,$495)|0);
     $$pre$phi$i24Z2D = $479;$501 = $499;
    }
    HEAP32[$$pre$phi$i24Z2D>>2] = $501;
    HEAP32[$483>>2] = $495;
    $$pre1$i25 = HEAP32[$480>>2]|0;
    $504 = $$pre1$i25;$506 = $501;
   } else {
    $$pre2$i20 = HEAP32[$479>>2]|0;
    $504 = $481;$506 = $$pre2$i20;
   }
   $502 = $477&255;
   $503 = (($504) + 1)|0;
   HEAP32[$480>>2] = $503;
   $505 = (($506) + ($504)|0);
   HEAP8[$505>>0] = $502;
   $507 = HEAP32[$3>>2]|0;
   $508 = HEAP32[$507>>2]|0;
   $509 = (($508) + -1)|0;
   HEAP32[$507>>2] = $509;
   $510 = ($508|0)==(0);
   if ($510) {
    $516 = (_luaZ_fill($507)|0);
    $517 = $516;
   } else {
    $511 = (($507) + 4|0);
    $512 = HEAP32[$511>>2]|0;
    $513 = (($512) + 1|0);
    HEAP32[$511>>2] = $513;
    $514 = HEAP8[$512>>0]|0;
    $515 = $514&255;
    $517 = $515;
   }
   HEAP32[$ls>>2] = $517;
   $memchr41 = (_memchr(4896,$517,2)|0);
   $518 = ($memchr41|0)==(0|0);
   if ($518) {
    $$0 = 278;
    STACKTOP = sp;return ($$0|0);
   }
   $519 = HEAP32[$0>>2]|0;
   $520 = (($519) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = (($521) + 1)|0;
   $523 = (($519) + 8|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = ($522>>>0)>($524>>>0);
   if ($525) {
    $526 = ($524>>>0)>(2147483645);
    if ($526) {
     $527 = (($ls) + 64|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = (($528) + 16|0);
     _luaO_chunkid($buff$i40,$529,80);
     $530 = (($ls) + 52|0);
     $531 = HEAP32[$530>>2]|0;
     $532 = (($ls) + 4|0);
     $533 = HEAP32[$532>>2]|0;
     HEAP32[$vararg_buffer52>>2] = $buff$i40;
     $vararg_ptr55 = (($vararg_buffer52) + 4|0);
     HEAP32[$vararg_ptr55>>2] = $533;
     $vararg_ptr56 = (($vararg_buffer52) + 8|0);
     HEAP32[$vararg_ptr56>>2] = 4944;
     (_luaO_pushfstring($531,4832,$vararg_buffer52)|0);
     $534 = HEAP32[$530>>2]|0;
     _luaD_throw($534,3);
     // unreachable;
    }
    $$pre76 = (($ls) + 52|0);
    $535 = $524 << 1;
    $536 = ($535|0)==(-2);
    $537 = HEAP32[$$pre76>>2]|0;
    if ($536) {
     $540 = (_luaM_toobig($537)|0);
     $$pre$phi$i32Z2D = $519;$541 = $540;
    } else {
     $538 = HEAP32[$519>>2]|0;
     $539 = (_luaM_realloc_($537,$538,$524,$535)|0);
     $$pre$phi$i32Z2D = $519;$541 = $539;
    }
    HEAP32[$$pre$phi$i32Z2D>>2] = $541;
    HEAP32[$523>>2] = $535;
    $$pre1$i33 = HEAP32[$520>>2]|0;
    $544 = $$pre1$i33;$546 = $541;
   } else {
    $$pre2$i28 = HEAP32[$519>>2]|0;
    $544 = $521;$546 = $$pre2$i28;
   }
   $542 = $517&255;
   $543 = (($544) + 1)|0;
   HEAP32[$520>>2] = $543;
   $545 = (($546) + ($544)|0);
   HEAP8[$545>>0] = $542;
   $547 = HEAP32[$3>>2]|0;
   $548 = HEAP32[$547>>2]|0;
   $549 = (($548) + -1)|0;
   HEAP32[$547>>2] = $549;
   $550 = ($548|0)==(0);
   if ($550) {
    $556 = (_luaZ_fill($547)|0);
    $557 = $556;
   } else {
    $551 = (($547) + 4|0);
    $552 = HEAP32[$551>>2]|0;
    $553 = (($552) + 1|0);
    HEAP32[$551>>2] = $553;
    $554 = HEAP8[$552>>0]|0;
    $555 = $554&255;
    $557 = $555;
   }
   HEAP32[$ls>>2] = $557;
   $$0 = 279;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 209) {
   $571 = HEAP32[$ls>>2]|0;
   $isdigittmp3 = (($571) + -48)|0;
   $isdigit4 = ($isdigittmp3>>>0)<(10);
   if ($isdigit4) {
    _read_numeral($ls,$seminfo);
    $$0 = 284;
    STACKTOP = sp;return ($$0|0);
   }
   $572 = (_isalpha($571)|0);
   $573 = ($572|0)==(0);
   if ($573) {
    $574 = HEAP32[$ls>>2]|0;
    $575 = ($574|0)==(95);
    if (!($575)) {
     $646 = HEAP32[$3>>2]|0;
     $647 = HEAP32[$646>>2]|0;
     $648 = (($647) + -1)|0;
     HEAP32[$646>>2] = $648;
     $649 = ($647|0)==(0);
     if ($649) {
      $655 = (_luaZ_fill($646)|0);
      $656 = $655;
     } else {
      $650 = (($646) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + 1|0);
      HEAP32[$650>>2] = $652;
      $653 = HEAP8[$651>>0]|0;
      $654 = $653&255;
      $656 = $654;
     }
     HEAP32[$ls>>2] = $656;
     $$0 = $574;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $576 = (($ls) + 64|0);
   $577 = (($ls) + 52|0);
   $578 = (($ls) + 4|0);
   while(1) {
    $579 = HEAP32[$ls>>2]|0;
    $580 = HEAP32[$0>>2]|0;
    $581 = (($580) + 4|0);
    $582 = HEAP32[$581>>2]|0;
    $583 = (($582) + 1)|0;
    $584 = (($580) + 8|0);
    $585 = HEAP32[$584>>2]|0;
    $586 = ($583>>>0)>($585>>>0);
    if ($586) {
     $587 = ($585>>>0)>(2147483645);
     if ($587) {
      label = 217;
      break;
     }
     $593 = $585 << 1;
     $594 = ($593|0)==(-2);
     $595 = HEAP32[$577>>2]|0;
     if ($594) {
      $598 = (_luaM_toobig($595)|0);
      $$pre$phi$i15Z2D = $580;$599 = $598;
     } else {
      $596 = HEAP32[$580>>2]|0;
      $597 = (_luaM_realloc_($595,$596,$585,$593)|0);
      $$pre$phi$i15Z2D = $580;$599 = $597;
     }
     HEAP32[$$pre$phi$i15Z2D>>2] = $599;
     HEAP32[$584>>2] = $593;
     $$pre1$i16 = HEAP32[$581>>2]|0;
     $602 = $$pre1$i16;$604 = $599;
    } else {
     $$pre2$i11 = HEAP32[$580>>2]|0;
     $602 = $582;$604 = $$pre2$i11;
    }
    $600 = $579&255;
    $601 = (($602) + 1)|0;
    HEAP32[$581>>2] = $601;
    $603 = (($604) + ($602)|0);
    HEAP8[$603>>0] = $600;
    $605 = HEAP32[$3>>2]|0;
    $606 = HEAP32[$605>>2]|0;
    $607 = (($606) + -1)|0;
    HEAP32[$605>>2] = $607;
    $608 = ($606|0)==(0);
    if ($608) {
     $614 = (_luaZ_fill($605)|0);
     $615 = $614;
    } else {
     $609 = (($605) + 4|0);
     $610 = HEAP32[$609>>2]|0;
     $611 = (($610) + 1|0);
     HEAP32[$609>>2] = $611;
     $612 = HEAP8[$610>>0]|0;
     $613 = $612&255;
     $615 = $613;
    }
    HEAP32[$ls>>2] = $615;
    $616 = (_isalnum($615)|0);
    $617 = ($616|0)==(0);
    if (!($617)) {
     continue;
    }
    $618 = HEAP32[$ls>>2]|0;
    $619 = ($618|0)==(95);
    if (!($619)) {
     break;
    }
   }
   if ((label|0) == 217) {
    $588 = HEAP32[$576>>2]|0;
    $589 = (($588) + 16|0);
    _luaO_chunkid($buff$i36,$589,80);
    $590 = HEAP32[$577>>2]|0;
    $591 = HEAP32[$578>>2]|0;
    HEAP32[$vararg_buffer57>>2] = $buff$i36;
    $vararg_ptr60 = (($vararg_buffer57) + 4|0);
    HEAP32[$vararg_ptr60>>2] = $591;
    $vararg_ptr61 = (($vararg_buffer57) + 8|0);
    HEAP32[$vararg_ptr61>>2] = 4944;
    (_luaO_pushfstring($590,4832,$vararg_buffer57)|0);
    $592 = HEAP32[$577>>2]|0;
    _luaD_throw($592,3);
    // unreachable;
   }
   $620 = HEAP32[$0>>2]|0;
   $621 = HEAP32[$620>>2]|0;
   $622 = (($620) + 4|0);
   $623 = HEAP32[$622>>2]|0;
   $624 = HEAP32[$577>>2]|0;
   $625 = (_luaS_newlstr($624,$621,$623)|0);
   $626 = (($ls) + 48|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = (($627) + 4|0);
   $629 = HEAP32[$628>>2]|0;
   $630 = (_luaH_setstr($624,$629,$625)|0);
   $631 = (($630) + 8|0);
   $632 = HEAP32[$631>>2]|0;
   $633 = ($632|0)==(0);
   if ($633) {
    HEAP32[$630>>2] = 1;
    HEAP32[$631>>2] = 1;
    $634 = (($624) + 16|0);
    $635 = HEAP32[$634>>2]|0;
    $636 = (($635) + 68|0);
    $637 = HEAP32[$636>>2]|0;
    $638 = (($635) + 64|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = ($637>>>0)<($639>>>0);
    if (!($640)) {
     _luaC_step($624);
    }
   }
   $641 = (($625) + 6|0);
   $642 = HEAP8[$641>>0]|0;
   $643 = ($642<<24>>24)==(0);
   if ($643) {
    HEAP32[$seminfo>>2] = $625;
    $$0 = 285;
    STACKTOP = sp;return ($$0|0);
   } else {
    $644 = $642&255;
    $645 = $644 | 256;
    $$0 = $645;
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 237) {
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $49 = HEAP32[$3>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + -1)|0;
 HEAP32[$49>>2] = $51;
 $52 = ($50|0)==(0);
 if ($52) {
  $58 = (_luaZ_fill($49)|0);
  $59 = $58;
 } else {
  $53 = (($49) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 1|0);
  HEAP32[$53>>2] = $55;
  $56 = HEAP8[$54>>0]|0;
  $57 = $56&255;
  $59 = $57;
 }
 HEAP32[$ls>>2] = $59;
 $60 = ($59|0)==(61);
 if (!($60)) {
  $$0 = 61;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP32[$3>>2]|0;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + -1)|0;
 HEAP32[$61>>2] = $63;
 $64 = ($62|0)==(0);
 if ($64) {
  $70 = (_luaZ_fill($61)|0);
  $71 = $70;
 } else {
  $65 = (($61) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 1|0);
  HEAP32[$65>>2] = $67;
  $68 = HEAP8[$66>>0]|0;
  $69 = $68&255;
  $71 = $69;
 }
 HEAP32[$ls>>2] = $71;
 $$0 = 280;
 STACKTOP = sp;return ($$0|0);
}
function _inclinenumber($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 $1 = (($ls) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 if ($5) {
  $11 = (_luaZ_fill($2)|0);
  $12 = $11;
 } else {
  $6 = (($2) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1|0);
  HEAP32[$6>>2] = $8;
  $9 = HEAP8[$7>>0]|0;
  $10 = $9&255;
  $12 = $10;
 }
 HEAP32[$ls>>2] = $12;
 if ((($12|0) == 13) | (($12|0) == 10)) {
  $13 = ($12|0)==($0|0);
  if (!($13)) {
   $14 = HEAP32[$1>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + -1)|0;
   HEAP32[$14>>2] = $16;
   $17 = ($15|0)==(0);
   if ($17) {
    $23 = (_luaZ_fill($14)|0);
    $24 = $23;
   } else {
    $18 = (($14) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + 1|0);
    HEAP32[$18>>2] = $20;
    $21 = HEAP8[$19>>0]|0;
    $22 = $21&255;
    $24 = $22;
   }
   HEAP32[$ls>>2] = $24;
  }
 }
 $25 = (($ls) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$25>>2] = $27;
 $28 = ($26|0)>(2147483643);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = (($ls) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 _luaX_lexerror($ls,5120,$30);
 STACKTOP = sp;return;
}
function _skip_sep($ls) {
 $ls = $ls|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi$i6Z2D = 0, $$pre$phi$iZ2D = 0, $$pre1$i = 0, $$pre1$i7 = 0, $$pre2$i = 0, $$pre2$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $buff$i = 0, $buff$i9 = 0, $count$0$ = 0, $count$0$lcssa = 0, $count$010 = 0, $not$ = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buff$i9 = sp + 112|0;
 $buff$i = sp + 32|0;
 $0 = HEAP32[$ls>>2]|0;
 $1 = (($ls) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (($2) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $9 = ($7>>>0)>(2147483645);
  if ($9) {
   $10 = (($ls) + 64|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 16|0);
   _luaO_chunkid($buff$i,$12,80);
   $13 = (($ls) + 52|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($ls) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$vararg_buffer>>2] = $buff$i;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $16;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 4944;
   (_luaO_pushfstring($14,4832,$vararg_buffer)|0);
   $17 = HEAP32[$13>>2]|0;
   _luaD_throw($17,3);
   // unreachable;
  }
  $$pre = (($ls) + 52|0);
  $18 = $7 << 1;
  $19 = ($18|0)==(-2);
  $20 = HEAP32[$$pre>>2]|0;
  if ($19) {
   $23 = (_luaM_toobig($20)|0);
   $$pre$phi$iZ2D = $2;$24 = $23;
  } else {
   $21 = HEAP32[$2>>2]|0;
   $22 = (_luaM_realloc_($20,$21,$7,$18)|0);
   $$pre$phi$iZ2D = $2;$24 = $22;
  }
  HEAP32[$$pre$phi$iZ2D>>2] = $24;
  HEAP32[$6>>2] = $18;
  $$pre1$i = HEAP32[$3>>2]|0;
  $27 = $$pre1$i;$29 = $24;
 } else {
  $$pre2$i = HEAP32[$2>>2]|0;
  $27 = $4;$29 = $$pre2$i;
 }
 $25 = $0&255;
 $26 = (($27) + 1)|0;
 HEAP32[$3>>2] = $26;
 $28 = (($29) + ($27)|0);
 HEAP8[$28>>0] = $25;
 $30 = (($ls) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + -1)|0;
 HEAP32[$31>>2] = $33;
 $34 = ($32|0)==(0);
 if ($34) {
  $40 = (_luaZ_fill($31)|0);
  $41 = $40;
 } else {
  $35 = (($31) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1|0);
  HEAP32[$35>>2] = $37;
  $38 = HEAP8[$36>>0]|0;
  $39 = $38&255;
  $41 = $39;
 }
 HEAP32[$ls>>2] = $41;
 $42 = ($41|0)==(61);
 if (!($42)) {
  $$lcssa = $41;$count$0$lcssa = 0;
  $not$ = ($$lcssa|0)!=($0|0);
  $83 = $not$ << 31 >> 31;
  $count$0$ = $83 ^ $count$0$lcssa;
  STACKTOP = sp;return ($count$0$|0);
 }
 $43 = (($ls) + 64|0);
 $44 = (($ls) + 52|0);
 $45 = (($ls) + 4|0);
 $count$010 = 0;
 while(1) {
  $46 = HEAP32[$1>>2]|0;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 1)|0;
  $50 = (($46) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($49>>>0)>($51>>>0);
  if ($52) {
   $53 = ($51>>>0)>(2147483645);
   if ($53) {
    label = 18;
    break;
   }
   $59 = $51 << 1;
   $60 = ($59|0)==(-2);
   $61 = HEAP32[$44>>2]|0;
   if ($60) {
    $64 = (_luaM_toobig($61)|0);
    $$pre$phi$i6Z2D = $46;$65 = $64;
   } else {
    $62 = HEAP32[$46>>2]|0;
    $63 = (_luaM_realloc_($61,$62,$51,$59)|0);
    $$pre$phi$i6Z2D = $46;$65 = $63;
   }
   HEAP32[$$pre$phi$i6Z2D>>2] = $65;
   HEAP32[$50>>2] = $59;
   $$pre1$i7 = HEAP32[$47>>2]|0;
   $67 = $$pre1$i7;$69 = $65;
  } else {
   $$pre2$i2 = HEAP32[$46>>2]|0;
   $67 = $48;$69 = $$pre2$i2;
  }
  $66 = (($67) + 1)|0;
  HEAP32[$47>>2] = $66;
  $68 = (($69) + ($67)|0);
  HEAP8[$68>>0] = 61;
  $70 = HEAP32[$30>>2]|0;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + -1)|0;
  HEAP32[$70>>2] = $72;
  $73 = ($71|0)==(0);
  if ($73) {
   $79 = (_luaZ_fill($70)|0);
   $80 = $79;
  } else {
   $74 = (($70) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + 1|0);
   HEAP32[$74>>2] = $76;
   $77 = HEAP8[$75>>0]|0;
   $78 = $77&255;
   $80 = $78;
  }
  HEAP32[$ls>>2] = $80;
  $81 = (($count$010) + 1)|0;
  $82 = ($80|0)==(61);
  if ($82) {
   $count$010 = $81;
  } else {
   $$lcssa = $80;$count$0$lcssa = $81;
   label = 27;
   break;
  }
 }
 if ((label|0) == 18) {
  $54 = HEAP32[$43>>2]|0;
  $55 = (($54) + 16|0);
  _luaO_chunkid($buff$i9,$55,80);
  $56 = HEAP32[$44>>2]|0;
  $57 = HEAP32[$45>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $buff$i9;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $57;
  $vararg_ptr7 = (($vararg_buffer3) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 4944;
  (_luaO_pushfstring($56,4832,$vararg_buffer3)|0);
  $58 = HEAP32[$44>>2]|0;
  _luaD_throw($58,3);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $not$ = ($$lcssa|0)!=($0|0);
  $83 = $not$ << 31 >> 31;
  $count$0$ = $83 ^ $count$0$lcssa;
  STACKTOP = sp;return ($count$0$|0);
 }
 return 0|0;
}
function _read_long_string($ls,$seminfo,$sep) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 $sep = $sep|0;
 var $$ph = 0, $$ph39 = 0, $$pr = 0, $$pre = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i22Z2D = 0, $$pre$phi$i30Z2D = 0, $$pre$phi$i6Z2D = 0, $$pre$phi$iZ2D = 0, $$pre1$i = 0, $$pre1$i15 = 0, $$pre1$i23 = 0, $$pre1$i31 = 0, $$pre1$i7 = 0, $$pre2$i = 0, $$pre2$i10 = 0, $$pre2$i18 = 0, $$pre2$i2 = 0, $$pre2$i26 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buff$i = 0, $buff$i33 = 0, $buff$i34 = 0, $buff$i35 = 0, $buff$i36 = 0, $buff$i37 = 0, $vararg_buffer = 0;
 var $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buff$i37 = sp + 504|0;
 $buff$i36 = sp + 424|0;
 $buff$i35 = sp + 344|0;
 $buff$i34 = sp + 264|0;
 $buff$i33 = sp + 184|0;
 $buff$i = sp + 104|0;
 $0 = HEAP32[$ls>>2]|0;
 $1 = (($ls) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (($2) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $9 = ($7>>>0)>(2147483645);
  if ($9) {
   $10 = (($ls) + 64|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 16|0);
   _luaO_chunkid($buff$i33,$12,80);
   $13 = (($ls) + 52|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($ls) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$vararg_buffer>>2] = $buff$i33;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $16;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 4944;
   (_luaO_pushfstring($14,4832,$vararg_buffer)|0);
   $17 = HEAP32[$13>>2]|0;
   _luaD_throw($17,3);
   // unreachable;
  }
  $$pre = (($ls) + 52|0);
  $18 = $7 << 1;
  $19 = ($18|0)==(-2);
  $20 = HEAP32[$$pre>>2]|0;
  if ($19) {
   $23 = (_luaM_toobig($20)|0);
   $$pre$phi$iZ2D = $2;$24 = $23;
  } else {
   $21 = HEAP32[$2>>2]|0;
   $22 = (_luaM_realloc_($20,$21,$7,$18)|0);
   $$pre$phi$iZ2D = $2;$24 = $22;
  }
  HEAP32[$$pre$phi$iZ2D>>2] = $24;
  HEAP32[$6>>2] = $18;
  $$pre1$i = HEAP32[$3>>2]|0;
  $27 = $$pre1$i;$29 = $24;
 } else {
  $$pre2$i = HEAP32[$2>>2]|0;
  $27 = $4;$29 = $$pre2$i;
 }
 $25 = $0&255;
 $26 = (($27) + 1)|0;
 HEAP32[$3>>2] = $26;
 $28 = (($29) + ($27)|0);
 HEAP8[$28>>0] = $25;
 $30 = (($ls) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + -1)|0;
 HEAP32[$31>>2] = $33;
 $34 = ($32|0)==(0);
 if ($34) {
  $40 = (_luaZ_fill($31)|0);
  $41 = $40;
 } else {
  $35 = (($31) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1|0);
  HEAP32[$35>>2] = $37;
  $38 = HEAP8[$36>>0]|0;
  $39 = $38&255;
  $41 = $39;
 }
 HEAP32[$ls>>2] = $41;
 if ((($41|0) == 13) | (($41|0) == 10)) {
  _inclinenumber($ls);
  label = 15;
 } else {
  $$ph = $41;
 }
 L19: while(1) {
  if ((label|0) == 15) {
   label = 0;
   $$pr = HEAP32[$ls>>2]|0;
   $$ph = $$pr;
  }
  $42 = ($seminfo|0)==(0|0);
  $43 = (($ls) + 64|0);
  $44 = (($ls) + 52|0);
  $45 = (($ls) + 4|0);
  $46 = ($sep|0)==(0);
  $$ph39 = $$ph;
  L23: while(1) {
   L25: do {
    if ($42) {
     $47 = $$ph39;
     while(1) {
      switch ($47|0) {
      case 91:  {
       break L25;
       break;
      }
      case 93:  {
       label = 39;
       break L23;
       break;
      }
      case 13: case 10:  {
       label = 52;
       break L23;
       break;
      }
      case -1:  {
       label = 24;
       break L19;
       break;
      }
      default: {
      }
      }
      $48 = HEAP32[$30>>2]|0;
      $49 = HEAP32[$48>>2]|0;
      $50 = (($49) + -1)|0;
      HEAP32[$48>>2] = $50;
      $51 = ($49|0)==(0);
      if ($51) {
       $57 = (_luaZ_fill($48)|0);
       $58 = $57;
      } else {
       $52 = (($48) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (($53) + 1|0);
       HEAP32[$52>>2] = $54;
       $55 = HEAP8[$53>>0]|0;
       $56 = $55&255;
       $58 = $56;
      }
      HEAP32[$ls>>2] = $58;
      $47 = $58;
     }
    } else {
     $59 = $$ph39;
     while(1) {
      switch ($59|0) {
      case 91:  {
       break L25;
       break;
      }
      case 93:  {
       label = 39;
       break L23;
       break;
      }
      case 13: case 10:  {
       label = 52;
       break L23;
       break;
      }
      case -1:  {
       label = 24;
       break L19;
       break;
      }
      default: {
      }
      }
      $173 = HEAP32[$1>>2]|0;
      $174 = (($173) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = (($175) + 1)|0;
      $177 = (($173) + 8|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($176>>>0)>($178>>>0);
      if ($179) {
       $180 = ($178>>>0)>(2147483645);
       if ($180) {
        label = 65;
        break L19;
       }
       $186 = $178 << 1;
       $187 = ($186|0)==(-2);
       $188 = HEAP32[$44>>2]|0;
       if ($187) {
        $191 = (_luaM_toobig($188)|0);
        $$pre$phi$i30Z2D = $173;$192 = $191;
       } else {
        $189 = HEAP32[$173>>2]|0;
        $190 = (_luaM_realloc_($188,$189,$178,$186)|0);
        $$pre$phi$i30Z2D = $173;$192 = $190;
       }
       HEAP32[$$pre$phi$i30Z2D>>2] = $192;
       HEAP32[$177>>2] = $186;
       $$pre1$i31 = HEAP32[$174>>2]|0;
       $195 = $$pre1$i31;$197 = $192;
      } else {
       $$pre2$i26 = HEAP32[$173>>2]|0;
       $195 = $175;$197 = $$pre2$i26;
      }
      $193 = $59&255;
      $194 = (($195) + 1)|0;
      HEAP32[$174>>2] = $194;
      $196 = (($197) + ($195)|0);
      HEAP8[$196>>0] = $193;
      $198 = HEAP32[$30>>2]|0;
      $199 = HEAP32[$198>>2]|0;
      $200 = (($199) + -1)|0;
      HEAP32[$198>>2] = $200;
      $201 = ($199|0)==(0);
      if ($201) {
       $207 = (_luaZ_fill($198)|0);
       $208 = $207;
      } else {
       $202 = (($198) + 4|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = (($203) + 1|0);
       HEAP32[$202>>2] = $204;
       $205 = HEAP8[$203>>0]|0;
       $206 = $205&255;
       $208 = $206;
      }
      HEAP32[$ls>>2] = $208;
      $59 = $208;
     }
    }
   } while(0);
   $69 = (_skip_sep($ls)|0);
   $70 = ($69|0)==($sep|0);
   if (!($70)) {
    label = 15;
    continue L19;
   }
   $71 = HEAP32[$ls>>2]|0;
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + 1)|0;
   $76 = (($72) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($75>>>0)>($77>>>0);
   if ($78) {
    $79 = ($77>>>0)>(2147483645);
    if ($79) {
     label = 29;
     break L19;
    }
    $85 = $77 << 1;
    $86 = ($85|0)==(-2);
    $87 = HEAP32[$44>>2]|0;
    if ($86) {
     $90 = (_luaM_toobig($87)|0);
     $$pre$phi$i6Z2D = $72;$91 = $90;
    } else {
     $88 = HEAP32[$72>>2]|0;
     $89 = (_luaM_realloc_($87,$88,$77,$85)|0);
     $$pre$phi$i6Z2D = $72;$91 = $89;
    }
    HEAP32[$$pre$phi$i6Z2D>>2] = $91;
    HEAP32[$76>>2] = $85;
    $$pre1$i7 = HEAP32[$73>>2]|0;
    $94 = $$pre1$i7;$96 = $91;
   } else {
    $$pre2$i2 = HEAP32[$72>>2]|0;
    $94 = $74;$96 = $$pre2$i2;
   }
   $92 = $71&255;
   $93 = (($94) + 1)|0;
   HEAP32[$73>>2] = $93;
   $95 = (($96) + ($94)|0);
   HEAP8[$95>>0] = $92;
   $97 = HEAP32[$30>>2]|0;
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + -1)|0;
   HEAP32[$97>>2] = $99;
   $100 = ($98|0)==(0);
   if ($100) {
    $106 = (_luaZ_fill($97)|0);
    $107 = $106;
   } else {
    $101 = (($97) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + 1|0);
    HEAP32[$101>>2] = $103;
    $104 = HEAP8[$102>>0]|0;
    $105 = $104&255;
    $107 = $105;
   }
   HEAP32[$ls>>2] = $107;
   if ($46) {
    label = 38;
    break;
   } else {
    $$ph39 = $107;
   }
  }
  if ((label|0) == 38) {
   label = 0;
   _luaX_lexerror($ls,5080,91);
   label = 15;
   continue;
  }
  else if ((label|0) == 39) {
   label = 0;
   $108 = (_skip_sep($ls)|0);
   $109 = ($108|0)==($sep|0);
   if ($109) {
    label = 40;
    break;
   } else {
    label = 15;
    continue;
   }
  }
  else if ((label|0) == 52) {
   label = 0;
   $147 = HEAP32[$1>>2]|0;
   $148 = (($147) + 4|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) + 1)|0;
   $151 = (($147) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($150>>>0)>($152>>>0);
   if ($153) {
    $154 = ($152>>>0)>(2147483645);
    if ($154) {
     label = 55;
     break;
    }
    $160 = $152 << 1;
    $161 = ($160|0)==(-2);
    $162 = HEAP32[$44>>2]|0;
    if ($161) {
     $165 = (_luaM_toobig($162)|0);
     $$pre$phi$i22Z2D = $147;$166 = $165;
    } else {
     $163 = HEAP32[$147>>2]|0;
     $164 = (_luaM_realloc_($162,$163,$152,$160)|0);
     $$pre$phi$i22Z2D = $147;$166 = $164;
    }
    HEAP32[$$pre$phi$i22Z2D>>2] = $166;
    HEAP32[$151>>2] = $160;
    $$pre1$i23 = HEAP32[$148>>2]|0;
    $168 = $$pre1$i23;$170 = $166;
   } else {
    $$pre2$i18 = HEAP32[$147>>2]|0;
    $168 = $149;$170 = $$pre2$i18;
   }
   $167 = (($168) + 1)|0;
   HEAP32[$148>>2] = $167;
   $169 = (($170) + ($168)|0);
   HEAP8[$169>>0] = 10;
   _inclinenumber($ls);
   if (!($42)) {
    label = 15;
    continue;
   }
   $171 = HEAP32[$1>>2]|0;
   $172 = (($171) + 4|0);
   HEAP32[$172>>2] = 0;
   label = 15;
   continue;
  }
 }
 if ((label|0) == 24) {
  $60 = ($seminfo|0)!=(0|0);
  $61 = $60 ? 5032 : 5056;
  $62 = HEAP32[$43>>2]|0;
  $63 = (($62) + 16|0);
  _luaO_chunkid($buff$i,$63,80);
  $64 = HEAP32[$44>>2]|0;
  $65 = HEAP32[$45>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $buff$i;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $65;
  $vararg_ptr7 = (($vararg_buffer3) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $61;
  $66 = (_luaO_pushfstring($64,4832,$vararg_buffer3)|0);
  $67 = HEAP32[$44>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $66;
  $vararg_ptr11 = (($vararg_buffer8) + 4|0);
  HEAP32[$vararg_ptr11>>2] = 4672;
  (_luaO_pushfstring($67,4848,$vararg_buffer8)|0);
  $68 = HEAP32[$44>>2]|0;
  _luaD_throw($68,3);
  // unreachable;
 }
 else if ((label|0) == 29) {
  $80 = HEAP32[$43>>2]|0;
  $81 = (($80) + 16|0);
  _luaO_chunkid($buff$i34,$81,80);
  $82 = HEAP32[$44>>2]|0;
  $83 = HEAP32[$45>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $buff$i34;
  $vararg_ptr15 = (($vararg_buffer12) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $83;
  $vararg_ptr16 = (($vararg_buffer12) + 8|0);
  HEAP32[$vararg_ptr16>>2] = 4944;
  (_luaO_pushfstring($82,4832,$vararg_buffer12)|0);
  $84 = HEAP32[$44>>2]|0;
  _luaD_throw($84,3);
  // unreachable;
 }
 else if ((label|0) == 40) {
  $110 = HEAP32[$ls>>2]|0;
  $111 = HEAP32[$1>>2]|0;
  $112 = (($111) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + 1)|0;
  $115 = (($111) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114>>>0)>($116>>>0);
  if ($117) {
   $118 = ($116>>>0)>(2147483645);
   if ($118) {
    $119 = HEAP32[$43>>2]|0;
    $120 = (($119) + 16|0);
    _luaO_chunkid($buff$i35,$120,80);
    $121 = HEAP32[$44>>2]|0;
    $122 = HEAP32[$45>>2]|0;
    HEAP32[$vararg_buffer17>>2] = $buff$i35;
    $vararg_ptr20 = (($vararg_buffer17) + 4|0);
    HEAP32[$vararg_ptr20>>2] = $122;
    $vararg_ptr21 = (($vararg_buffer17) + 8|0);
    HEAP32[$vararg_ptr21>>2] = 4944;
    (_luaO_pushfstring($121,4832,$vararg_buffer17)|0);
    $123 = HEAP32[$44>>2]|0;
    _luaD_throw($123,3);
    // unreachable;
   }
   $124 = $116 << 1;
   $125 = ($124|0)==(-2);
   $126 = HEAP32[$44>>2]|0;
   if ($125) {
    $129 = (_luaM_toobig($126)|0);
    $$pre$phi$i14Z2D = $111;$130 = $129;
   } else {
    $127 = HEAP32[$111>>2]|0;
    $128 = (_luaM_realloc_($126,$127,$116,$124)|0);
    $$pre$phi$i14Z2D = $111;$130 = $128;
   }
   HEAP32[$$pre$phi$i14Z2D>>2] = $130;
   HEAP32[$115>>2] = $124;
   $$pre1$i15 = HEAP32[$112>>2]|0;
   $133 = $$pre1$i15;$135 = $130;
  } else {
   $$pre2$i10 = HEAP32[$111>>2]|0;
   $133 = $113;$135 = $$pre2$i10;
  }
  $131 = $110&255;
  $132 = (($133) + 1)|0;
  HEAP32[$112>>2] = $132;
  $134 = (($135) + ($133)|0);
  HEAP8[$134>>0] = $131;
  $136 = HEAP32[$30>>2]|0;
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + -1)|0;
  HEAP32[$136>>2] = $138;
  $139 = ($137|0)==(0);
  if ($139) {
   $145 = (_luaZ_fill($136)|0);
   $146 = $145;
  } else {
   $140 = (($136) + 4|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) + 1|0);
   HEAP32[$140>>2] = $142;
   $143 = HEAP8[$141>>0]|0;
   $144 = $143&255;
   $146 = $144;
  }
  HEAP32[$ls>>2] = $146;
  if ($42) {
   STACKTOP = sp;return;
  }
  $209 = HEAP32[$1>>2]|0;
  $210 = HEAP32[$209>>2]|0;
  $211 = (($sep) + 2)|0;
  $212 = (($210) + ($211)|0);
  $213 = (($209) + 4|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $211 << 1;
  $216 = (($214) - ($215))|0;
  $217 = HEAP32[$44>>2]|0;
  $218 = (_luaS_newlstr($217,$212,$216)|0);
  $219 = (($ls) + 48|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = (($220) + 4|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (_luaH_setstr($217,$222,$218)|0);
  $224 = (($223) + 8|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ($225|0)==(0);
  if ($226) {
   HEAP32[$223>>2] = 1;
   HEAP32[$224>>2] = 1;
   $227 = (($217) + 16|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = (($228) + 68|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($228) + 64|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ($230>>>0)<($232>>>0);
   if (!($233)) {
    _luaC_step($217);
   }
  }
  HEAP32[$seminfo>>2] = $218;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 55) {
  $155 = HEAP32[$43>>2]|0;
  $156 = (($155) + 16|0);
  _luaO_chunkid($buff$i36,$156,80);
  $157 = HEAP32[$44>>2]|0;
  $158 = HEAP32[$45>>2]|0;
  HEAP32[$vararg_buffer22>>2] = $buff$i36;
  $vararg_ptr25 = (($vararg_buffer22) + 4|0);
  HEAP32[$vararg_ptr25>>2] = $158;
  $vararg_ptr26 = (($vararg_buffer22) + 8|0);
  HEAP32[$vararg_ptr26>>2] = 4944;
  (_luaO_pushfstring($157,4832,$vararg_buffer22)|0);
  $159 = HEAP32[$44>>2]|0;
  _luaD_throw($159,3);
  // unreachable;
 }
 else if ((label|0) == 65) {
  $181 = HEAP32[$43>>2]|0;
  $182 = (($181) + 16|0);
  _luaO_chunkid($buff$i37,$182,80);
  $183 = HEAP32[$44>>2]|0;
  $184 = HEAP32[$45>>2]|0;
  HEAP32[$vararg_buffer27>>2] = $buff$i37;
  $vararg_ptr30 = (($vararg_buffer27) + 4|0);
  HEAP32[$vararg_ptr30>>2] = $184;
  $vararg_ptr31 = (($vararg_buffer27) + 8|0);
  HEAP32[$vararg_ptr31>>2] = 4944;
  (_luaO_pushfstring($183,4832,$vararg_buffer27)|0);
  $185 = HEAP32[$44>>2]|0;
  _luaD_throw($185,3);
  // unreachable;
 }
}
function _read_numeral($ls,$seminfo) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 var $$in$i = 0, $$in$i$i = 0, $$in$i4$i = 0, $$pre = 0, $$pre$i22 = 0, $$pre$phi$i10Z2D = 0, $$pre$phi$i18Z2D = 0, $$pre$phi$i29Z2D = 0, $$pre$phi$i37Z2D = 0, $$pre$phi$iZ2D = 0, $$pre1$i = 0, $$pre1$i11 = 0, $$pre1$i19 = 0, $$pre1$i30 = 0, $$pre1$i38 = 0, $$pre2$i = 0, $$pre2$i14 = 0, $$pre2$i25 = 0, $$pre2$i33 = 0, $$pre2$i6 = 0;
 var $$pre48 = 0, $$pre49 = 0, $$pre8$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buff$i = 0;
 var $buff$i40 = 0, $buff$i41 = 0, $buff$i42 = 0, $buff$i43 = 0, $isdigit = 0, $isdigittmp = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $ls$idx$val$idx$val = 0, $ls$idx$val$idx$val$i = 0, $ls$idx$val$idx2 = 0, $ls$idx$val$idx2$val = 0, $ls$idx$val$idx3$i = 0, $ls$idx$val$idx3$val$i = 0, $ls$idx1$val$i = 0, $ls$idx1$val$idx$val$i = 0, $ls$idx1$val$idx2$i = 0, $ls$idx1$val$idx2$val$i = 0, $memchr = 0, $memchr44 = 0;
 var $or$cond = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buff$i43 = sp + 400|0;
 $buff$i42 = sp + 320|0;
 $buff$i41 = sp + 240|0;
 $buff$i40 = sp + 160|0;
 $buff$i = sp + 80|0;
 $0 = (($ls) + 60|0);
 $1 = (($ls) + 64|0);
 $2 = (($ls) + 52|0);
 $3 = (($ls) + 4|0);
 $4 = (($ls) + 56|0);
 $$pre = HEAP32[$ls>>2]|0;
 $26 = $$pre;
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  $9 = (($5) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8>>>0)>($10>>>0);
  if ($11) {
   $12 = ($10>>>0)>(2147483645);
   if ($12) {
    label = 5;
    break;
   }
   $18 = $10 << 1;
   $19 = ($18|0)==(-2);
   $20 = HEAP32[$2>>2]|0;
   if ($19) {
    $23 = (_luaM_toobig($20)|0);
    $$pre$phi$iZ2D = $5;$24 = $23;
   } else {
    $21 = HEAP32[$5>>2]|0;
    $22 = (_luaM_realloc_($20,$21,$10,$18)|0);
    $$pre$phi$iZ2D = $5;$24 = $22;
   }
   HEAP32[$$pre$phi$iZ2D>>2] = $24;
   HEAP32[$9>>2] = $18;
   $$pre1$i = HEAP32[$6>>2]|0;
   $28 = $$pre1$i;$30 = $24;
  } else {
   $$pre2$i = HEAP32[$5>>2]|0;
   $28 = $7;$30 = $$pre2$i;
  }
  $25 = $26&255;
  $27 = (($28) + 1)|0;
  HEAP32[$6>>2] = $27;
  $29 = (($30) + ($28)|0);
  HEAP8[$29>>0] = $25;
  $31 = HEAP32[$4>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[$31>>2] = $33;
  $34 = ($32|0)==(0);
  if ($34) {
   $40 = (_luaZ_fill($31)|0);
   $41 = $40;
  } else {
   $35 = (($31) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 1|0);
   HEAP32[$35>>2] = $37;
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $41 = $39;
  }
  HEAP32[$ls>>2] = $41;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  $42 = ($41|0)==(46);
  $or$cond = $isdigit | $42;
  if ($or$cond) {
   $26 = $41;
  } else {
   break;
  }
 }
 if ((label|0) == 5) {
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) + 16|0);
  _luaO_chunkid($buff$i,$14,80);
  $15 = HEAP32[$2>>2]|0;
  $16 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $buff$i;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 4944;
  (_luaO_pushfstring($15,4832,$vararg_buffer)|0);
  $17 = HEAP32[$2>>2]|0;
  _luaD_throw($17,3);
  // unreachable;
 }
 $memchr = (_memchr(4904,$41,3)|0);
 $43 = ($memchr|0)==(0|0);
 if ($43) {
  $215 = $41;
 } else {
  $44 = HEAP32[$0>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  $48 = (($44) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47>>>0)>($49>>>0);
  if ($50) {
   $51 = ($49>>>0)>(2147483645);
   if ($51) {
    $52 = HEAP32[$1>>2]|0;
    $53 = (($52) + 16|0);
    _luaO_chunkid($buff$i42,$53,80);
    $54 = HEAP32[$2>>2]|0;
    $55 = HEAP32[$3>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $buff$i42;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $55;
    $vararg_ptr7 = (($vararg_buffer3) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 4944;
    (_luaO_pushfstring($54,4832,$vararg_buffer3)|0);
    $56 = HEAP32[$2>>2]|0;
    _luaD_throw($56,3);
    // unreachable;
   }
   $57 = $49 << 1;
   $58 = ($57|0)==(-2);
   $59 = HEAP32[$2>>2]|0;
   if ($58) {
    $62 = (_luaM_toobig($59)|0);
    $$pre$phi$i29Z2D = $44;$63 = $62;
   } else {
    $60 = HEAP32[$44>>2]|0;
    $61 = (_luaM_realloc_($59,$60,$49,$57)|0);
    $$pre$phi$i29Z2D = $44;$63 = $61;
   }
   HEAP32[$$pre$phi$i29Z2D>>2] = $63;
   HEAP32[$48>>2] = $57;
   $$pre1$i30 = HEAP32[$45>>2]|0;
   $66 = $$pre1$i30;$68 = $63;
  } else {
   $$pre2$i25 = HEAP32[$44>>2]|0;
   $66 = $46;$68 = $$pre2$i25;
  }
  $64 = $41&255;
  $65 = (($66) + 1)|0;
  HEAP32[$45>>2] = $65;
  $67 = (($68) + ($66)|0);
  HEAP8[$67>>0] = $64;
  $69 = HEAP32[$4>>2]|0;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + -1)|0;
  HEAP32[$69>>2] = $71;
  $72 = ($70|0)==(0);
  if ($72) {
   $78 = (_luaZ_fill($69)|0);
   $79 = $78;
  } else {
   $73 = (($69) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + 1|0);
   HEAP32[$73>>2] = $75;
   $76 = HEAP8[$74>>0]|0;
   $77 = $76&255;
   $79 = $77;
  }
  HEAP32[$ls>>2] = $79;
  $memchr44 = (_memchr(4912,$79,3)|0);
  $80 = ($memchr44|0)==(0|0);
  if ($80) {
   $215 = $79;
  } else {
   $81 = HEAP32[$0>>2]|0;
   $82 = (($81) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + 1)|0;
   $85 = (($81) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($84>>>0)>($86>>>0);
   if ($87) {
    $88 = ($86>>>0)>(2147483645);
    if ($88) {
     $89 = HEAP32[$1>>2]|0;
     $90 = (($89) + 16|0);
     _luaO_chunkid($buff$i43,$90,80);
     $91 = HEAP32[$2>>2]|0;
     $92 = HEAP32[$3>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $buff$i43;
     $vararg_ptr11 = (($vararg_buffer8) + 4|0);
     HEAP32[$vararg_ptr11>>2] = $92;
     $vararg_ptr12 = (($vararg_buffer8) + 8|0);
     HEAP32[$vararg_ptr12>>2] = 4944;
     (_luaO_pushfstring($91,4832,$vararg_buffer8)|0);
     $93 = HEAP32[$2>>2]|0;
     _luaD_throw($93,3);
     // unreachable;
    }
    $94 = $86 << 1;
    $95 = ($94|0)==(-2);
    $96 = HEAP32[$2>>2]|0;
    if ($95) {
     $99 = (_luaM_toobig($96)|0);
     $$pre$phi$i37Z2D = $81;$100 = $99;
    } else {
     $97 = HEAP32[$81>>2]|0;
     $98 = (_luaM_realloc_($96,$97,$86,$94)|0);
     $$pre$phi$i37Z2D = $81;$100 = $98;
    }
    HEAP32[$$pre$phi$i37Z2D>>2] = $100;
    HEAP32[$85>>2] = $94;
    $$pre1$i38 = HEAP32[$82>>2]|0;
    $103 = $$pre1$i38;$105 = $100;
   } else {
    $$pre2$i33 = HEAP32[$81>>2]|0;
    $103 = $83;$105 = $$pre2$i33;
   }
   $101 = $79&255;
   $102 = (($103) + 1)|0;
   HEAP32[$82>>2] = $102;
   $104 = (($105) + ($103)|0);
   HEAP8[$104>>0] = $101;
   $106 = HEAP32[$4>>2]|0;
   $107 = HEAP32[$106>>2]|0;
   $108 = (($107) + -1)|0;
   HEAP32[$106>>2] = $108;
   $109 = ($107|0)==(0);
   if ($109) {
    $115 = (_luaZ_fill($106)|0);
    $116 = $115;
   } else {
    $110 = (($106) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + 1|0);
    HEAP32[$110>>2] = $112;
    $113 = HEAP8[$111>>0]|0;
    $114 = $113&255;
    $116 = $114;
   }
   HEAP32[$ls>>2] = $116;
   $215 = $116;
  }
 }
 $117 = $215;
 while(1) {
  $118 = (_isalnum($117)|0);
  $119 = ($118|0)==(0);
  $120 = HEAP32[$ls>>2]|0;
  if ($119) {
   $121 = ($120|0)==(95);
   if ($121) {
    $146 = 95;
   } else {
    break;
   }
  } else {
   $phitmp = $120&255;
   $146 = $phitmp;
  }
  $122 = HEAP32[$0>>2]|0;
  $123 = (($122) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + 1)|0;
  $126 = (($122) + 8|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125>>>0)>($127>>>0);
  if ($128) {
   $129 = ($127>>>0)>(2147483645);
   if ($129) {
    label = 46;
    break;
   }
   $135 = $127 << 1;
   $136 = ($135|0)==(-2);
   $137 = HEAP32[$2>>2]|0;
   if ($136) {
    $140 = (_luaM_toobig($137)|0);
    $$pre$phi$i10Z2D = $122;$141 = $140;
   } else {
    $138 = HEAP32[$122>>2]|0;
    $139 = (_luaM_realloc_($137,$138,$127,$135)|0);
    $$pre$phi$i10Z2D = $122;$141 = $139;
   }
   HEAP32[$$pre$phi$i10Z2D>>2] = $141;
   HEAP32[$126>>2] = $135;
   $$pre1$i11 = HEAP32[$123>>2]|0;
   $143 = $$pre1$i11;$145 = $141;
  } else {
   $$pre2$i6 = HEAP32[$122>>2]|0;
   $143 = $124;$145 = $$pre2$i6;
  }
  $142 = (($143) + 1)|0;
  HEAP32[$123>>2] = $142;
  $144 = (($145) + ($143)|0);
  HEAP8[$144>>0] = $146;
  $147 = HEAP32[$4>>2]|0;
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + -1)|0;
  HEAP32[$147>>2] = $149;
  $150 = ($148|0)==(0);
  if ($150) {
   $156 = (_luaZ_fill($147)|0);
   $157 = $156;
  } else {
   $151 = (($147) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($152) + 1|0);
   HEAP32[$151>>2] = $153;
   $154 = HEAP8[$152>>0]|0;
   $155 = $154&255;
   $157 = $155;
  }
  HEAP32[$ls>>2] = $157;
  $117 = $157;
 }
 if ((label|0) == 46) {
  $130 = HEAP32[$1>>2]|0;
  $131 = (($130) + 16|0);
  _luaO_chunkid($buff$i40,$131,80);
  $132 = HEAP32[$2>>2]|0;
  $133 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $buff$i40;
  $vararg_ptr16 = (($vararg_buffer13) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $133;
  $vararg_ptr17 = (($vararg_buffer13) + 8|0);
  HEAP32[$vararg_ptr17>>2] = 4944;
  (_luaO_pushfstring($132,4832,$vararg_buffer13)|0);
  $134 = HEAP32[$2>>2]|0;
  _luaD_throw($134,3);
  // unreachable;
 }
 $158 = HEAP32[$0>>2]|0;
 $159 = (($158) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + 1)|0;
 $162 = (($158) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($161>>>0)>($163>>>0);
 if ($164) {
  $165 = ($163>>>0)>(2147483645);
  if ($165) {
   $166 = HEAP32[$1>>2]|0;
   $167 = (($166) + 16|0);
   _luaO_chunkid($buff$i41,$167,80);
   $168 = HEAP32[$2>>2]|0;
   $169 = HEAP32[$3>>2]|0;
   HEAP32[$vararg_buffer18>>2] = $buff$i41;
   $vararg_ptr21 = (($vararg_buffer18) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $169;
   $vararg_ptr22 = (($vararg_buffer18) + 8|0);
   HEAP32[$vararg_ptr22>>2] = 4944;
   (_luaO_pushfstring($168,4832,$vararg_buffer18)|0);
   $170 = HEAP32[$2>>2]|0;
   _luaD_throw($170,3);
   // unreachable;
  }
  $171 = $163 << 1;
  $172 = ($171|0)==(-2);
  $173 = HEAP32[$2>>2]|0;
  if ($172) {
   $176 = (_luaM_toobig($173)|0);
   $$pre$phi$i18Z2D = $158;$177 = $176;
  } else {
   $174 = HEAP32[$158>>2]|0;
   $175 = (_luaM_realloc_($173,$174,$163,$171)|0);
   $$pre$phi$i18Z2D = $158;$177 = $175;
  }
  HEAP32[$$pre$phi$i18Z2D>>2] = $177;
  HEAP32[$162>>2] = $171;
  $$pre1$i19 = HEAP32[$159>>2]|0;
  $179 = $$pre1$i19;$181 = $177;
 } else {
  $$pre2$i14 = HEAP32[$158>>2]|0;
  $179 = $160;$181 = $$pre2$i14;
 }
 $178 = (($179) + 1)|0;
 HEAP32[$159>>2] = $178;
 $180 = (($181) + ($179)|0);
 HEAP8[$180>>0] = 0;
 $182 = (($ls) + 68|0);
 $183 = HEAP8[$182>>0]|0;
 $ls$idx$val = HEAP32[$0>>2]|0;
 $ls$idx$val$idx$val = HEAP32[$ls$idx$val>>2]|0;
 $ls$idx$val$idx2 = (($ls$idx$val) + 4|0);
 $ls$idx$val$idx2$val = HEAP32[$ls$idx$val$idx2>>2]|0;
 $184 = ($ls$idx$val$idx2$val|0)==(0);
 if ($184) {
  $190 = $ls$idx$val$idx$val;
 } else {
  $$in$i = $ls$idx$val$idx2$val;
  while(1) {
   $185 = (($$in$i) + -1)|0;
   $186 = (($ls$idx$val$idx$val) + ($185)|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = ($187<<24>>24)==(46);
   if ($188) {
    HEAP8[$186>>0] = $183;
   }
   $189 = ($185|0)==(0);
   if ($189) {
    break;
   } else {
    $$in$i = $185;
   }
  }
  $$pre48 = HEAP32[$0>>2]|0;
  $$pre49 = HEAP32[$$pre48>>2]|0;
  $190 = $$pre49;
 }
 $191 = (_luaO_str2d($190,$seminfo)|0);
 $192 = ($191|0)==(0);
 if (!($192)) {
  STACKTOP = sp;return;
 }
 $193 = (_localeconv()|0);
 $194 = HEAP8[$182>>0]|0;
 $195 = ($193|0)==(0|0);
 if ($195) {
  $198 = 46;
 } else {
  $196 = HEAP32[$193>>2]|0;
  $197 = HEAP8[$196>>0]|0;
  $198 = $197;
 }
 HEAP8[$182>>0] = $198;
 $ls$idx1$val$i = HEAP32[$0>>2]|0;
 $ls$idx1$val$idx$val$i = HEAP32[$ls$idx1$val$i>>2]|0;
 $ls$idx1$val$idx2$i = (($ls$idx1$val$i) + 4|0);
 $ls$idx1$val$idx2$val$i = HEAP32[$ls$idx1$val$idx2$i>>2]|0;
 $199 = ($ls$idx1$val$idx2$val$i|0)==(0);
 if ($199) {
  $205 = $ls$idx1$val$idx$val$i;
 } else {
  $$in$i$i = $ls$idx1$val$idx2$val$i;
  while(1) {
   $200 = (($$in$i$i) + -1)|0;
   $201 = (($ls$idx1$val$idx$val$i) + ($200)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = ($202<<24>>24)==($194<<24>>24);
   if ($203) {
    HEAP8[$201>>0] = $198;
   }
   $204 = ($200|0)==(0);
   if ($204) {
    break;
   } else {
    $$in$i$i = $200;
   }
  }
  $$pre$i22 = HEAP32[$0>>2]|0;
  $$pre8$i = HEAP32[$$pre$i22>>2]|0;
  $205 = $$pre8$i;
 }
 $206 = (_luaO_str2d($205,$seminfo)|0);
 $207 = ($206|0)==(0);
 if (!($207)) {
  STACKTOP = sp;return;
 }
 $208 = HEAP8[$182>>0]|0;
 $ls$idx$val$i = HEAP32[$0>>2]|0;
 $ls$idx$val$idx$val$i = HEAP32[$ls$idx$val$i>>2]|0;
 $ls$idx$val$idx3$i = (($ls$idx$val$i) + 4|0);
 $ls$idx$val$idx3$val$i = HEAP32[$ls$idx$val$idx3$i>>2]|0;
 $209 = ($ls$idx$val$idx3$val$i|0)==(0);
 if (!($209)) {
  $$in$i4$i = $ls$idx$val$idx3$val$i;
  while(1) {
   $210 = (($$in$i4$i) + -1)|0;
   $211 = (($ls$idx$val$idx$val$i) + ($210)|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = ($212<<24>>24)==($208<<24>>24);
   if ($213) {
    HEAP8[$211>>0] = 46;
   }
   $214 = ($210|0)==(0);
   if ($214) {
    break;
   } else {
    $$in$i4$i = $210;
   }
  }
 }
 _luaX_lexerror($ls,4920,284);
 STACKTOP = sp;return;
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $isdigittmp = (($c) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  $3 = $isdigit;
 } else {
  $3 = 1;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function _iscntrl($c) {
 $c = $c|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(32);
 $1 = ($c|0)==(127);
 $$ = $0 | $1;
 $2 = $$&1;
 STACKTOP = sp;return ($2|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _strcoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01$lcssa = 0, $$019 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond4 = 0, $w$0$lcssa = 0, $w$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$01$lcssa = $s;
  } else {
   $5 = $c&255;
   $$019 = $s;
   while(1) {
    $12 = HEAP8[$$019>>0]|0;
    $13 = ($12<<24>>24)==(0);
    $14 = ($12<<24>>24)==($5<<24>>24);
    $or$cond = $13 | $14;
    $8 = (($$019) + 1|0);
    if ($or$cond) {
     $$0 = $$019;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$01$lcssa = $8;
     break L5;
    } else {
     $$019 = $8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$01$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $30 = $16;$w$05 = $$01$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$05) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$05;
     break L12;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$05 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$01$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond4 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond4) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$016 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$016 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div3 = ($13&255) >>> 5;
    $16 = $div3&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$016) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$016 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$02$lcssa = $s;
    } else {
     $$024 = $s;$26 = $10;
     while(1) {
      $div = ($26&255) >>> 5;
      $27 = $div&255;
      $28 = (($byteset) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $26 & 31;
      $31 = $30&255;
      $32 = 1 << $31;
      $33 = $29 & $32;
      $34 = ($33|0)==(0);
      $24 = (($$024) + 1|0);
      if (!($34)) {
       $$02$lcssa = $$024;
       break L7;
      }
      $23 = HEAP8[$24>>0]|0;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       $$02$lcssa = $24;
       break;
      } else {
       $$024 = $24;$26 = $23;
      }
     }
    }
   } while(0);
   $35 = $$02$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = (($$023) + 1|0);
    $7 = (($$05) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 STACKTOP = sp;return ($d|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[5152>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((5152 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((5152 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[5152>>2] = $22;
     } else {
      $23 = HEAP32[((5152 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((5152 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((5152 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((5152 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[5152>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((5152 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((5152 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((5152 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((5152 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[5152>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[5152>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((5152 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((5152 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((5152 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((5152 + 8|0))>>2] = $81;
     HEAP32[((5152 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((5152 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((5152 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((5152 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((5152 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((5152 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((5152 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((5152 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((5152 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((5152 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((5152 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((5152 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((5152 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[5152>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[5152>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((5152 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((5152 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((5152 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((5152 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((5152 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((5152 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((5152 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((5152 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((5152 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((5152 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((5152 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((5152 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((5152 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((5152 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((5152 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((5152 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((5152 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[5152>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[5152>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((5152 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((5152 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((5152 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((5152 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((5152 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((5152 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L108: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L108;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((5152 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L87;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((5152 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((5152 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((5152 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((5152 + 20|0))>>2] = $514;
   HEAP32[((5152 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((5152 + 8|0))>>2] = 0;
   HEAP32[((5152 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((5152 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((5152 + 12|0))>>2] = $528;
  $529 = HEAP32[((5152 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((5152 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[5624>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((5624 + 8|0))>>2] = $538;
    HEAP32[((5624 + 4|0))>>2] = $538;
    HEAP32[((5624 + 12|0))>>2] = -1;
    HEAP32[((5624 + 16|0))>>2] = -1;
    HEAP32[((5624 + 20|0))>>2] = 0;
    HEAP32[((5152 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[5624>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((5624 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((5152 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((5152 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((5152 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((5152 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((5152 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((5152 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((5624 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((5152 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((5152 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((5624 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((5152 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((5152 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((5152 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((5152 + 432|0))>>2] = $633;
  $634 = HEAP32[((5152 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((5152 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((5152 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((5152 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((5152 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((5152 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((5152 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((5152 + 460|0))>>2] = 0;
    $641 = HEAP32[5624>>2]|0;
    HEAP32[((5152 + 36|0))>>2] = $641;
    HEAP32[((5152 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((5152 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((5152 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((5152 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((5152 + 24|0))>>2] = $654;
    HEAP32[((5152 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((5624 + 16|0))>>2]|0;
    HEAP32[((5152 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((5152 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((5152 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((5152 + 24|0))>>2] = $684;
       HEAP32[((5152 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((5624 + 16|0))>>2]|0;
       HEAP32[((5152 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((5152 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((5152 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((5152 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((5152 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((5152 + 12|0))>>2] = $731;
        HEAP32[((5152 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((5152 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((5152 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((5152 + 8|0))>>2] = $737;
         HEAP32[((5152 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L352: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((5152 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[5152>>2]|0;
            $764 = $763 & $762;
            HEAP32[5152>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((5152 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((5152 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((5152 + 4|0))>>2] = $807;
             break L352;
            } else {
             $808 = HEAP32[((5152 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L352;
             }
            }
           } while(0);
           $815 = HEAP32[((5152 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((5152 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((5152 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[5152>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[5152>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((5152 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((5152 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((5152 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((5152 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((5152 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((5152 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L441: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L441;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((5152 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((5152 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((5152 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((5152 + 24|0))>>2] = $953;
    HEAP32[((5152 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((5624 + 16|0))>>2]|0;
    HEAP32[((5152 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((5152 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((5152 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((5152 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((5152 + 448|0))+12>>2]|0;
    HEAP32[((5152 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((5152 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((5152 + 460|0))>>2] = 0;
    HEAP32[((5152 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((5152 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[5152>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[5152>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((5152 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((5152 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((5152 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((5152 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((5152 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((5152 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((5152 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((5152 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((5152 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((5152 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((5152 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((5152 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((5152 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((5152 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((5152 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((5152 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[5152>>2]|0;
     $36 = $35 & $34;
     HEAP32[5152>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((5152 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((5152 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((5152 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((5152 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((5152 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((5152 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((5152 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((5152 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((5152 + 12|0))>>2] = $120;
   HEAP32[((5152 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((5152 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((5152 + 20|0))>>2] = 0;
   HEAP32[((5152 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((5152 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((5152 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((5152 + 8|0))>>2] = $128;
   HEAP32[((5152 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((5152 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((5152 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[5152>>2]|0;
     $152 = $151 & $150;
     HEAP32[5152>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((5152 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((5152 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((5152 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((5152 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((5152 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((5152 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((5152 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((5152 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((5152 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((5152 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((5152 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((5152 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[5152>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[5152>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((5152 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((5152 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((5152 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((5152 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((5152 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((5152 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L204: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L204;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((5152 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((5152 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((5152 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((5152 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((5152 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((5152 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$125 = 0, $$126 = 0, $$base24 = 0, $$lcssa = 0, $$sum = 0, $$sum17 = 0, $$sum1737 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum2155 = 0, $$sum22 = 0, $$sum23 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$127 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$362 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$747 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $x$073 = 0, $x$138 = 0, $x$256 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  STACKTOP = sp;return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$126 = 8;$c$127 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum23 = (($46) + 1)|0;
   $47 = (5648 + ($$sum23)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   } else {
    $$126 = 16;$c$127 = $46;
    label = 46;
   }
  } else {
   $$base24 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (5648 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base24>>>0);
   if ($60) {
    $$1 = $$base24;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$073 = 0;
    while(1) {
     $69 = ($x$073*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $or$cond7 = $80 & $81;
     if ($or$cond7) {
      $71 = $79;$x$073 = $70;
     } else {
      break;
     }
    }
    $281 = $70;$282 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$88 = $82;$c$362 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $89 = ($88|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $88 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $88;$283 = $84;$284 = $85;$c$3$lcssa = $c$362;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($88|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond9 = $108 & $113;
     if ($or$cond9) {
      $84 = $98;$85 = $99;$88 = $107;$c$362 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $252 = $284;$254 = $283;
    } else {
     $$125 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $252 = $282;$254 = $281;
   }
  } else {
   $$126 = $$1;$c$127 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $115 = (($$126) + -1)|0;
   $116 = $115 & $$126;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$126*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (5912 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1737 = (($c$127) + 1)|0;
    $128 = (5648 + ($$sum1737)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$126>>>0);
    if ($131) {
     $134 = $130;$x$138 = 0;
     while(1) {
      $132 = $x$138 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum17 = (($c$4$be) + 1)|0;
      $142 = (5648 + ($$sum17)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$126>>>0);
      $146 = ($133>>>0)<(134217728);
      $or$cond11 = $145 & $146;
      if ($or$cond11) {
       $134 = $144;$x$138 = $133;
      } else {
       break;
      }
     }
     $150 = $143;$152 = 0;$154 = $133;$c$4$lcssa = $c$4$be;
    } else {
     $150 = $129;$152 = 0;$154 = 0;$c$4$lcssa = $c$127;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$126>>>0);
    $153 = ($152>>>0)>($148>>>0);
    $155 = ($154>>>0)>($147>>>0);
    $156 = ($152|0)==($148|0);
    $157 = $156 & $155;
    $158 = $153 | $157;
    $or$cond31 = $151 | $158;
    if ($or$cond31) {
     $$125 = $$126;$285 = $154;$286 = $152;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $159 = $154;$160 = $152;$164 = $150;
    }
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum18 = (($c$5$be) + 1)|0;
     $173 = (5648 + ($$sum18)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$126>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $$125 = $$126;$285 = $165;$286 = $162;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
   }
   $$sum2155 = (($c$127) + 1)|0;
   $118 = (5648 + ($$sum2155)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$126>>>0);
   if ($121) {
    $184 = $120;$x$256 = 0;
    while(1) {
     $182 = Math_imul($x$256, $$126)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum21 = (($c$6$be) + 1)|0;
     $192 = (5648 + ($$sum21)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$126>>>0);
     $196 = ($183>>>0)<(119304647);
     $or$cond13 = $195 & $196;
     if ($or$cond13) {
      $184 = $194;$x$256 = $183;
     } else {
      break;
     }
    }
    $198 = $193;$287 = $183;$288 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$127;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$126>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$126|0),0)|0);
    $201 = tempRet0;
    $202 = $288;$204 = $287;$212 = $198;$c$747 = $c$6$lcssa;
    while(1) {
     $203 = ($202>>>0)>($201>>>0);
     $205 = ($204>>>0)>($200>>>0);
     $206 = ($202|0)==($201|0);
     $207 = $206 & $205;
     $208 = $203 | $207;
     if ($208) {
      $$125 = $$126;$285 = $204;$286 = $202;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $209 = (___muldi3(($204|0),($202|0),($$126|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $$125 = $$126;$285 = $204;$286 = $202;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum22 = (($c$7$be) + 1)|0;
     $228 = (5648 + ($$sum22)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$126>>>0);
     if ($231) {
      $202 = $220;$204 = $219;$212 = $229;$c$747 = $c$7$be;
     } else {
      $$125 = $$126;$285 = $219;$286 = $220;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$125 = $$126;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum19 = (($c$8) + 1)|0;
  $232 = (5648 + ($$sum19)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$125>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum20 = (($c$9$be) + 1)|0;
    $243 = (5648 + ($$sum20)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$125>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $252 = $1;$254 = $0;
  } else {
   $252 = $286;$254 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $253 = ($252>>>0)<($1>>>0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = ($252|0)==($1|0);
 $257 = $256 & $255;
 $258 = $253 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond15 = $262 | $263;
  if (!($or$cond15)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
  $267 = ($252>>>0)>($1>>>0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = ($252|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $254 ^ $neg$0;
 $276 = $252 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 STACKTOP = sp;return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$011$i = 0, $$012$i = 0, $$01231$i = 0, $$01232$i = 0, $$06$i = 0, $$0611$i = 0, $$0612$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$13$i = 0, $$2$i = 0, $$20$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3120$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa60$i = 0;
 var $$lnz$0$i = 0, $$neg37$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us70$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0;
 var $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0;
 var $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa182$i = 0, $a$078$i = 0, $a$1$i = 0, $a$2$ph57$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$444$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge = 0;
 var $brmerge108 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$171 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$369 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$080$i = 0, $carry1$0$us$i = 0, $carry1$0$us66$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us71$i = 0, $carry3$047$i = 0;
 var $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$029$i = 0, $denormal$030$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us61$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i11 = 0, $gotdig$2$i = 0, $gotdig$2$i12 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3116$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i13 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1117$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$042$i = 0, $i$070 = 0;
 var $i$1 = 0, $i$1$i = 0, $i$268 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$0108$i = 0, $j$0109$i = 0, $j$0110$i = 0, $j$0119$i = 0, $j$2$i = 0, $j$388$i = 0, $k$0$lcssa$i = 0, $k$0104$i = 0, $k$0105$i = 0, $k$0106$i = 0, $k$0118$i = 0, $k$2$i = 0, $k$3$i = 0, $k$479$i = 0;
 var $k$5$in$us$i = 0, $k$5$in$us65$i = 0, $k$5$us$i = 0, $k$5$us67$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us73$i = 0, $k$645$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0115$i = 0, $lnz$098$i = 0, $lnz$099$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond10$i = 0, $or$cond112$i = 0;
 var $or$cond15$i = 0, $or$cond17$i = 0, $or$cond18$i = 0, $or$cond187$i = 0, $or$cond19$us$i = 0, $or$cond19$us72$i = 0, $or$cond21$i = 0, $or$cond22$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond5 = 0, $or$cond5$i = 0, $or$cond5$i17 = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond8$i20 = 0, $or$cond9$not = 0, $rp$0$lcssa183$i = 0, $rp$077$i = 0, $rp$1$i19 = 0;
 var $rp$2$ph55$i = 0, $rp$3$i$ph = 0, $rp$3$ph50$i = 0, $rp$443$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$318$i = 0, $x$4$lcssa$i = 0, $x$413$i = 0, $x$5$i = 0, $x$6$i = 0;
 var $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$314$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph56$i = 0, $z$1$us$i = 0, $z$1$us62$i = 0, $z$2$us$i = 0, $z$2$us64$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us74$i = 0;
 var $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$171 = $c$0;$i$070 = 0;
 while(1) {
  $23 = $c$171 | 32;
  $24 = (5928 + ($i$070)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$171;$i$0$lcssa = $i$070;
   break;
  }
  $28 = ($i$070>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$171;
   }
  } while(0);
  $36 = (($i$070) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$171 = $c$2;$i$070 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($51) {
     $c$369 = $c$1$lcssa;$i$268 = 0;
     while(1) {
      $52 = $c$369 | 32;
      $53 = (5944 + ($i$268)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($52|0)==($55|0);
      if (!($56)) {
       $c$5 = $c$369;$i$3 = $i$268;
       break L34;
      }
      $57 = ($i$268>>>0)<(2);
      do {
       if ($57) {
        $58 = HEAP32[$0>>2]|0;
        $59 = HEAP32[$1>>2]|0;
        $60 = ($58>>>0)<($59>>>0);
        if ($60) {
         $61 = (($58) + 1|0);
         HEAP32[$0>>2] = $61;
         $62 = HEAP8[$58>>0]|0;
         $63 = $62&255;
         $c$4 = $63;
         break;
        } else {
         $64 = (___shgetc($f)|0);
         $c$4 = $64;
         break;
        }
       } else {
        $c$4 = $c$369;
       }
      } while(0);
      $65 = (($i$268) + 1)|0;
      $66 = ($65>>>0)<(3);
      if ($66) {
       $c$369 = $c$4;$i$268 = $65;
      } else {
       $c$5 = $c$4;$i$3 = $65;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $74 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $74 = $73;
    }
    $75 = ($74|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($88|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4|0)==(0);
    $brmerge108 = $100 | $97;
    if ($brmerge108) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      $$0 = nan;
      break;
     } else {
      $$in = $102;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $322 = HEAP32[$1>>2]|0;
       $323 = ($322|0)==(0|0);
       if ($323) {
        $c$6 = 48;
        break;
       }
       $324 = HEAP32[$0>>2]|0;
       $325 = (($324) + -1|0);
       HEAP32[$0>>2] = $325;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i = $128;$gotdig$0$i = 0;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i = $129;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $167 = 0;$169 = 0;$211 = 0;$213 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i = $135;$gotdig$0$i = 1;
        continue;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       }
      }
      if ((label|0) == 70) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $156 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $156 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $157 = ($156|0)==(48);
         if ($157) {
          $152 = $154;$153 = $155;
         } else {
          $167 = 0;$169 = 0;$211 = $154;$213 = $155;$c$2$i = $156;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break;
         }
        }
       } else {
        $167 = 0;$169 = 0;$211 = 0;$213 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
       }
      }
      L119: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 83;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond$i = $162 | $163;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L119;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $713 = $169;$714 = $167;$715 = $169;$716 = $167;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L119;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 83;
          break;
         }
        }
       } while(0);
       if ((label|0) == 83) {
        label = 0;
        $168 = ($167|0)<(0);
        $170 = ($169>>>0)<(8);
        $171 = ($167|0)==(0);
        $172 = $171 & $170;
        $173 = $168 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($167|0)<(0);
          $177 = ($169>>>0)<(14);
          $178 = ($167|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond3$i = $185 | $186;
          if ($or$cond3$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($169|0),($167|0),1,0)|0);
        $190 = tempRet0;
        $713 = $211;$714 = $213;$715 = $189;$716 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $167 = $716;$169 = $715;$211 = $713;$213 = $714;$c$2$i = $196;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $197 = (___shgetc($f)|0);
        $167 = $716;$169 = $715;$211 = $713;$213 = $714;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $198 = ($gotdig$2$i|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $212 = $210 ? $169 : $211;
      $214 = $210 ? $167 : $213;
      $215 = ($167|0)<(0);
      $216 = ($169>>>0)<(8);
      $217 = ($167|0)==(0);
      $218 = $217 & $216;
      $219 = $215 | $218;
      if ($219) {
       $221 = $169;$222 = $167;$x$318$i = $x$0$i;
       while(1) {
        $220 = $x$318$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($223>>>0)<(8);
        $227 = ($224|0)==(0);
        $228 = $227 & $226;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$318$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         $237 = ($pok|0)==(0);
         if ($237) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $238 = HEAP32[$1>>2]|0;
          $239 = ($238|0)==(0|0);
          if ($239) {
           $250 = 0;$251 = 0;
           break;
          }
          $240 = HEAP32[$0>>2]|0;
          $241 = (($240) + -1|0);
          HEAP32[$0>>2] = $241;
          $250 = 0;$251 = 0;
          break;
         }
        } else {
         $250 = $232;$251 = $233;
        }
       } else {
        $242 = HEAP32[$1>>2]|0;
        $243 = ($242|0)==(0|0);
        if ($243) {
         $250 = 0;$251 = 0;
        } else {
         $244 = HEAP32[$0>>2]|0;
         $245 = (($244) + -1|0);
         HEAP32[$0>>2] = $245;
         $250 = 0;$251 = 0;
        }
       }
      } while(0);
      $246 = (_bitshift64Shl(($212|0),($214|0),2)|0);
      $247 = tempRet0;
      $248 = (_i64Add(($246|0),($247|0),-32,-1)|0);
      $249 = tempRet0;
      $252 = (_i64Add(($248|0),($249|0),($250|0),($251|0))|0);
      $253 = tempRet0;
      $254 = ($x$3$lcssa$i|0)==(0);
      if ($254) {
       $255 = (+($sign$0|0));
       $256 = $255 * 0.0;
       $$0 = $256;
       STACKTOP = sp;return (+$$0);
      }
      $257 = (0 - ($emin$0$ph))|0;
      $258 = ($253|0)>(0);
      $259 = ($252>>>0)>($257>>>0);
      $260 = ($253|0)==(0);
      $261 = $260 & $259;
      $262 = $258 | $261;
      if ($262) {
       $263 = (___errno_location()|0);
       HEAP32[$263>>2] = 34;
       $264 = (+($sign$0|0));
       $265 = $264 * 1.7976931348623157E+308;
       $266 = $265 * 1.7976931348623157E+308;
       $$0 = $266;
       STACKTOP = sp;return (+$$0);
      }
      $267 = (($emin$0$ph) + -106)|0;
      $268 = ($267|0)<(0);
      $269 = $268 << 31 >> 31;
      $270 = ($253|0)<($269|0);
      $271 = ($252>>>0)<($267>>>0);
      $272 = ($253|0)==($269|0);
      $273 = $272 & $271;
      $274 = $270 | $273;
      if ($274) {
       $276 = (___errno_location()|0);
       HEAP32[$276>>2] = 34;
       $277 = (+($sign$0|0));
       $278 = $277 * 2.2250738585072014E-308;
       $279 = $278 * 2.2250738585072014E-308;
       $$0 = $279;
       STACKTOP = sp;return (+$$0);
      }
      $275 = ($x$3$lcssa$i|0)>(-1);
      if ($275) {
       $284 = $252;$285 = $253;$x$413$i = $x$3$lcssa$i;$y$314$i = $y$0$i;
       while(1) {
        $280 = !($y$314$i >= 0.5);
        $281 = $x$413$i << 1;
        if ($280) {
         $$pn$i = $y$314$i;$x$5$i = $281;
        } else {
         $282 = $281 | 1;
         $283 = $y$314$i + -1.0;
         $$pn$i = $283;$x$5$i = $282;
        }
        $y$4$i = $y$314$i + $$pn$i;
        $286 = (_i64Add(($284|0),($285|0),-1,-1)|0);
        $287 = tempRet0;
        $288 = ($x$5$i|0)>(-1);
        if ($288) {
         $284 = $286;$285 = $287;$x$413$i = $x$5$i;$y$314$i = $y$4$i;
        } else {
         $293 = $286;$294 = $287;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $293 = $252;$294 = $253;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $289 = ($emin$0$ph|0)<(0);
      $290 = $289 << 31 >> 31;
      $291 = (_i64Subtract(32,0,($emin$0$ph|0),($290|0))|0);
      $292 = tempRet0;
      $295 = (_i64Add(($293|0),($294|0),($291|0),($292|0))|0);
      $296 = tempRet0;
      $297 = (0)>($296|0);
      $298 = ($bits$0$ph>>>0)>($295>>>0);
      $299 = (0)==($296|0);
      $300 = $299 & $298;
      $301 = $297 | $300;
      if ($301) {
       $302 = ($295|0)<(0);
       if ($302) {
        $$0611$i = 0;
        label = 126;
       } else {
        $$06$i = $295;
        label = 124;
       }
      } else {
       $$06$i = $bits$0$ph;
       label = 124;
      }
      if ((label|0) == 124) {
       $303 = ($$06$i|0)<(53);
       if ($303) {
        $$0611$i = $$06$i;
        label = 126;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0612$i = $$06$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 126) {
       $304 = (84 - ($$0611$i))|0;
       $305 = (+_scalbn(1.0,$304));
       $306 = (+($sign$0|0));
       $307 = (+_copysignl((+$305),(+$306)));
       $$0612$i = $$0611$i;$$pre$phi$iZ2D = $306;$bias$0$i = $307;
      }
      $308 = ($$0612$i|0)<(32);
      $309 = $y$3$lcssa$i != 0.0;
      $or$cond5$i = $308 & $309;
      $310 = $x$4$lcssa$i & 1;
      $311 = ($310|0)==(0);
      $or$cond8$i = $or$cond5$i & $311;
      $312 = $or$cond8$i&1;
      $x$6$i = (($312) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond8$i ? 0.0 : $y$3$lcssa$i;
      $313 = (+($x$6$i>>>0));
      $314 = $$pre$phi$iZ2D * $313;
      $315 = $bias$0$i + $314;
      $316 = $$pre$phi$iZ2D * $y$5$i;
      $317 = $316 + $315;
      $318 = $317 - $bias$0$i;
      $319 = $318 != 0.0;
      if (!($319)) {
       $320 = (___errno_location()|0);
       HEAP32[$320>>2] = 34;
      }
      $321 = (+_scalbnl($318,$293));
      $$0 = $321;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $326 = (0 - ($sum$i))|0;
    $$011$i = $c$6;$gotdig$0$i11 = 0;
    while(1) {
     if ((($$011$i|0) == 46)) {
      label = 137;
      break;
     } else if (!((($$011$i|0) == 48))) {
      $$2$i = $$011$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 0;
      break;
     }
     $327 = HEAP32[$0>>2]|0;
     $328 = HEAP32[$1>>2]|0;
     $329 = ($327>>>0)<($328>>>0);
     if ($329) {
      $330 = (($327) + 1|0);
      HEAP32[$0>>2] = $330;
      $331 = HEAP8[$327>>0]|0;
      $332 = $331&255;
      $$011$i = $332;$gotdig$0$i11 = 1;
      continue;
     } else {
      $333 = (___shgetc($f)|0);
      $$011$i = $333;$gotdig$0$i11 = 1;
      continue;
     }
    }
    if ((label|0) == 137) {
     $334 = HEAP32[$0>>2]|0;
     $335 = HEAP32[$1>>2]|0;
     $336 = ($334>>>0)<($335>>>0);
     if ($336) {
      $337 = (($334) + 1|0);
      HEAP32[$0>>2] = $337;
      $338 = HEAP8[$334>>0]|0;
      $339 = $338&255;
      $$1$ph$i = $339;
     } else {
      $340 = (___shgetc($f)|0);
      $$1$ph$i = $340;
     }
     $341 = ($$1$ph$i|0)==(48);
     if ($341) {
      $342 = 0;$343 = 0;
      while(1) {
       $344 = (_i64Add(($342|0),($343|0),-1,-1)|0);
       $345 = tempRet0;
       $346 = HEAP32[$0>>2]|0;
       $347 = HEAP32[$1>>2]|0;
       $348 = ($346>>>0)<($347>>>0);
       if ($348) {
        $349 = (($346) + 1|0);
        HEAP32[$0>>2] = $349;
        $350 = HEAP8[$346>>0]|0;
        $351 = $350&255;
        $$1$be$i = $351;
       } else {
        $352 = (___shgetc($f)|0);
        $$1$be$i = $352;
       }
       $353 = ($$1$be$i|0)==(48);
       if ($353) {
        $342 = $344;$343 = $345;
       } else {
        $$2$i = $$1$be$i;$717 = $344;$718 = $345;$gotdig$2$i12 = 1;$gotrad$0$i13 = 1;
        break;
       }
      }
     } else {
      $$2$i = $$1$ph$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 1;
     }
    }
    HEAP32[$x$i>>2] = 0;
    $354 = (($$2$i) + -48)|0;
    $355 = ($354>>>0)<(10);
    $356 = ($$2$i|0)==(46);
    $or$cond112$i = $355 | $356;
    L221: do {
     if ($or$cond112$i) {
      $357 = (($x$i) + 496|0);
      $$3120$i = $$2$i;$360 = 0;$361 = 0;$719 = $356;$720 = $354;$721 = $717;$722 = $718;$gotdig$3116$i = $gotdig$2$i12;$gotrad$1117$i = $gotrad$0$i13;$j$0119$i = 0;$k$0118$i = 0;$lnz$0115$i = 0;
      L223: while(1) {
       do {
        if ($719) {
         $cond$i = ($gotrad$1117$i|0)==(0);
         if ($cond$i) {
          $723 = $360;$724 = $361;$725 = $360;$726 = $361;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = 1;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
         } else {
          break L223;
         }
        } else {
         $359 = ($k$0118$i|0)<(125);
         $362 = (_i64Add(($360|0),($361|0),1,0)|0);
         $363 = tempRet0;
         $364 = ($$3120$i|0)!=(48);
         if (!($359)) {
          if (!($364)) {
           $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
           break;
          }
          $374 = HEAP32[$357>>2]|0;
          $375 = $374 | 1;
          HEAP32[$357>>2] = $375;
          $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
          break;
         }
         $$lnz$0$i = $364 ? $362 : $lnz$0115$i;
         $365 = ($j$0119$i|0)==(0);
         $366 = (($x$i) + ($k$0118$i<<2)|0);
         if ($365) {
          $storemerge$i = $720;
         } else {
          $367 = HEAP32[$366>>2]|0;
          $368 = ($367*10)|0;
          $369 = (($$3120$i) + -48)|0;
          $370 = (($369) + ($368))|0;
          $storemerge$i = $370;
         }
         HEAP32[$366>>2] = $storemerge$i;
         $371 = (($j$0119$i) + 1)|0;
         $372 = ($371|0)==(9);
         $373 = $372&1;
         $$k$0$i = (($373) + ($k$0118$i))|0;
         $$13$i = $372 ? 0 : $371;
         $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $$13$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $376 = HEAP32[$0>>2]|0;
       $377 = HEAP32[$1>>2]|0;
       $378 = ($376>>>0)<($377>>>0);
       if ($378) {
        $379 = (($376) + 1|0);
        HEAP32[$0>>2] = $379;
        $380 = HEAP8[$376>>0]|0;
        $381 = $380&255;
        $$3$be$i = $381;
       } else {
        $382 = (___shgetc($f)|0);
        $$3$be$i = $382;
       }
       $383 = (($$3$be$i) + -48)|0;
       $384 = ($383>>>0)<(10);
       $385 = ($$3$be$i|0)==(46);
       $or$cond$i15 = $384 | $385;
       if ($or$cond$i15) {
        $$3120$i = $$3$be$i;$360 = $725;$361 = $726;$719 = $385;$720 = $383;$721 = $723;$722 = $724;$gotdig$3116$i = $gotdig$4$i;$gotrad$1117$i = $gotrad$2$i;$j$0119$i = $j$2$i;$k$0118$i = $k$2$i;$lnz$0115$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$387 = $723;$388 = $725;$390 = $724;$391 = $726;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 160;
        break L221;
       }
      }
      $358 = ($gotdig$3116$i|0)!=(0);
      $727 = $360;$728 = $361;$729 = $721;$730 = $722;$731 = $358;$j$0110$i = $j$0119$i;$k$0106$i = $k$0118$i;$lnz$0100$i = $lnz$0115$i;
      label = 168;
     } else {
      $$3$lcssa$i = $$2$i;$387 = $717;$388 = 0;$390 = $718;$391 = 0;$gotdig$3$lcssa$i = $gotdig$2$i12;$gotrad$1$lcssa$i = $gotrad$0$i13;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 160;
     }
    } while(0);
    do {
     if ((label|0) == 160) {
      $386 = ($gotrad$1$lcssa$i|0)==(0);
      $389 = $386 ? $388 : $387;
      $392 = $386 ? $391 : $390;
      $393 = ($gotdig$3$lcssa$i|0)!=(0);
      $394 = $$3$lcssa$i | 32;
      $395 = ($394|0)==(101);
      $or$cond15$i = $393 & $395;
      if (!($or$cond15$i)) {
       $410 = ($$3$lcssa$i|0)>(-1);
       if ($410) {
        $727 = $388;$728 = $391;$729 = $389;$730 = $392;$731 = $393;$j$0110$i = $j$0$lcssa$i;$k$0106$i = $k$0$lcssa$i;$lnz$0100$i = $lnz$0$lcssa$i;
        label = 168;
        break;
       } else {
        $732 = $388;$733 = $391;$734 = $393;$735 = $389;$736 = $392;$j$0109$i = $j$0$lcssa$i;$k$0105$i = $k$0$lcssa$i;$lnz$099$i = $lnz$0$lcssa$i;
        label = 170;
        break;
       }
      }
      $396 = (_scanexp($f,$pok)|0);
      $397 = tempRet0;
      $398 = ($396|0)==(0);
      $399 = ($397|0)==(-2147483648);
      $400 = $398 & $399;
      do {
       if ($400) {
        $401 = ($pok|0)==(0);
        if ($401) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $402 = HEAP32[$1>>2]|0;
         $403 = ($402|0)==(0|0);
         if ($403) {
          $406 = 0;$407 = 0;
          break;
         }
         $404 = HEAP32[$0>>2]|0;
         $405 = (($404) + -1|0);
         HEAP32[$0>>2] = $405;
         $406 = 0;$407 = 0;
         break;
        }
       } else {
        $406 = $396;$407 = $397;
       }
      } while(0);
      $408 = (_i64Add(($406|0),($407|0),($389|0),($392|0))|0);
      $409 = tempRet0;
      $420 = $408;$422 = $388;$423 = $409;$425 = $391;$j$0108$i = $j$0$lcssa$i;$k$0104$i = $k$0$lcssa$i;$lnz$098$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 168) {
     $411 = HEAP32[$1>>2]|0;
     $412 = ($411|0)==(0|0);
     if ($412) {
      $732 = $727;$733 = $728;$734 = $731;$735 = $729;$736 = $730;$j$0109$i = $j$0110$i;$k$0105$i = $k$0106$i;$lnz$099$i = $lnz$0100$i;
      label = 170;
     } else {
      $413 = HEAP32[$0>>2]|0;
      $414 = (($413) + -1|0);
      HEAP32[$0>>2] = $414;
      if ($731) {
       $420 = $729;$422 = $727;$423 = $730;$425 = $728;$j$0108$i = $j$0110$i;$k$0104$i = $k$0106$i;$lnz$098$i = $lnz$0100$i;
      } else {
       label = 171;
      }
     }
    }
    if ((label|0) == 170) {
     if ($734) {
      $420 = $735;$422 = $732;$423 = $736;$425 = $733;$j$0108$i = $j$0109$i;$k$0104$i = $k$0105$i;$lnz$098$i = $lnz$099$i;
     } else {
      label = 171;
     }
    }
    if ((label|0) == 171) {
     $415 = (___errno_location()|0);
     HEAP32[$415>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $416 = HEAP32[$x$i>>2]|0;
    $417 = ($416|0)==(0);
    if ($417) {
     $418 = (+($sign$0|0));
     $419 = $418 * 0.0;
     $$0 = $419;
     STACKTOP = sp;return (+$$0);
    }
    $421 = ($420|0)==($422|0);
    $424 = ($423|0)==($425|0);
    $426 = $421 & $424;
    $427 = ($425|0)<(0);
    $428 = ($422>>>0)<(10);
    $429 = ($425|0)==(0);
    $430 = $429 & $428;
    $431 = $427 | $430;
    $or$cond3$i16 = $426 & $431;
    if ($or$cond3$i16) {
     $432 = ($bits$0$ph>>>0)>(30);
     $433 = $416 >>> $bits$0$ph;
     $434 = ($433|0)==(0);
     $or$cond17$i = $432 | $434;
     if ($or$cond17$i) {
      $435 = (+($sign$0|0));
      $436 = (+($416>>>0));
      $437 = $435 * $436;
      $$0 = $437;
      STACKTOP = sp;return (+$$0);
     }
    }
    $438 = (($emin$0$ph|0) / -2)&-1;
    $439 = ($438|0)<(0);
    $440 = $439 << 31 >> 31;
    $441 = ($423|0)>($440|0);
    $442 = ($420>>>0)>($438>>>0);
    $443 = ($423|0)==($440|0);
    $444 = $443 & $442;
    $445 = $441 | $444;
    if ($445) {
     $446 = (___errno_location()|0);
     HEAP32[$446>>2] = 34;
     $447 = (+($sign$0|0));
     $448 = $447 * 1.7976931348623157E+308;
     $449 = $448 * 1.7976931348623157E+308;
     $$0 = $449;
     STACKTOP = sp;return (+$$0);
    }
    $450 = (($emin$0$ph) + -106)|0;
    $451 = ($450|0)<(0);
    $452 = $451 << 31 >> 31;
    $453 = ($423|0)<($452|0);
    $454 = ($420>>>0)<($450>>>0);
    $455 = ($423|0)==($452|0);
    $456 = $455 & $454;
    $457 = $453 | $456;
    if ($457) {
     $458 = (___errno_location()|0);
     HEAP32[$458>>2] = 34;
     $459 = (+($sign$0|0));
     $460 = $459 * 2.2250738585072014E-308;
     $461 = $460 * 2.2250738585072014E-308;
     $$0 = $461;
     STACKTOP = sp;return (+$$0);
    }
    $462 = ($j$0108$i|0)==(0);
    if ($462) {
     $k$3$i = $k$0104$i;
    } else {
     $463 = ($j$0108$i|0)<(9);
     if ($463) {
      $464 = (($x$i) + ($k$0104$i<<2)|0);
      $$promoted$i = HEAP32[$464>>2]|0;
      $466 = $$promoted$i;$j$388$i = $j$0108$i;
      while(1) {
       $465 = ($466*10)|0;
       $467 = (($j$388$i) + 1)|0;
       $exitcond$i = ($467|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $466 = $465;$j$388$i = $467;
       }
      }
      HEAP32[$464>>2] = $465;
     }
     $468 = (($k$0104$i) + 1)|0;
     $k$3$i = $468;
    }
    $469 = ($lnz$098$i|0)<(9);
    if ($469) {
     $470 = ($lnz$098$i|0)<=($420|0);
     $471 = ($420|0)<(18);
     $or$cond5$i17 = $470 & $471;
     if ($or$cond5$i17) {
      $472 = ($420|0)==(9);
      if ($472) {
       $473 = (+($sign$0|0));
       $474 = HEAP32[$x$i>>2]|0;
       $475 = (+($474>>>0));
       $476 = $473 * $475;
       $$0 = $476;
       STACKTOP = sp;return (+$$0);
      }
      $477 = ($420|0)<(9);
      if ($477) {
       $478 = (+($sign$0|0));
       $479 = HEAP32[$x$i>>2]|0;
       $480 = (+($479>>>0));
       $481 = $478 * $480;
       $482 = (8 - ($420))|0;
       $483 = (5960 + ($482<<2)|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = (+($484|0));
       $486 = $481 / $485;
       $$0 = $486;
       STACKTOP = sp;return (+$$0);
      }
      $487 = Math_imul($420, -3)|0;
      $$neg37$i = (($bits$0$ph) + 27)|0;
      $488 = (($$neg37$i) + ($487))|0;
      $489 = ($488|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $490 = $$pre$i18 >>> $488;
      $491 = ($490|0)==(0);
      $or$cond187$i = $489 | $491;
      if ($or$cond187$i) {
       $492 = (+($sign$0|0));
       $493 = (+($$pre$i18>>>0));
       $494 = $492 * $493;
       $495 = (($420) + -10)|0;
       $496 = (5960 + ($495<<2)|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = (+($497|0));
       $499 = $494 * $498;
       $$0 = $499;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $500 = (($420|0) % 9)&-1;
    $501 = ($500|0)==(0);
    if ($501) {
     $a$2$ph57$i = 0;$e2$0$ph$i = 0;$rp$2$ph55$i = $420;$z$1$ph56$i = $k$3$i;
    } else {
     $502 = ($420|0)>(-1);
     $503 = (($500) + 9)|0;
     $504 = $502 ? $500 : $503;
     $505 = (8 - ($504))|0;
     $506 = (5960 + ($505<<2)|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($k$3$i|0)==(0);
     if ($508) {
      $a$0$lcssa182$i = 0;$rp$0$lcssa183$i = $420;$z$0$i = 0;
     } else {
      $509 = (1000000000 / ($507|0))&-1;
      $a$078$i = 0;$carry$080$i = 0;$k$479$i = 0;$rp$077$i = $420;
      while(1) {
       $510 = (($x$i) + ($k$479$i<<2)|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($511>>>0) % ($507>>>0))&-1;
       $513 = (($511>>>0) / ($507>>>0))&-1;
       $514 = (($513) + ($carry$080$i))|0;
       HEAP32[$510>>2] = $514;
       $515 = Math_imul($512, $509)|0;
       $516 = ($k$479$i|0)==($a$078$i|0);
       $517 = ($514|0)==(0);
       $or$cond18$i = $516 & $517;
       $518 = (($k$479$i) + 1)|0;
       if ($or$cond18$i) {
        $519 = $518 & 127;
        $520 = (($rp$077$i) + -9)|0;
        $a$1$i = $519;$rp$1$i19 = $520;
       } else {
        $a$1$i = $a$078$i;$rp$1$i19 = $rp$077$i;
       }
       $521 = ($518|0)==($k$3$i|0);
       if ($521) {
        break;
       } else {
        $a$078$i = $a$1$i;$carry$080$i = $515;$k$479$i = $518;$rp$077$i = $rp$1$i19;
       }
      }
      $522 = ($515|0)==(0);
      if ($522) {
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $k$3$i;
      } else {
       $523 = (($k$3$i) + 1)|0;
       $524 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$524>>2] = $515;
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $523;
      }
     }
     $525 = (9 - ($504))|0;
     $526 = (($525) + ($rp$0$lcssa183$i))|0;
     $a$2$ph57$i = $a$0$lcssa182$i;$e2$0$ph$i = 0;$rp$2$ph55$i = $526;$z$1$ph56$i = $z$0$i;
    }
    L315: while(1) {
     $527 = ($rp$2$ph55$i|0)<(18);
     $528 = (($x$i) + ($a$2$ph57$i<<2)|0);
     if ($527) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph56$i;
      while(1) {
       $530 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $530;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $531 = (($x$i) + ($k$5$us$i<<2)|0);
        $532 = HEAP32[$531>>2]|0;
        $533 = (_bitshift64Shl(($532|0),0,29)|0);
        $534 = tempRet0;
        $535 = (_i64Add(($533|0),($534|0),($carry1$0$us$i|0),0)|0);
        $536 = tempRet0;
        $537 = ($536>>>0)>(0);
        $538 = ($535>>>0)>(1000000000);
        $539 = ($536|0)==(0);
        $540 = $539 & $538;
        $541 = $537 | $540;
        if ($541) {
         $542 = (___udivdi3(($535|0),($536|0),1000000000,0)|0);
         $543 = tempRet0;
         $544 = (___uremdi3(($535|0),($536|0),1000000000,0)|0);
         $545 = tempRet0;
         $$sink$off0$us$i = $544;$carry1$1$us$i = $542;
        } else {
         $$sink$off0$us$i = $535;$carry1$1$us$i = 0;
        }
        HEAP32[$531>>2] = $$sink$off0$us$i;
        $546 = (($z$2$us$i) + 127)|0;
        $547 = $546 & 127;
        $548 = ($k$5$us$i|0)!=($547|0);
        $549 = ($k$5$us$i|0)==($a$2$ph57$i|0);
        $or$cond19$us$i = $548 | $549;
        if ($or$cond19$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $550 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $550 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $551 = (($k$5$us$i) + -1)|0;
        if ($549) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $551;$z$2$us$i = $z$3$us$i;
        }
       }
       $552 = (($e2$0$us$i) + -29)|0;
       $553 = ($carry1$1$us$i|0)==(0);
       if ($553) {
        $e2$0$us$i = $552;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa60$i = $552;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $529 = ($rp$2$ph55$i|0)==(18);
      if ($529) {
       $e2$0$us61$i = $e2$0$ph$i;$z$1$us62$i = $z$1$ph56$i;
      } else {
       $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph50$i = $rp$2$ph55$i;$z$5$ph$i = $z$1$ph56$i;
       break;
      }
      while(1) {
       $554 = HEAP32[$528>>2]|0;
       $555 = ($554>>>0)<(9007199);
       if (!($555)) {
        $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$us61$i;$rp$3$ph50$i = 18;$z$5$ph$i = $z$1$us62$i;
        break L315;
       }
       $556 = (($z$1$us62$i) + 127)|0;
       $carry1$0$us66$i = 0;$k$5$in$us65$i = $556;$z$2$us64$i = $z$1$us62$i;
       while(1) {
        $k$5$us67$i = $k$5$in$us65$i & 127;
        $557 = (($x$i) + ($k$5$us67$i<<2)|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = (_bitshift64Shl(($558|0),0,29)|0);
        $560 = tempRet0;
        $561 = (_i64Add(($559|0),($560|0),($carry1$0$us66$i|0),0)|0);
        $562 = tempRet0;
        $563 = ($562>>>0)>(0);
        $564 = ($561>>>0)>(1000000000);
        $565 = ($562|0)==(0);
        $566 = $565 & $564;
        $567 = $563 | $566;
        if ($567) {
         $568 = (___udivdi3(($561|0),($562|0),1000000000,0)|0);
         $569 = tempRet0;
         $570 = (___uremdi3(($561|0),($562|0),1000000000,0)|0);
         $571 = tempRet0;
         $$sink$off0$us70$i = $570;$carry1$1$us71$i = $568;
        } else {
         $$sink$off0$us70$i = $561;$carry1$1$us71$i = 0;
        }
        HEAP32[$557>>2] = $$sink$off0$us70$i;
        $572 = (($z$2$us64$i) + 127)|0;
        $573 = $572 & 127;
        $574 = ($k$5$us67$i|0)!=($573|0);
        $575 = ($k$5$us67$i|0)==($a$2$ph57$i|0);
        $or$cond19$us72$i = $574 | $575;
        if ($or$cond19$us72$i) {
         $z$3$us74$i = $z$2$us64$i;
        } else {
         $576 = ($$sink$off0$us70$i|0)==(0);
         $k$5$z$2$us73$i = $576 ? $k$5$us67$i : $z$2$us64$i;
         $z$3$us74$i = $k$5$z$2$us73$i;
        }
        $577 = (($k$5$us67$i) + -1)|0;
        if ($575) {
         break;
        } else {
         $carry1$0$us66$i = $carry1$1$us71$i;$k$5$in$us65$i = $577;$z$2$us64$i = $z$3$us74$i;
        }
       }
       $578 = (($e2$0$us61$i) + -29)|0;
       $579 = ($carry1$1$us71$i|0)==(0);
       if ($579) {
        $e2$0$us61$i = $578;$z$1$us62$i = $z$3$us74$i;
       } else {
        $$lcssa60$i = $578;$carry1$1$lcssa$lcssa$i = $carry1$1$us71$i;$z$3$lcssa$lcssa$i = $z$3$us74$i;
        break;
       }
      }
     }
     $580 = (($rp$2$ph55$i) + 9)|0;
     $581 = (($a$2$ph57$i) + 127)|0;
     $582 = $581 & 127;
     $583 = ($582|0)==($z$3$lcssa$lcssa$i|0);
     if ($583) {
      $584 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $585 = $584 & 127;
      $586 = (($x$i) + ($585<<2)|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $589 = $588 & 127;
      $590 = (($x$i) + ($589<<2)|0);
      $591 = HEAP32[$590>>2]|0;
      $592 = $591 | $587;
      HEAP32[$590>>2] = $592;
      $z$4$i = $585;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $593 = (($x$i) + ($582<<2)|0);
     HEAP32[$593>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph57$i = $582;$e2$0$ph$i = $$lcssa60$i;$rp$2$ph55$i = $580;$z$1$ph56$i = $z$4$i;
    }
    L346: while(1) {
     $630 = (($z$5$ph$i) + 1)|0;
     $627 = $630 & 127;
     $631 = (($z$5$ph$i) + 127)|0;
     $632 = $631 & 127;
     $633 = (($x$i) + ($632<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph50$i;
     while(1) {
      $606 = ($rp$3$i$ph|0)==(18);
      $634 = ($rp$3$i$ph|0)>(27);
      $$20$i = $634 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$042$i = 0;
       while(1) {
        $596 = (($i$042$i) + ($a$3$i))|0;
        $597 = $596 & 127;
        $598 = ($597|0)==($z$5$ph$i|0);
        if ($598) {
         $i$1$i = 2;
         break;
        }
        $599 = (($x$i) + ($597<<2)|0);
        $600 = HEAP32[$599>>2]|0;
        $601 = (5952 + ($i$042$i<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = ($600>>>0)<($602>>>0);
        if ($603) {
         $i$1$i = 2;
         break;
        }
        $604 = ($600>>>0)>($602>>>0);
        $594 = (($i$042$i) + 1)|0;
        if ($604) {
         $i$1$i = $i$042$i;
         break;
        }
        $595 = ($594|0)<(2);
        if ($595) {
         $i$042$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $605 = ($i$1$i|0)==(2);
       $or$cond8$i20 = $605 & $606;
       if ($or$cond8$i20) {
        break L346;
       }
       $609 = (($$20$i) + ($e2$1$i))|0;
       $610 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($610) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $609;
       } else {
        break;
       }
      }
      $611 = 1 << $$20$i;
      $612 = (($611) + -1)|0;
      $613 = 1000000000 >>> $$20$i;
      $a$444$i = $a$3$i;$carry3$047$i = 0;$k$645$i = $a$3$i;$rp$443$i = $rp$3$i$ph;
      while(1) {
       $614 = (($x$i) + ($k$645$i<<2)|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = $615 & $612;
       $617 = $615 >>> $$20$i;
       $618 = (($617) + ($carry3$047$i))|0;
       HEAP32[$614>>2] = $618;
       $619 = Math_imul($616, $613)|0;
       $620 = ($k$645$i|0)==($a$444$i|0);
       $621 = ($618|0)==(0);
       $or$cond21$i = $620 & $621;
       $622 = (($k$645$i) + 1)|0;
       $623 = $622 & 127;
       $624 = (($rp$443$i) + -9)|0;
       $rp$5$i = $or$cond21$i ? $624 : $rp$443$i;
       $a$5$i = $or$cond21$i ? $623 : $a$444$i;
       $625 = ($623|0)==($z$5$ph$i|0);
       if ($625) {
        break;
       } else {
        $a$444$i = $a$5$i;$carry3$047$i = $619;$k$645$i = $623;$rp$443$i = $rp$5$i;
       }
      }
      $626 = ($619|0)==(0);
      if ($626) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $628 = ($627|0)==($a$5$i|0);
      if (!($628)) {
       break;
      }
      $635 = HEAP32[$633>>2]|0;
      $636 = $635 | 1;
      HEAP32[$633>>2] = $636;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
     }
     $629 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$629>>2] = $619;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $609;$rp$3$ph50$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $607 = $a$3$i & 127;
    $608 = ($607|0)==($z$5$ph$i|0);
    if ($608) {
     $637 = (($627) + -1)|0;
     $638 = (($x$i) + ($637<<2)|0);
     HEAP32[$638>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $639 = (($x$i) + ($607<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = (+($640>>>0));
    $642 = (($a$3$i) + 1)|0;
    $643 = $642 & 127;
    $644 = ($643|0)==($z$7$i|0);
    if ($644) {
     $703 = (($z$7$i) + 1)|0;
     $704 = $703 & 127;
     $705 = (($704) + -1)|0;
     $706 = (($x$i) + ($705<<2)|0);
     HEAP32[$706>>2] = 0;
     $z$7$1$i = $704;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $707 = $641 * 1.0E+9;
    $708 = (($x$i) + ($643<<2)|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = (+($709>>>0));
    $711 = $707 + $710;
    $668 = (+($sign$0|0));
    $650 = $668 * $711;
    $688 = (($e2$1$i) + 53)|0;
    $645 = (($688) - ($emin$0$ph))|0;
    $712 = ($645|0)<($bits$0$ph|0);
    if ($712) {
     $646 = ($645|0)<(0);
     if ($646) {
      $$01231$i = 0;$denormal$030$i = 1;
      label = 244;
     } else {
      $$012$i = $645;$denormal$0$i = 1;
      label = 243;
     }
    } else {
     $$012$i = $bits$0$ph;$denormal$0$i = 0;
     label = 243;
    }
    if ((label|0) == 243) {
     $647 = ($$012$i|0)<(53);
     if ($647) {
      $$01231$i = $$012$i;$denormal$030$i = $denormal$0$i;
      label = 244;
     } else {
      $$01232$i = $$012$i;$bias$0$i25 = 0.0;$denormal$029$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i24 = $650;
     }
    }
    if ((label|0) == 244) {
     $648 = (105 - ($$01231$i))|0;
     $649 = (+_scalbn(1.0,$648));
     $651 = (+_copysignl((+$649),(+$650)));
     $652 = (53 - ($$01231$i))|0;
     $653 = (+_scalbn(1.0,$652));
     $654 = (+_fmodl((+$650),(+$653)));
     $655 = $650 - $654;
     $656 = $651 + $655;
     $$01232$i = $$01231$i;$bias$0$i25 = $651;$denormal$029$i = $denormal$030$i;$frac$0$i = $654;$y$1$i24 = $656;
    }
    $657 = (($a$3$i) + 2)|0;
    $658 = $657 & 127;
    $659 = ($658|0)==($z$7$1$i|0);
    do {
     if ($659) {
      $frac$2$i = $frac$0$i;
     } else {
      $660 = (($x$i) + ($658<<2)|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ($661>>>0)<(500000000);
      do {
       if ($662) {
        $663 = ($661|0)==(0);
        if ($663) {
         $664 = (($a$3$i) + 3)|0;
         $665 = $664 & 127;
         $666 = ($665|0)==($z$7$1$i|0);
         if ($666) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $667 = $668 * 0.25;
        $669 = $667 + $frac$0$i;
        $frac$1$i = $669;
       } else {
        $670 = ($661>>>0)>(500000000);
        if ($670) {
         $671 = $668 * 0.75;
         $672 = $671 + $frac$0$i;
         $frac$1$i = $672;
         break;
        }
        $673 = (($a$3$i) + 3)|0;
        $674 = $673 & 127;
        $675 = ($674|0)==($z$7$1$i|0);
        if ($675) {
         $676 = $668 * 0.5;
         $677 = $676 + $frac$0$i;
         $frac$1$i = $677;
         break;
        } else {
         $678 = $668 * 0.75;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        }
       }
      } while(0);
      $680 = (53 - ($$01232$i))|0;
      $681 = ($680|0)>(1);
      if (!($681)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $682 = (+_fmodl((+$frac$1$i),1.0));
      $683 = $682 != 0.0;
      if ($683) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = $frac$1$i + 1.0;
      $frac$2$i = $684;
     }
    } while(0);
    $685 = $y$1$i24 + $frac$2$i;
    $686 = $685 - $bias$0$i25;
    $687 = $688 & 2147483647;
    $689 = (-2 - ($sum$i))|0;
    $690 = ($687|0)>($689|0);
    do {
     if ($690) {
      $691 = (+Math_abs((+$686)));
      $692 = !($691 >= 9007199254740992.0);
      if ($692) {
       $denormal$2$i = $denormal$029$i;$e2$2$i = $e2$1$i;$y$2$i26 = $686;
      } else {
       $693 = ($denormal$029$i|0)!=(0);
       $694 = ($$01232$i|0)==($645|0);
       $or$cond22$i = $693 & $694;
       $denormal$1$i = $or$cond22$i ? 0 : $denormal$029$i;
       $695 = $686 * 0.5;
       $696 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $696;$y$2$i26 = $695;
      }
      $697 = (($e2$2$i) + 50)|0;
      $698 = ($697|0)>($326|0);
      if (!($698)) {
       $699 = ($denormal$2$i|0)!=(0);
       $700 = $frac$2$i != 0.0;
       $or$cond10$i = $699 & $700;
       if (!($or$cond10$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
        break;
       }
      }
      $701 = (___errno_location()|0);
      HEAP32[$701>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $686;
     }
    } while(0);
    $702 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $702;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 15]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 15]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 15]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 15]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre5;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 15]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=6560+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,0)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$02 = $n;$l$03 = $vl;$r$04 = $vr;
   while(1) {
    $1 = HEAP8[$l$03>>0]|0;
    $2 = HEAP8[$r$04>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$02) + -1)|0;
    $5 = (($l$03) + 1|0);
    $6 = (($r$04) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$02 = $4;$l$03 = $5;$r$04 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
 var $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((5152 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((5624 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $30 = HEAP32[((5152 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((5152 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((5152 + 24|0))>>2] = $36;
  HEAP32[((5152 + 12|0))>>2] = $35;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $42 = HEAP32[((5152 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((5152 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((5152 + 8|0))>>2] = $storemerge21;
  HEAP32[((5152 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((5152 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[5152>>2]|0;
    $88 = $87 & $86;
    HEAP32[5152>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((5152 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((5152 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((5152 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((5152 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((5152 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((5152 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((5152 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((5152 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((5152 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((5152 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[5152>>2]|0;
     $32 = $31 & $30;
     HEAP32[5152>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((5152 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((5152 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((5152 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((5152 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((5152 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((5152 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((5152 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((5152 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((5152 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((5152 + 12|0))>>2] = $115;
   HEAP32[((5152 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((5152 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((5152 + 20|0))>>2] = 0;
   HEAP32[((5152 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((5152 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((5152 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((5152 + 8|0))>>2] = $123;
   HEAP32[((5152 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((5152 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[5152>>2]|0;
     $146 = $145 & $144;
     HEAP32[5152>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((5152 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((5152 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((5152 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((5152 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((5152 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((5152 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((5152 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((5152 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((5152 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[5152>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[5152>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((5152 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((5152 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((5152 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((5152 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((5152 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((5152 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((5152 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((5152 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$116 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$29 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $10&1;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = (($11) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$11>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $12;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $12;
   }
  } else {
   $c$0 = $20;$neg$0 = $12;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   STACKTOP = sp;return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  STACKTOP = sp;return ($97|0);
 } else {
  $c$116 = $c$0;$x$017 = 0;
 }
 while(1) {
  $33 = ($x$017*10)|0;
  $34 = (($c$116) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $or$cond5 = $44 & $45;
  if ($or$cond5) {
   $c$116 = $c$1$be;$x$017 = $35;
  } else {
   break;
  }
 }
 $46 = ($35|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $35;$53 = $47;$c$29 = $c$1$be;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$29|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$29|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond7 = $70 & $75;
   if ($or$cond7) {
    $52 = $60;$53 = $61;$c$29 = $c$2$be;
   } else {
    $90 = $60;$91 = $61;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $35;$91 = $47;$c$2$lcssa = $c$1$be;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 STACKTOP = sp;return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0, $$0$lcssa$i62 = 0;
 var $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0, $$01$i67 = 0;
 var $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0;
 var $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0, $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$314$i = 0;
 var $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa292$i = 0, $$lcssa95 = 0, $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0;
 var $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre258 = 0, $$pre259 = 0, $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0.0, $1026 = 0.0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1034$phi = 0;
 var $1035 = 0, $1035$phi = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0;
 var $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0;
 var $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0.0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0;
 var $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0;
 var $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0;
 var $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0;
 var $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0106 = 0, $fl$0111 = 0;
 var $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa265 = 0, $i$0160 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1168 = 0, $i$1225$i = 0, $i$2212$i = 0, $i$292 = 0, $i$3204$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0;
 var $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1159 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0;
 var $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0, $or$cond$i98$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond269 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4264 = 0;
 var $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext85 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge2104 = 0, $storemerge2110 = 0;
 var $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0161 = 0, $ws$1169 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0, $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0;
 var $z$096 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1034 = 0;$1035 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   label = 352;
   break;
  } else {
   $1036 = $22;$26 = $23;
  }
  while(1) {
   if ((($1036<<24>>24) == 0)) {
    $$lcssa95 = $26;$z$0$lcssa = $26;
    break;
   } else if ((($1036<<24>>24) == 37)) {
    $28 = $26;$z$096 = $26;
    label = 9;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1036 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = (($28) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa95 = $28;$z$0$lcssa = $z$096;
      break L12;
     }
     $31 = (($z$096) + 1|0);
     $32 = (($28) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$096 = $31;
      label = 9;
     } else {
      $$lcssa95 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1035$phi = $1035;$1034$phi = $1034;$23 = $$lcssa95;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1035 = $1035$phi;$1034 = $1034$phi;
   continue;
  }
  $39 = (($$lcssa95) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = (($$lcssa95) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   if ($44) {
    $45 = (($$lcssa95) + 3|0);
    $$pre258 = HEAP8[$45>>0]|0;
    $47 = $$pre258;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $45;
   } else {
    $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
   }
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $$pr = $47;$51 = $46;$fl$0111 = 0;$storemerge2110 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $61 = $$pr;$fl$0106 = $fl$0111;$storemerge2104 = $storemerge2110;
      break L25;
     }
     $55 = $52 | $fl$0111;
     $56 = (($storemerge2110) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = $58 & -32;
     $60 = ($59|0)==(32);
     if ($60) {
      $$pr = $57;$51 = $58;$fl$0111 = $55;$storemerge2110 = $56;
     } else {
      $61 = $57;$fl$0106 = $55;$storemerge2104 = $56;
      break;
     }
    }
   } else {
    $61 = $47;$fl$0106 = 0;$storemerge2104 = $storemerge;
   }
  } while(0);
  $62 = ($61<<24>>24)==(42);
  do {
   if ($62) {
    $63 = (($storemerge2104) + 1|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $isdigittmp5 = (($65) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $66 = (($storemerge2104) + 2|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = ($67<<24>>24)==(36);
     if ($68) {
      $69 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$69>>2] = 10;
      $70 = HEAP8[$63>>0]|0;
      $71 = $70 << 24 >> 24;
      $72 = (($71) + -48)|0;
      $73 = (($nl_arg) + ($72<<3)|0);
      $74 = $73;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($74) + 4)|0;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($storemerge2104) + 3|0);
      $l10n$2 = 1;$storemerge7 = $80;$w$0 = $76;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $81 = ($l10n$1|0)==(0);
     if (!($81)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $97 = $63;$fl$1 = $fl$0106;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $82 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $63;$w$0 = $82;
    }
    $83 = ($w$0|0)<(0);
    if ($83) {
     $84 = $fl$0106 | 8192;
     $85 = (0 - ($w$0))|0;
     $97 = $storemerge7;$fl$1 = $84;$l10n$3 = $l10n$2;$w$1 = $85;
    } else {
     $97 = $storemerge7;$fl$1 = $fl$0106;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $86 = $61 << 24 >> 24;
    $isdigittmp1$i = (($86) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $89 = $86;$92 = $storemerge2104;$i$03$i = 0;
     while(1) {
      $87 = ($i$03$i*10)|0;
      $88 = (($89) + -48)|0;
      $90 = (($88) + ($87))|0;
      $91 = (($92) + 1|0);
      $93 = HEAP8[$91>>0]|0;
      $94 = $93 << 24 >> 24;
      $isdigittmp$i = (($94) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $89 = $94;$92 = $91;$i$03$i = $90;
      } else {
       break;
      }
     }
     $95 = ($90|0)<(0);
     if ($95) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $97 = $91;$fl$1 = $fl$0106;$l10n$3 = $l10n$1;$w$1 = $90;
     }
    } else {
     $97 = $storemerge2104;$fl$1 = $fl$0106;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $96 = HEAP8[$97>>0]|0;
  $98 = ($96<<24>>24)==(46);
  L46: do {
   if ($98) {
    $99 = (($97) + 1|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = ($100<<24>>24)==(42);
    if (!($101)) {
     $122 = $100 << 24 >> 24;
     $isdigittmp1$i22 = (($122) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $125 = $122;$128 = $99;$i$03$i24 = 0;
     } else {
      $1037 = $99;$p$0 = 0;
      break;
     }
     while(1) {
      $123 = ($i$03$i24*10)|0;
      $124 = (($125) + -48)|0;
      $126 = (($124) + ($123))|0;
      $127 = (($128) + 1|0);
      $129 = HEAP8[$127>>0]|0;
      $130 = $129 << 24 >> 24;
      $isdigittmp$i25 = (($130) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $125 = $130;$128 = $127;$i$03$i24 = $126;
      } else {
       $1037 = $127;$p$0 = $126;
       break L46;
      }
     }
    }
    $102 = (($97) + 2|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103 << 24 >> 24;
    $isdigittmp3 = (($104) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $105 = (($97) + 3|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = ($106<<24>>24)==(36);
     if ($107) {
      $108 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$108>>2] = 10;
      $109 = HEAP8[$102>>0]|0;
      $110 = $109 << 24 >> 24;
      $111 = (($110) + -48)|0;
      $112 = (($nl_arg) + ($111<<3)|0);
      $113 = $112;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = (($113) + 4)|0;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($97) + 4|0);
      $1037 = $119;$p$0 = $115;
      break;
     }
    }
    $120 = ($l10n$3|0)==(0);
    if (!($120)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $121 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1037 = $102;$p$0 = $121;
    } else {
     $1037 = $102;$p$0 = 0;
    }
   } else {
    $1037 = $97;$p$0 = -1;
   }
  } while(0);
  $132 = $1037;$st$0 = 0;
  while(1) {
   $131 = HEAP8[$132>>0]|0;
   $133 = $131 << 24 >> 24;
   $134 = (($133) + -65)|0;
   $135 = ($134>>>0)>(57);
   if ($135) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $136 = (($132) + 1|0);
   $137 = ((5992 + (($st$0*58)|0)|0) + ($134)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($139) + -1)|0;
   $141 = ($140>>>0)<(8);
   if ($141) {
    $132 = $136;$st$0 = $139;
   } else {
    break;
   }
  }
  $142 = ($138<<24>>24)==(0);
  if ($142) {
   $$0 = -1;
   label = 370;
   break;
  }
  $143 = ($138<<24>>24)==(19);
  $144 = ($argpos$0|0)>(-1);
  L65: do {
   if ($143) {
    if ($144) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1038 = $1034;$1039 = $1035;
     label = 63;
    }
   } else {
    if ($144) {
     $145 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$145>>2] = $139;
     $146 = (($nl_arg) + ($argpos$0<<3)|0);
     $147 = $146;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $150 = (($147) + 4)|0;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $1038 = $149;$1039 = $152;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 370;
     break L1;
    }
    $153 = ($138&255)>(20);
    if ($153) {
     $187 = $131;$195 = $1034;$222 = $1035;
    } else {
     do {
      switch ($139|0) {
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $166 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $167 = $166&65535;
       $168 = $167 << 16 >> 16;
       $169 = ($168|0)<(0);
       $170 = $169 << 31 >> 31;
       $sext85 = $166 << 16;
       $171 = $sext85 >> 16;
       $1040 = $170;$1041 = $171;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $156 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $157 = ($156|0)<(0);
       $158 = $157 << 31 >> 31;
       $1040 = $158;$1041 = $156;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $179 & 255;
       $1040 = 0;$1041 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $160 = $arglist_current14;
       $161 = $160;
       $162 = HEAP32[$161>>2]|0;
       $163 = (($160) + 4)|0;
       $164 = $163;
       $165 = HEAP32[$164>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1040 = $165;$1041 = $162;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$183 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $183;$184 = HEAP32[tempDoublePtr>>2]|0;
       $185 = HEAP32[tempDoublePtr+4>>2]|0;
       $1038 = $184;$1039 = $185;
       label = 63;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $173 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $174 = $173&255;
       $175 = $174 << 24 >> 24;
       $176 = ($175|0)<(0);
       $177 = $176 << 31 >> 31;
       $sext = $173 << 24;
       $178 = $sext >> 24;
       $1040 = $177;$1041 = $178;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $155 = $154;
       $1040 = $1035;$1041 = $155;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1040 = 0;$1041 = $159;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $172 & 65535;
       $1040 = 0;$1041 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$180 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $180;$181 = HEAP32[tempDoublePtr>>2]|0;
       $182 = HEAP32[tempDoublePtr+4>>2]|0;
       $1040 = $182;$1041 = $181;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1040 = $1035;$1041 = $1034;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1040 = $1039;$1041 = $1038;
    label = 64;
   } else {
    $1034 = $1038;$1035 = $1039;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre259 = HEAP8[$132>>0]|0;
   $187 = $$pre259;$195 = $1041;$222 = $1040;
  }
  $186 = $187 << 24 >> 24;
  $188 = ($st$0|0)!=(0);
  $189 = $186 & 15;
  $190 = ($189|0)==(3);
  $or$cond9 = $188 & $190;
  $191 = $186 & -33;
  $t$0 = $or$cond9 ? $191 : $186;
  $192 = $fl$1 & 8192;
  $193 = ($192|0)==(0);
  $194 = $fl$1 & -65537;
  $fl$1$ = $193 ? $fl$1 : $194;
  L89: do {
   switch ($t$0|0) {
   case 111:  {
    $243 = ($195|0)==(0);
    $244 = ($222|0)==(0);
    $245 = $243 & $244;
    if ($245) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$247 = $195;$251 = $222;
     while(1) {
      $246 = $247 & 7;
      $248 = $246 | 48;
      $249 = $248&255;
      $250 = (($$03$i42) + -1|0);
      HEAP8[$250>>0] = $249;
      $252 = (_bitshift64Lshr(($247|0),($251|0),3)|0);
      $253 = tempRet0;
      $254 = ($252|0)==(0);
      $255 = ($253|0)==(0);
      $256 = $254 & $255;
      if ($256) {
       $$0$lcssa$i45 = $250;
       break;
      } else {
       $$03$i42 = $250;$247 = $252;$251 = $253;
      }
     }
    }
    $257 = $fl$1$ & 8;
    $258 = ($257|0)==(0);
    $or$cond13 = $258 | $245;
    $$19 = $or$cond13 ? 6456 : ((6456 + 5|0));
    $259 = $or$cond13&1;
    $$20 = $259 ^ 1;
    $297 = $195;$299 = $222;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 109:  {
    $310 = (___errno_location()|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = (_strerror(($311|0))|0);
    $a$1 = $312;
    label = 96;
    break;
   }
   case 115:  {
    $313 = $195;
    $314 = ($195|0)==(0);
    $$15 = $314 ? 6472 : $313;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 6:  {
     $209 = $195;
     HEAP32[$209>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $207 = $cnt$1&255;
     $208 = $195;
     HEAP8[$208>>0] = $207;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $198 = ($cnt$1|0)<(0);
     $199 = $198 << 31 >> 31;
     $200 = $195;
     $201 = $200;
     $202 = $201;
     HEAP32[$202>>2] = $cnt$1;
     $203 = (($201) + 4)|0;
     $204 = $203;
     HEAP32[$204>>2] = $199;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $196 = $195;
     HEAP32[$196>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $205 = $cnt$1&65535;
     $206 = $195;
     HEAP16[$206>>1] = $205;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $210 = ($cnt$1|0)<(0);
     $211 = $210 << 31 >> 31;
     $212 = $195;
     $213 = $212;
     $214 = $213;
     HEAP32[$214>>2] = $cnt$1;
     $215 = (($213) + 4)|0;
     $216 = $215;
     HEAP32[$216>>2] = $211;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $197 = $195;
     HEAP32[$197>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $195;
    HEAP32[$5>>2] = 0;
    $1044 = $wc;$1045 = $6;$p$4264 = -1;
    label = 101;
    break;
   }
   case 83:  {
    $321 = $195;
    $322 = ($p$0|0)==(0);
    if ($322) {
     $1046 = $195;$1047 = $321;$i$0$lcssa265 = 0;
     label = 106;
    } else {
     $1044 = $321;$1045 = $195;$p$4264 = $p$0;
     label = 101;
    }
    break;
   }
   case 105: case 100:  {
    $260 = ($222|0)<(0);
    if ($260) {
     $261 = (_i64Subtract(0,0,($195|0),($222|0))|0);
     $262 = tempRet0;
     $267 = $262;$269 = $261;$pl$0 = 1;$prefix$0 = 6456;
     label = 86;
     break L89;
    }
    $263 = $fl$1$ & 2048;
    $264 = ($263|0)==(0);
    if ($264) {
     $265 = $fl$1$ & 1;
     $266 = ($265|0)==(0);
     $$ = $266 ? 6456 : ((6456 + 2|0));
     $267 = $222;$269 = $195;$pl$0 = $265;$prefix$0 = $$;
     label = 86;
    } else {
     $267 = $222;$269 = $195;$pl$0 = 1;$prefix$0 = ((6456 + 1|0));
     label = 86;
    }
    break;
   }
   case 112:  {
    $217 = ($p$0>>>0)>(8);
    $218 = $217 ? $p$0 : 8;
    $219 = $fl$1$ | 8;
    $fl$3 = $219;$p$1 = $218;$t$1 = 120;
    label = 75;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $195;HEAP32[tempDoublePtr+4>>2] = $222;$360 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $361 = ($222|0)<(0);
    if ($361) {
     $362 = -$360;
     $$010$i = $362;$pl$0$i = 1;$prefix$0$i = 6480;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? ((6480 + 1|0)) : ((6480 + 6|0));
      $$010$i = $360;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$010$i = $360;$pl$0$i = 1;$prefix$0$i = ((6480 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    if (!($374)) {
     $375 = $t$0 & 32;
     $376 = ($375|0)!=(0);
     $377 = $376 ? 6504 : 6512;
     $378 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($378) {
      $379 = $376 ? 6520 : 6528;
      $pl$1$i = 0;$s1$0$i = $379;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $377;
     }
     $380 = (($pl$1$i) + 3)|0;
     $381 = $fl$1$ & 8192;
     $382 = ($381|0)==(0);
     $383 = ($w$1|0)>($380|0);
     $or$cond$i40$i = $382 & $383;
     if ($or$cond$i40$i) {
      $384 = (($w$1) - ($380))|0;
      $385 = ($384>>>0)>(256);
      $386 = $385 ? 256 : $384;
      _memset(($pad$i|0),32,($386|0))|0;
      $387 = ($384>>>0)>(255);
      if ($387) {
       $$01$i42$i = $384;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $388 = (($$01$i42$i) + -256)|0;
        $389 = ($388>>>0)>(255);
        if ($389) {
         $$01$i42$i = $388;
        } else {
         break;
        }
       }
       $390 = $384 & 255;
       $$0$lcssa$i44$i = $390;
      } else {
       $$0$lcssa$i44$i = $384;
      }
      (___fwritex($pad$i,$$0$lcssa$i44$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $391 = $fl$1$ & 73728;
     $392 = ($391|0)==(8192);
     $or$cond$i47$i = $392 & $383;
     if ($or$cond$i47$i) {
      $393 = (($w$1) - ($380))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i49$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i49$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i49$i = $397;
        } else {
         break;
        }
       }
       $399 = $393 & 255;
       $$0$lcssa$i51$i = $399;
      } else {
       $$0$lcssa$i51$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i51$i,$f)|0);
     }
     $w$$i = $383 ? $w$1 : $380;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $400 = (+_frexpl($$010$i,$e2$i));
    $401 = $400 * 2.0;
    $402 = $401 != 0.0;
    if ($402) {
     $403 = HEAP32[$e2$i>>2]|0;
     $404 = (($403) + -1)|0;
     HEAP32[$e2$i>>2] = $404;
    }
    $405 = $t$0 | 32;
    $406 = ($405|0)==(97);
    if ($406) {
     $407 = $t$0 & 32;
     $408 = ($407|0)==(0);
     $409 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $408 ? $prefix$0$i : $409;
     $410 = $pl$0$i | 2;
     $411 = ($p$0>>>0)>(11);
     $412 = (12 - ($p$0))|0;
     $re$0$i = $411 ? 0 : $412;
     $413 = ($re$0$i|0)==(0);
     do {
      if ($413) {
       $$1$i = $401;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $414 = (($re$1163$i) + -1)|0;
        $415 = $round$0162$i * 16.0;
        $416 = ($414|0)==(0);
        if ($416) {
         break;
        } else {
         $re$1163$i = $414;$round$0162$i = $415;
        }
       }
       $417 = HEAP8[$prefix$0$$i>>0]|0;
       $418 = ($417<<24>>24)==(45);
       if ($418) {
        $419 = -$401;
        $420 = $419 - $415;
        $421 = $415 + $420;
        $422 = -$421;
        $$1$i = $422;
        break;
       } else {
        $423 = $401 + $415;
        $424 = $423 - $415;
        $$1$i = $424;
        break;
       }
      }
     } while(0);
     $425 = HEAP32[$e2$i>>2]|0;
     $426 = ($425|0)<(0);
     $427 = (0 - ($425))|0;
     $428 = $426 ? $427 : $425;
     $429 = ($428|0)<(0);
     if ($429) {
      $430 = ($428|0)<(0);
      $431 = $430 << 31 >> 31;
      $$05$i$i = $7;$432 = $428;$433 = $431;
      while(1) {
       $434 = (___uremdi3(($432|0),($433|0),10,0)|0);
       $435 = tempRet0;
       $436 = $434 | 48;
       $437 = $436&255;
       $438 = (($$05$i$i) + -1|0);
       HEAP8[$438>>0] = $437;
       $439 = (___udivdi3(($432|0),($433|0),10,0)|0);
       $440 = tempRet0;
       $441 = ($433>>>0)>(9);
       $442 = ($432>>>0)>(4294967295);
       $443 = ($433|0)==(9);
       $444 = $443 & $442;
       $445 = $441 | $444;
       if ($445) {
        $$05$i$i = $438;$432 = $439;$433 = $440;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $438;$$01$lcssa$off0$i$i = $439;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $428;
     }
     $446 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($446) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $447 = (($y$03$i$i>>>0) % 10)&-1;
       $448 = $447 | 48;
       $449 = $448&255;
       $450 = (($$12$i$i) + -1|0);
       HEAP8[$450>>0] = $449;
       $451 = (($y$03$i$i>>>0) / 10)&-1;
       $452 = ($y$03$i$i>>>0)<(10);
       if ($452) {
        $$1$lcssa$i$i = $450;
        break;
       } else {
        $$12$i$i = $450;$y$03$i$i = $451;
       }
      }
     }
     $453 = ($$1$lcssa$i$i|0)==($7|0);
     if ($453) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $454 = HEAP32[$e2$i>>2]|0;
     $455 = $454 >> 31;
     $456 = $455 & 2;
     $457 = (($456) + 43)|0;
     $458 = $457&255;
     $459 = (($estr$0$i) + -1|0);
     HEAP8[$459>>0] = $458;
     $460 = (($t$0) + 15)|0;
     $461 = $460&255;
     $462 = (($estr$0$i) + -2|0);
     HEAP8[$462>>0] = $461;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $463 = $fl$1$ & 8;
      $464 = ($463|0)==(0);
      if ($464) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $465 = (~~(($$2$us$us$i)));
        $466 = (6536 + ($465)|0);
        $467 = HEAP8[$466>>0]|0;
        $468 = $467&255;
        $469 = $468 | $407;
        $470 = $469&255;
        $471 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $470;
        $472 = (+($465|0));
        $473 = $$2$us$us$i - $472;
        $474 = $473 * 16.0;
        $475 = $471;
        $476 = (($475) - ($0))|0;
        $477 = ($476|0)!=(1);
        $notlhs$us$us$i = $474 == 0.0;
        $or$cond$i73 = $477 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $471;
        } else {
         $478 = (($s$0$us$us$i) + 2|0);
         HEAP8[$471>>0] = 46;
         $s$1$us$us$i = $478;
        }
        $479 = $474 != 0.0;
        if ($479) {
         $$2$us$us$i = $474;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $480 = (~~(($$2$us$i)));
        $481 = (6536 + ($480)|0);
        $482 = HEAP8[$481>>0]|0;
        $483 = $482&255;
        $484 = $483 | $407;
        $485 = $484&255;
        $486 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $485;
        $487 = (+($480|0));
        $488 = $$2$us$i - $487;
        $489 = $488 * 16.0;
        $490 = $486;
        $491 = (($490) - ($0))|0;
        $492 = ($491|0)==(1);
        if ($492) {
         $493 = (($s$0$us$i) + 2|0);
         HEAP8[$486>>0] = 46;
         $s$1$us$i = $493;
        } else {
         $s$1$us$i = $486;
        }
        $494 = $489 != 0.0;
        if ($494) {
         $$2$us$i = $489;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $495 = (~~(($$2$i)));
       $496 = (6536 + ($495)|0);
       $497 = HEAP8[$496>>0]|0;
       $498 = $497&255;
       $499 = $498 | $407;
       $500 = $499&255;
       $501 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $500;
       $502 = (+($495|0));
       $503 = $$2$i - $502;
       $504 = $503 * 16.0;
       $505 = $501;
       $506 = (($505) - ($0))|0;
       $507 = ($506|0)==(1);
       if ($507) {
        $508 = (($s$0$i) + 2|0);
        HEAP8[$501>>0] = 46;
        $s$1$i = $508;
       } else {
        $s$1$i = $501;
       }
       $509 = $504 != 0.0;
       if ($509) {
        $$2$i = $504;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $510 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $511 = (($11) + ($$pre306$i))|0;
     $512 = ($511|0)<($p$0|0);
     $or$cond269 = $510 & $512;
     $513 = $462;
     if ($or$cond269) {
      $514 = (($12) + ($p$0))|0;
      $515 = (($514) - ($513))|0;
      $l$0$i = $515;
     } else {
      $516 = (($10) - ($513))|0;
      $517 = (($516) + ($$pre306$i))|0;
      $l$0$i = $517;
     }
     $518 = (($l$0$i) + ($410))|0;
     $519 = $fl$1$ & 73728;
     $520 = ($519|0)==(0);
     $521 = ($w$1|0)>($518|0);
     $or$cond$i57$i = $520 & $521;
     if ($or$cond$i57$i) {
      $522 = (($w$1) - ($518))|0;
      $523 = ($522>>>0)>(256);
      $524 = $523 ? 256 : $522;
      _memset(($pad$i|0),32,($524|0))|0;
      $525 = ($522>>>0)>(255);
      if ($525) {
       $$01$i59$i = $522;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $526 = (($$01$i59$i) + -256)|0;
        $527 = ($526>>>0)>(255);
        if ($527) {
         $$01$i59$i = $526;
        } else {
         break;
        }
       }
       $528 = $522 & 255;
       $$0$lcssa$i61$i = $528;
      } else {
       $$0$lcssa$i61$i = $522;
      }
      (___fwritex($pad$i,$$0$lcssa$i61$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$410,$f)|0);
     $529 = ($519|0)==(65536);
     $or$cond$i64$i = $529 & $521;
     if ($or$cond$i64$i) {
      $530 = (($w$1) - ($518))|0;
      $531 = ($530>>>0)>(256);
      $532 = $531 ? 256 : $530;
      _memset(($pad$i|0),48,($532|0))|0;
      $533 = ($530>>>0)>(255);
      if ($533) {
       $$01$i66$i = $530;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $534 = (($$01$i66$i) + -256)|0;
        $535 = ($534>>>0)>(255);
        if ($535) {
         $$01$i66$i = $534;
        } else {
         break;
        }
       }
       $536 = $530 & 255;
       $$0$lcssa$i68$i = $536;
      } else {
       $$0$lcssa$i68$i = $530;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     $537 = (($$pre306$i) - ($0))|0;
     (___fwritex($buf$i,$537,$f)|0);
     $538 = $462;
     $539 = (($9) - ($538))|0;
     $540 = (($l$0$i) - ($539))|0;
     $541 = (($540) - ($537))|0;
     $542 = ($541|0)>(0);
     if ($542) {
      $543 = ($541>>>0)>(256);
      $544 = $543 ? 256 : $541;
      _memset(($pad$i|0),48,($544|0))|0;
      $545 = ($541>>>0)>(255);
      if ($545) {
       $$01$i72$i = $541;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $546 = (($$01$i72$i) + -256)|0;
        $547 = ($546>>>0)>(255);
        if ($547) {
         $$01$i72$i = $546;
        } else {
         break;
        }
       }
       $548 = $541 & 255;
       $$0$lcssa$i74$i = $548;
      } else {
       $$0$lcssa$i74$i = $541;
      }
      (___fwritex($pad$i,$$0$lcssa$i74$i,$f)|0);
     }
     (___fwritex($462,$539,$f)|0);
     $549 = ($519|0)==(8192);
     $or$cond$i77$i = $549 & $521;
     if ($or$cond$i77$i) {
      $550 = (($w$1) - ($518))|0;
      $551 = ($550>>>0)>(256);
      $552 = $551 ? 256 : $550;
      _memset(($pad$i|0),32,($552|0))|0;
      $553 = ($550>>>0)>(255);
      if ($553) {
       $$01$i79$i = $550;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $554 = (($$01$i79$i) + -256)|0;
        $555 = ($554>>>0)>(255);
        if ($555) {
         $$01$i79$i = $554;
        } else {
         break;
        }
       }
       $556 = $550 & 255;
       $$0$lcssa$i81$i = $556;
      } else {
       $$0$lcssa$i81$i = $550;
      }
      (___fwritex($pad$i,$$0$lcssa$i81$i,$f)|0);
     }
     $w$22$i = $521 ? $w$1 : $518;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $557 = ($p$0|0)<(0);
    $$p$i = $557 ? 6 : $p$0;
    if ($402) {
     $558 = $401 * 268435456.0;
     $559 = HEAP32[$e2$i>>2]|0;
     $560 = (($559) + -28)|0;
     HEAP32[$e2$i>>2] = $560;
     $$3$i = $558;$561 = $560;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $401;$561 = $$pre$i;
    }
    $562 = ($561|0)<(0);
    $$36$i = $562 ? $big$i : $13;
    $563 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $564 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $564;
     $565 = (($z$0$i) + 4|0);
     $566 = (+($564>>>0));
     $567 = $$4$i - $566;
     $568 = $567 * 1.0E+9;
     $569 = $568 != 0.0;
     if ($569) {
      $$4$i = $568;$z$0$i = $565;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $570 = ($$pr$i|0)>(0);
    if ($570) {
     $571 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $565;
     while(1) {
      $572 = ($571|0)>(29);
      $573 = $572 ? 29 : $571;
      $d$0249$i = (($z$1257$i) + -4|0);
      $574 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($574) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $575 = HEAP32[$d$0251$i>>2]|0;
         $576 = (_bitshift64Shl(($575|0),0,($573|0))|0);
         $577 = tempRet0;
         $578 = (_i64Add(($576|0),($577|0),($carry$0250$i|0),0)|0);
         $579 = tempRet0;
         $580 = (___uremdi3(($578|0),($579|0),1000000000,0)|0);
         $581 = tempRet0;
         HEAP32[$d$0251$i>>2] = $580;
         $582 = (___udivdi3(($578|0),($579|0),1000000000,0)|0);
         $583 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $584 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($584) {
          break;
         } else {
          $carry$0250$i = $582;$d$0251$i = $d$0$i;
         }
        }
        $585 = ($582|0)==(0);
        if ($585) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $586 = (($a$1258$i) + -4|0);
        HEAP32[$586>>2] = $582;
        $a$2$ph$i = $586;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $587 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($587)) {
        break;
       }
       $588 = (($z$2$i) + -4|0);
       $589 = HEAP32[$588>>2]|0;
       $590 = ($589|0)==(0);
       if ($590) {
        $z$2$i = $588;
       } else {
        break;
       }
      }
      $591 = HEAP32[$e2$i>>2]|0;
      $592 = (($591) - ($573))|0;
      HEAP32[$e2$i>>2] = $592;
      $593 = ($592|0)>(0);
      if ($593) {
       $571 = $592;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $592;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $565;
    }
    $594 = ($$pr151$i|0)<(0);
    L246: do {
     if ($594) {
      $595 = (($$p$i) + 25)|0;
      $596 = (($595|0) / 9)&-1;
      $597 = (($596) + 1)|0;
      $598 = ($405|0)==(102);
      if ($598) {
       $599 = (($$36$i) + ($597<<2)|0);
       $601 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $600 = (0 - ($601))|0;
        $602 = ($600|0)>(9);
        $$23$us$i = $602 ? 9 : $600;
        $603 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($603) {
          $628 = 1 << $$23$us$i;
          $622 = (($628) + -1)|0;
          $625 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $620 = HEAP32[$d$1237$us$i>>2]|0;
           $621 = $620 & $622;
           $623 = $620 >>> $$23$us$i;
           $624 = (($623) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $624;
           $610 = Math_imul($621, $625)|0;
           $626 = (($d$1237$us$i) + 4|0);
           $627 = ($626>>>0)<($z$3243$us$i>>>0);
           if ($627) {
            $carry3$0238$us$i = $610;$d$1237$us$i = $626;
           } else {
            break;
           }
          }
          $607 = HEAP32[$a$3244$us$i>>2]|0;
          $608 = ($607|0)==(0);
          $609 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $608 ? $609 : $a$3244$us$i;
          $611 = ($610|0)==(0);
          if ($611) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $612 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $610;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $612;
         } else {
          $604 = HEAP32[$a$3244$us$i>>2]|0;
          $605 = ($604|0)==(0);
          $606 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $605 ? $606 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $613 = $z$4$us$i;
        $614 = (($613) - ($563))|0;
        $615 = $614 >> 2;
        $616 = ($615|0)>($597|0);
        $$z$4$us$i = $616 ? $599 : $z$4$us$i;
        $617 = HEAP32[$e2$i>>2]|0;
        $618 = (($617) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $618;
        $619 = ($618|0)<(0);
        if ($619) {
         $601 = $618;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L246;
        }
       }
      } else {
       $630 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $629 = (0 - ($630))|0;
       $631 = ($629|0)>(9);
       $$23$i = $631 ? 9 : $629;
       $632 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($632) {
         $636 = 1 << $$23$i;
         $637 = (($636) + -1)|0;
         $638 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $639 = HEAP32[$d$1237$i>>2]|0;
          $640 = $639 & $637;
          $641 = $639 >>> $$23$i;
          $642 = (($641) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $642;
          $643 = Math_imul($640, $638)|0;
          $644 = (($d$1237$i) + 4|0);
          $645 = ($644>>>0)<($z$3243$i>>>0);
          if ($645) {
           $carry3$0238$i = $643;$d$1237$i = $644;
          } else {
           break;
          }
         }
         $646 = HEAP32[$a$3244$i>>2]|0;
         $647 = ($646|0)==(0);
         $648 = (($a$3244$i) + 4|0);
         $$a$3$i = $647 ? $648 : $a$3244$i;
         $649 = ($643|0)==(0);
         if ($649) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $650 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $643;
         $$a$3310$i = $$a$3$i;$z$4$i = $650;
        } else {
         $633 = HEAP32[$a$3244$i>>2]|0;
         $634 = ($633|0)==(0);
         $635 = (($a$3244$i) + 4|0);
         $$a$3309$i = $634 ? $635 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $651 = $z$4$i;
       $652 = $$a$3310$i;
       $653 = (($651) - ($652))|0;
       $654 = $653 >> 2;
       $655 = ($654|0)>($597|0);
       if ($655) {
        $656 = (($$a$3310$i) + ($597<<2)|0);
        $z$5$i = $656;
       } else {
        $z$5$i = $z$4$i;
       }
       $657 = HEAP32[$e2$i>>2]|0;
       $658 = (($657) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $658;
       $659 = ($658|0)<(0);
       if ($659) {
        $630 = $658;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $660 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($660) {
      $661 = $a$3$lcssa$i;
      $662 = (($563) - ($661))|0;
      $663 = $662 >> 2;
      $664 = ($663*9)|0;
      $665 = HEAP32[$a$3$lcssa$i>>2]|0;
      $666 = ($665>>>0)<(10);
      if ($666) {
       $e$1$i = $664;
       break;
      } else {
       $e$0233$i = $664;$i$0232$i = 10;
      }
      while(1) {
       $667 = ($i$0232$i*10)|0;
       $668 = (($e$0233$i) + 1)|0;
       $669 = ($665>>>0)<($667>>>0);
       if ($669) {
        $e$1$i = $668;
        break;
       } else {
        $e$0233$i = $668;$i$0232$i = $667;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $670 = ($405|0)!=(102);
    $671 = $670 ? $e$1$i : 0;
    $672 = (($$p$i) - ($671))|0;
    $673 = ($405|0)==(103);
    $674 = ($$p$i|0)!=(0);
    $$24$i = $673 & $674;
    $$neg156$i = $$24$i << 31 >> 31;
    $675 = (($672) + ($$neg156$i))|0;
    $676 = $z$3$lcssa$i;
    $677 = (($676) - ($563))|0;
    $678 = $677 >> 2;
    $679 = ($678*9)|0;
    $680 = (($679) + -9)|0;
    $681 = ($675|0)<($680|0);
    if ($681) {
     $682 = (($675) + 9216)|0;
     $683 = (($682|0) / 9)&-1;
     $$sum$i = (($683) + -1023)|0;
     $684 = (($$36$i) + ($$sum$i<<2)|0);
     $685 = (($682|0) % 9)&-1;
     $j$0224$i = (($685) + 1)|0;
     $686 = ($j$0224$i|0)<(9);
     if ($686) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $687 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $687;
        break;
       } else {
        $i$1225$i = $687;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $688 = HEAP32[$684>>2]|0;
     $689 = (($688>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $690 = ($689|0)==(0);
     if ($690) {
      $$sum18$i = (($683) + -1022)|0;
      $691 = (($$36$i) + ($$sum18$i<<2)|0);
      $692 = ($691|0)==($z$3$lcssa$i|0);
      if ($692) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $684;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $693 = (($688>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $694 = $693 & 1;
       $695 = ($694|0)==(0);
       $$25$i = $695 ? 9007199254740992.0 : 9007199254740994.0;
       $696 = (($i$1$lcssa$i|0) / 2)&-1;
       $697 = ($689>>>0)<($696>>>0);
       do {
        if ($697) {
         $small$0$i = 0.5;
        } else {
         $698 = ($689|0)==($696|0);
         if ($698) {
          $$sum19$i = (($683) + -1022)|0;
          $699 = (($$36$i) + ($$sum19$i<<2)|0);
          $700 = ($699|0)==($z$3$lcssa$i|0);
          if ($700) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $701 = ($pl$0$i|0)==(0);
       do {
        if ($701) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $702 = HEAP8[$prefix$0$i>>0]|0;
         $703 = ($702<<24>>24)==(45);
         if (!($703)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $704 = $$25$i * -1.0;
         $705 = $small$0$i * -1.0;
         $round6$1$i = $704;$small$1$i = $705;
        }
       } while(0);
       $706 = (($688) - ($689))|0;
       HEAP32[$684>>2] = $706;
       $707 = $round6$1$i + $small$1$i;
       $708 = $707 != $round6$1$i;
       if (!($708)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $684;$e$3$i = $e$1$i;
        break;
       }
       $709 = (($706) + ($i$1$lcssa$i))|0;
       HEAP32[$684>>2] = $709;
       $710 = ($709>>>0)>(999999999);
       if ($710) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $684;
        while(1) {
         $711 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $712 = ($711>>>0)<($a$5218$i>>>0);
         if ($712) {
          $713 = (($a$5218$i) + -4|0);
          HEAP32[$713>>2] = 0;
          $a$6$i = $713;
         } else {
          $a$6$i = $a$5218$i;
         }
         $714 = HEAP32[$711>>2]|0;
         $715 = (($714) + 1)|0;
         HEAP32[$711>>2] = $715;
         $716 = ($715>>>0)>(999999999);
         if ($716) {
          $a$5218$i = $a$6$i;$d$2217$i = $711;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $711;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $684;
       }
       $717 = $a$5$lcssa$i;
       $718 = (($563) - ($717))|0;
       $719 = $718 >> 2;
       $720 = ($719*9)|0;
       $721 = HEAP32[$a$5$lcssa$i>>2]|0;
       $722 = ($721>>>0)<(10);
       if ($722) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $720;
        break;
       } else {
        $e$2213$i = $720;$i$2212$i = 10;
       }
       while(1) {
        $723 = ($i$2212$i*10)|0;
        $724 = (($e$2213$i) + 1)|0;
        $725 = ($721>>>0)<($723>>>0);
        if ($725) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $724;
         break;
        } else {
         $e$2213$i = $724;$i$2212$i = $723;
        }
       }
      }
     } while(0);
     $726 = (($d$3$i) + 4|0);
     $727 = ($z$3$lcssa$i>>>0)>($726>>>0);
     $$z$3$i = $727 ? $726 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $728 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $729 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($729)) {
      $$lcssa292$i = 0;
      break;
     }
     $730 = (($z$6$i) + -4|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = ($731|0)==(0);
     if ($732) {
      $z$6$i = $730;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($673) {
      $733 = ($$p$i|0)==(0);
      $734 = $733&1;
      $$$p$i = (($734) + ($$p$i))|0;
      $735 = ($$$p$i|0)>($e$4$ph$i|0);
      $736 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $735 & $736;
      if ($or$cond5$i) {
       $737 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $738 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $737;$$213$i = $738;
      } else {
       $739 = (($t$0) + -2)|0;
       $740 = (($$$p$i) + -1)|0;
       $$016$i = $739;$$213$i = $740;
      }
      $741 = $fl$1$ & 8;
      $742 = ($741|0)==(0);
      if (!($742)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $743 = (($z$6$i) + -4|0);
        $744 = HEAP32[$743>>2]|0;
        $745 = ($744|0)==(0);
        if ($745) {
         $j$2$i = 9;
         break;
        }
        $746 = (($744>>>0) % 10)&-1;
        $747 = ($746|0)==(0);
        if ($747) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $748 = ($i$3204$i*10)|0;
         $749 = (($j$1205$i) + 1)|0;
         $750 = (($744>>>0) % ($748>>>0))&-1;
         $751 = ($750|0)==(0);
         if ($751) {
          $i$3204$i = $748;$j$1205$i = $749;
         } else {
          $j$2$i = $749;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $752 = $$016$i | 32;
      $753 = ($752|0)==(102);
      $754 = $z$6$i;
      $755 = (($754) - ($563))|0;
      $756 = $755 >> 2;
      $757 = ($756*9)|0;
      $758 = (($757) + -9)|0;
      if ($753) {
       $759 = (($758) - ($j$2$i))|0;
       $760 = ($759|0)<(0);
       $$26$i = $760 ? 0 : $759;
       $761 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $761 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $762 = (($758) + ($e$4$ph$i))|0;
       $763 = (($762) - ($j$2$i))|0;
       $764 = ($763|0)<(0);
       $$28$i = $764 ? 0 : $763;
       $765 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $765 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $766 = ($$314$i|0)!=(0);
    if ($766) {
     $770 = 1;
    } else {
     $767 = $fl$1$ & 8;
     $768 = ($767|0)!=(0);
     $770 = $768;
    }
    $769 = $770&1;
    $771 = $$117$i | 32;
    $772 = ($771|0)==(102);
    if ($772) {
     $773 = ($e$4$ph$i|0)>(0);
     $774 = $773 ? $e$4$ph$i : 0;
     $$pn$i = $774;$estr$2$i = 0;
    } else {
     $775 = ($e$4$ph$i|0)<(0);
     $776 = $775 ? $728 : $e$4$ph$i;
     $777 = ($776|0)<(0);
     if ($777) {
      $778 = ($776|0)<(0);
      $779 = $778 << 31 >> 31;
      $$05$i84$i = $7;$780 = $776;$781 = $779;
      while(1) {
       $782 = (___uremdi3(($780|0),($781|0),10,0)|0);
       $783 = tempRet0;
       $784 = $782 | 48;
       $785 = $784&255;
       $786 = (($$05$i84$i) + -1|0);
       HEAP8[$786>>0] = $785;
       $787 = (___udivdi3(($780|0),($781|0),10,0)|0);
       $788 = tempRet0;
       $789 = ($781>>>0)>(9);
       $790 = ($780>>>0)>(4294967295);
       $791 = ($781|0)==(9);
       $792 = $791 & $790;
       $793 = $789 | $792;
       if ($793) {
        $$05$i84$i = $786;$780 = $787;$781 = $788;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $786;$$01$lcssa$off0$i90$i = $787;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $776;
     }
     $794 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($794) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $795 = (($y$03$i91$i>>>0) % 10)&-1;
       $796 = $795 | 48;
       $797 = $796&255;
       $798 = (($$12$i92$i) + -1|0);
       HEAP8[$798>>0] = $797;
       $799 = (($y$03$i91$i>>>0) / 10)&-1;
       $800 = ($y$03$i91$i>>>0)<(10);
       if ($800) {
        $estr$1$ph$i = $798;
        break;
       } else {
        $$12$i92$i = $798;$y$03$i91$i = $799;
       }
      }
     }
     $801 = $estr$1$ph$i;
     $802 = (($9) - ($801))|0;
     $803 = ($802|0)<(2);
     if ($803) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $804 = (($estr$1195$i) + -1|0);
       HEAP8[$804>>0] = 48;
       $805 = $804;
       $806 = (($9) - ($805))|0;
       $807 = ($806|0)<(2);
       if ($807) {
        $estr$1195$i = $804;
       } else {
        $estr$1$lcssa$i = $804;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $808 = $e$4$ph$i >> 31;
     $809 = $808 & 2;
     $810 = (($809) + 43)|0;
     $811 = $810&255;
     $812 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$812>>0] = $811;
     $813 = $$117$i&255;
     $814 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$814>>0] = $813;
     $815 = $814;
     $816 = (($9) - ($815))|0;
     $$pn$i = $816;$estr$2$i = $814;
    }
    $817 = (($pl$0$i) + 1)|0;
    $818 = (($817) + ($$314$i))|0;
    $l$1$i = (($818) + ($769))|0;
    $819 = (($l$1$i) + ($$pn$i))|0;
    $820 = $fl$1$ & 73728;
    $821 = ($820|0)==(0);
    $822 = ($w$1|0)>($819|0);
    $or$cond$i98$i = $821 & $822;
    if ($or$cond$i98$i) {
     $823 = (($w$1) - ($819))|0;
     $824 = ($823>>>0)>(256);
     $825 = $824 ? 256 : $823;
     _memset(($pad$i|0),32,($825|0))|0;
     $826 = ($823>>>0)>(255);
     if ($826) {
      $$01$i100$i = $823;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $827 = (($$01$i100$i) + -256)|0;
       $828 = ($827>>>0)>(255);
       if ($828) {
        $$01$i100$i = $827;
       } else {
        break;
       }
      }
      $829 = $823 & 255;
      $$0$lcssa$i102$i = $829;
     } else {
      $$0$lcssa$i102$i = $823;
     }
     (___fwritex($pad$i,$$0$lcssa$i102$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $830 = ($820|0)==(65536);
    $or$cond$i105$i = $830 & $822;
    if ($or$cond$i105$i) {
     $831 = (($w$1) - ($819))|0;
     $832 = ($831>>>0)>(256);
     $833 = $832 ? 256 : $831;
     _memset(($pad$i|0),48,($833|0))|0;
     $834 = ($831>>>0)>(255);
     if ($834) {
      $$01$i107$i = $831;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $835 = (($$01$i107$i) + -256)|0;
       $836 = ($835>>>0)>(255);
       if ($836) {
        $$01$i107$i = $835;
       } else {
        break;
       }
      }
      $837 = $831 & 255;
      $$0$lcssa$i109$i = $837;
     } else {
      $$0$lcssa$i109$i = $831;
     }
     (___fwritex($pad$i,$$0$lcssa$i109$i,$f)|0);
    }
    do {
     if ($772) {
      $838 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $838 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $839 = HEAP32[$d$4180$i>>2]|0;
       $840 = ($839|0)==(0);
       if ($840) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $839;
        while(1) {
         $841 = (($y$03$i114$i>>>0) % 10)&-1;
         $842 = $841 | 48;
         $843 = $842&255;
         $844 = (($$12$i115$i) + -1|0);
         HEAP8[$844>>0] = $843;
         $845 = (($y$03$i114$i>>>0) / 10)&-1;
         $846 = ($y$03$i114$i>>>0)<(10);
         if ($846) {
          $$1$lcssa$i117$i = $844;
          break;
         } else {
          $$12$i115$i = $844;$y$03$i114$i = $845;
         }
        }
       }
       $847 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($847) {
         $851 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($851)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $848 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($848) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $849 = (($s7$0177$i) + -1|0);
          HEAP8[$849>>0] = 48;
          $850 = ($849>>>0)>($buf$i>>>0);
          if ($850) {
           $s7$0177$i = $849;
          } else {
           $s7$1$i = $849;
           break;
          }
         }
        }
       } while(0);
       $852 = $s7$1$i;
       $853 = (($15) - ($852))|0;
       (___fwritex($s7$1$i,$853,$f)|0);
       $854 = (($d$4180$i) + 4|0);
       $855 = ($854>>>0)>($$36$i>>>0);
       if ($855) {
        break;
       } else {
        $d$4180$i = $854;
       }
      }
      $$not$i = $766 ^ 1;
      $856 = $fl$1$ & 8;
      $857 = ($856|0)==(0);
      $or$cond32$i = $857 & $$not$i;
      if (!($or$cond32$i)) {
       (___fwritex(6552,1,$f)|0);
      }
      $858 = ($854>>>0)<($z$6$i>>>0);
      $859 = ($$314$i|0)>(0);
      $or$cond7169$i = $858 & $859;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $854;
       while(1) {
        $860 = HEAP32[$d$5170$i>>2]|0;
        $861 = ($860|0)==(0);
        if ($861) {
         $s8$0165$i = $14;
         label = 301;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $860;
         while(1) {
          $862 = (($y$03$i123$i>>>0) % 10)&-1;
          $863 = $862 | 48;
          $864 = $863&255;
          $865 = (($$12$i124$i) + -1|0);
          HEAP8[$865>>0] = $864;
          $866 = (($y$03$i123$i>>>0) / 10)&-1;
          $867 = ($y$03$i123$i>>>0)<(10);
          if ($867) {
           break;
          } else {
           $$12$i124$i = $865;$y$03$i123$i = $866;
          }
         }
         $868 = ($865>>>0)>($buf$i>>>0);
         if ($868) {
          $s8$0165$i = $865;
          label = 301;
         } else {
          $s8$0$lcssa$i = $865;
         }
        }
        if ((label|0) == 301) {
         while(1) {
          label = 0;
          $869 = (($s8$0165$i) + -1|0);
          HEAP8[$869>>0] = 48;
          $870 = ($869>>>0)>($buf$i>>>0);
          if ($870) {
           $s8$0165$i = $869;
           label = 301;
          } else {
           $s8$0$lcssa$i = $869;
           break;
          }
         }
        }
        $871 = ($$415171$i|0)>(9);
        $872 = $871 ? 9 : $$415171$i;
        (___fwritex($s8$0$lcssa$i,$872,$f)|0);
        $873 = (($d$5170$i) + 4|0);
        $874 = (($$415171$i) + -9)|0;
        $875 = ($873>>>0)<($z$6$i>>>0);
        $876 = ($874|0)>(0);
        $or$cond7$i = $875 & $876;
        if ($or$cond7$i) {
         $$415171$i = $874;$d$5170$i = $873;
        } else {
         $$415$lcssa$i = $874;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $877 = ($$415$lcssa$i|0)>(0);
      if (!($877)) {
       break;
      }
      $878 = ($$415$lcssa$i>>>0)>(256);
      $879 = $878 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($879|0))|0;
      $880 = ($$415$lcssa$i>>>0)>(255);
      if ($880) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $881 = (($$01$i131$i) + -256)|0;
        $882 = ($881>>>0)>(255);
        if ($882) {
         $$01$i131$i = $881;
        } else {
         break;
        }
       }
       $883 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $883;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i133$i,$f)|0);
     } else {
      $884 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $884;
      $885 = ($$314$i|0)>(-1);
      do {
       if ($885) {
        $886 = $fl$1$ & 8;
        $887 = ($886|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $888 = HEAP32[$d$6188$i>>2]|0;
         $889 = ($888|0)==(0);
         if ($889) {
          label = 313;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $888;
          while(1) {
           $890 = (($y$03$i138$i>>>0) % 10)&-1;
           $891 = $890 | 48;
           $892 = $891&255;
           $893 = (($$12$i139$i) + -1|0);
           HEAP8[$893>>0] = $892;
           $894 = (($y$03$i138$i>>>0) / 10)&-1;
           $895 = ($y$03$i138$i>>>0)<(10);
           if ($895) {
            break;
           } else {
            $$12$i139$i = $893;$y$03$i138$i = $894;
           }
          }
          $896 = ($893|0)==($14|0);
          if ($896) {
           label = 313;
          } else {
           $s9$0$i = $893;
          }
         }
         if ((label|0) == 313) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $897 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($897) {
           $901 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $902 = ($$5189$i|0)<(1);
           $or$cond34$i = $902 & $887;
           if ($or$cond34$i) {
            $s9$2$i = $901;
            break;
           }
           (___fwritex(6552,1,$f)|0);
           $s9$2$i = $901;
          } else {
           $898 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($898) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $899 = (($s9$1184$i) + -1|0);
            HEAP8[$899>>0] = 48;
            $900 = ($899>>>0)>($buf$i>>>0);
            if ($900) {
             $s9$1184$i = $899;
            } else {
             $s9$2$i = $899;
             break;
            }
           }
          }
         } while(0);
         $903 = $s9$2$i;
         $904 = (($15) - ($903))|0;
         $905 = ($$5189$i|0)>($904|0);
         $$$5$i = $905 ? $904 : $$5189$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $906 = (($$5189$i) - ($904))|0;
         $907 = (($d$6188$i) + 4|0);
         $908 = ($907>>>0)<($z$6$$i>>>0);
         $909 = ($906|0)>(-1);
         $or$cond9$i = $908 & $909;
         if ($or$cond9$i) {
          $$5189$i = $906;$d$6188$i = $907;
         } else {
          break;
         }
        }
        $910 = ($906|0)>(0);
        if (!($910)) {
         break;
        }
        $911 = ($906>>>0)>(256);
        $912 = $911 ? 256 : $906;
        _memset(($pad$i|0),48,($912|0))|0;
        $913 = ($906>>>0)>(255);
        if ($913) {
         $$01$i146$i = $906;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $914 = (($$01$i146$i) + -256)|0;
          $915 = ($914>>>0)>(255);
          if ($915) {
           $$01$i146$i = $914;
          } else {
           break;
          }
         }
         $916 = $906 & 255;
         $$0$lcssa$i148$i = $916;
        } else {
         $$0$lcssa$i148$i = $906;
        }
        (___fwritex($pad$i,$$0$lcssa$i148$i,$f)|0);
       }
      } while(0);
      $917 = $estr$2$i;
      $918 = (($9) - ($917))|0;
      (___fwritex($estr$2$i,$918,$f)|0);
     }
    } while(0);
    $919 = ($820|0)==(8192);
    $or$cond$i$i = $919 & $822;
    if ($or$cond$i$i) {
     $920 = (($w$1) - ($819))|0;
     $921 = ($920>>>0)>(256);
     $922 = $921 ? 256 : $920;
     _memset(($pad$i|0),32,($922|0))|0;
     $923 = ($920>>>0)>(255);
     if ($923) {
      $$01$i$i = $920;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $924 = (($$01$i$i) + -256)|0;
       $925 = ($924>>>0)>(255);
       if ($925) {
        $$01$i$i = $924;
       } else {
        break;
       }
      }
      $926 = $920 & 255;
      $$0$lcssa$i$i = $926;
     } else {
      $$0$lcssa$i$i = $920;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$35$i = $822 ? $w$1 : $819;
    $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 117:  {
    $267 = $222;$269 = $195;$pl$0 = 0;$prefix$0 = 6456;
    label = 86;
    break;
   }
   case 99:  {
    $309 = $195&255;
    HEAP8[$4>>0] = $309;
    $1042 = $195;$1043 = $222;$a$2 = $4;$fl$6 = $194;$p$5 = 1;$pl$2 = 0;$prefix$2 = 6456;$z$2 = $2;
    break;
   }
   default: {
    $1042 = $195;$1043 = $222;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 6456;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $220 = $t$1 & 32;
    $221 = ($195|0)==(0);
    $223 = ($222|0)==(0);
    $224 = $221 & $223;
    if ($224) {
     $297 = $195;$299 = $222;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 6456;
     label = 91;
    } else {
     $$012$i = $2;$226 = $195;$233 = $222;
     while(1) {
      $225 = $226 & 15;
      $227 = (6536 + ($225)|0);
      $228 = HEAP8[$227>>0]|0;
      $229 = $228&255;
      $230 = $229 | $220;
      $231 = $230&255;
      $232 = (($$012$i) + -1|0);
      HEAP8[$232>>0] = $231;
      $234 = (_bitshift64Lshr(($226|0),($233|0),4)|0);
      $235 = tempRet0;
      $236 = ($234|0)==(0);
      $237 = ($235|0)==(0);
      $238 = $236 & $237;
      if ($238) {
       break;
      } else {
       $$012$i = $232;$226 = $234;$233 = $235;
      }
     }
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     if ($240) {
      $297 = $195;$299 = $222;$a$0 = $232;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 6456;
      label = 91;
     } else {
      $241 = $t$1 >> 4;
      $242 = (6456 + ($241)|0);
      $297 = $195;$299 = $222;$a$0 = $232;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $268 = ($267>>>0)>(0);
    $270 = ($269>>>0)>(4294967295);
    $271 = ($267|0)==(0);
    $272 = $271 & $270;
    $273 = $268 | $272;
    if ($273) {
     $$05$i = $2;$274 = $269;$275 = $267;
     while(1) {
      $276 = (___uremdi3(($274|0),($275|0),10,0)|0);
      $277 = tempRet0;
      $278 = $276 | 48;
      $279 = $278&255;
      $280 = (($$05$i) + -1|0);
      HEAP8[$280>>0] = $279;
      $281 = (___udivdi3(($274|0),($275|0),10,0)|0);
      $282 = tempRet0;
      $283 = ($275>>>0)>(9);
      $284 = ($274>>>0)>(4294967295);
      $285 = ($275|0)==(9);
      $286 = $285 & $284;
      $287 = $283 | $286;
      if ($287) {
       $$05$i = $280;$274 = $281;$275 = $282;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $280;$$01$lcssa$off0$i = $281;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $269;
    }
    $288 = ($$01$lcssa$off0$i|0)==(0);
    if ($288) {
     $297 = $269;$299 = $267;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $289 = (($y$03$i>>>0) % 10)&-1;
      $290 = $289 | 48;
      $291 = $290&255;
      $292 = (($$12$i) + -1|0);
      HEAP8[$292>>0] = $291;
      $293 = (($y$03$i>>>0) / 10)&-1;
      $294 = ($y$03$i>>>0)<(10);
      if ($294) {
       $297 = $269;$299 = $267;$a$0 = $292;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $292;$y$03$i = $293;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $315 = (_memchr($a$1,0,$p$0)|0);
    $316 = ($315|0)==(0|0);
    if ($316) {
     $317 = (($a$1) + ($p$0)|0);
     $1042 = $195;$1043 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 6456;$z$2 = $317;
     break;
    } else {
     $318 = $315;
     $319 = $a$1;
     $320 = (($318) - ($319))|0;
     $1042 = $195;$1043 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $320;$pl$2 = 0;$prefix$2 = 6456;$z$2 = $315;
     break;
    }
   }
   else if ((label|0) == 101) {
    label = 0;
    $i$0160 = 0;$l$1159 = 0;$ws$0161 = $1044;
    while(1) {
     $323 = HEAP32[$ws$0161>>2]|0;
     $324 = ($323|0)==(0);
     if ($324) {
      $i$0$lcssa = $i$0160;$l$2 = $l$1159;
      break;
     }
     $325 = (_wctomb($mb,$323)|0);
     $326 = ($325|0)<(0);
     $327 = (($p$4264) - ($i$0160))|0;
     $328 = ($325>>>0)>($327>>>0);
     $or$cond17 = $326 | $328;
     if ($or$cond17) {
      $i$0$lcssa = $i$0160;$l$2 = $325;
      break;
     }
     $329 = (($ws$0161) + 4|0);
     $330 = (($325) + ($i$0160))|0;
     $331 = ($p$4264>>>0)>($330>>>0);
     if ($331) {
      $i$0160 = $330;$l$1159 = $325;$ws$0161 = $329;
     } else {
      $i$0$lcssa = $330;$l$2 = $325;
      break;
     }
    }
    $332 = ($l$2|0)<(0);
    if ($332) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1046 = $1045;$1047 = $1044;$i$0$lcssa265 = $i$0$lcssa;
     label = 106;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $295 = ($p$2|0)>(-1);
   $296 = $fl$4 & -65537;
   $$fl$4 = $295 ? $296 : $fl$4;
   $298 = ($297|0)!=(0);
   $300 = ($299|0)!=(0);
   $301 = $298 | $300;
   $302 = ($p$2|0)!=(0);
   $or$cond = $301 | $302;
   if ($or$cond) {
    $303 = $a$0;
    $304 = (($3) - ($303))|0;
    $305 = $301&1;
    $306 = $305 ^ 1;
    $307 = (($306) + ($304))|0;
    $308 = ($p$2|0)>($307|0);
    $p$2$ = $308 ? $p$2 : $307;
    $1042 = $297;$1043 = $299;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1042 = $297;$1043 = $299;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $333 = $fl$1$ & 73728;
   $334 = ($333|0)==(0);
   $335 = ($w$1|0)>($i$0$lcssa265|0);
   $or$cond$i58 = $334 & $335;
   if ($or$cond$i58) {
    $336 = (($w$1) - ($i$0$lcssa265))|0;
    $337 = ($336>>>0)>(256);
    $338 = $337 ? 256 : $336;
    _memset(($pad$i|0),32,($338|0))|0;
    $339 = ($336>>>0)>(255);
    if ($339) {
     $$01$i60 = $336;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $340 = (($$01$i60) + -256)|0;
      $341 = ($340>>>0)>(255);
      if ($341) {
       $$01$i60 = $340;
      } else {
       break;
      }
     }
     $342 = $336 & 255;
     $$0$lcssa$i62 = $342;
    } else {
     $$0$lcssa$i62 = $336;
    }
    (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
   }
   $343 = ($i$0$lcssa265|0)==(0);
   L479: do {
    if (!($343)) {
     $i$1168 = 0;$ws$1169 = $1047;
     while(1) {
      $344 = HEAP32[$ws$1169>>2]|0;
      $345 = ($344|0)==(0);
      if ($345) {
       break L479;
      }
      $346 = (_wctomb($mb,$344)|0);
      $347 = (($346) + ($i$1168))|0;
      $348 = ($347|0)>($i$0$lcssa265|0);
      if ($348) {
       break L479;
      }
      $349 = (($ws$1169) + 4|0);
      (___fwritex($mb,$346,$f)|0);
      $350 = ($347>>>0)<($i$0$lcssa265>>>0);
      if ($350) {
       $i$1168 = $347;$ws$1169 = $349;
      } else {
       break;
      }
     }
    }
   } while(0);
   $351 = ($333|0)==(8192);
   $or$cond$i65 = $351 & $335;
   if ($or$cond$i65) {
    $352 = (($w$1) - ($i$0$lcssa265))|0;
    $353 = ($352>>>0)>(256);
    $354 = $353 ? 256 : $352;
    _memset(($pad$i|0),32,($354|0))|0;
    $355 = ($352>>>0)>(255);
    if ($355) {
     $$01$i67 = $352;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $356 = (($$01$i67) + -256)|0;
      $357 = ($356>>>0)>(255);
      if ($357) {
       $$01$i67 = $356;
      } else {
       break;
      }
     }
     $358 = $352 & 255;
     $$0$lcssa$i69 = $358;
    } else {
     $$0$lcssa$i69 = $352;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $359 = $335 ? $w$1 : $i$0$lcssa265;
   $1034 = $1046;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $359;$l10n$0 = $l10n$3;
   continue;
  }
  $927 = $z$2;
  $928 = $a$2;
  $929 = (($927) - ($928))|0;
  $930 = ($p$5|0)<($929|0);
  $$p$5 = $930 ? $929 : $p$5;
  $931 = (($pl$2) + ($$p$5))|0;
  $932 = ($w$1|0)<($931|0);
  $w$2 = $932 ? $931 : $w$1;
  $933 = $fl$6 & 73728;
  $934 = ($933|0)==(0);
  $935 = ($w$2|0)>($931|0);
  $or$cond$i75 = $934 & $935;
  if ($or$cond$i75) {
   $936 = (($w$2) - ($931))|0;
   $937 = ($936>>>0)>(256);
   $938 = $937 ? 256 : $936;
   _memset(($pad$i|0),32,($938|0))|0;
   $939 = ($936>>>0)>(255);
   if ($939) {
    $$01$i77 = $936;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $940 = (($$01$i77) + -256)|0;
     $941 = ($940>>>0)>(255);
     if ($941) {
      $$01$i77 = $940;
     } else {
      break;
     }
    }
    $942 = $936 & 255;
    $$0$lcssa$i79 = $942;
   } else {
    $$0$lcssa$i79 = $936;
   }
   (___fwritex($pad$i,$$0$lcssa$i79,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $943 = ($933|0)==(65536);
  $or$cond$i51 = $943 & $935;
  if ($or$cond$i51) {
   $944 = (($w$2) - ($931))|0;
   $945 = ($944>>>0)>(256);
   $946 = $945 ? 256 : $944;
   _memset(($pad$i|0),48,($946|0))|0;
   $947 = ($944>>>0)>(255);
   if ($947) {
    $$01$i53 = $944;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $948 = (($$01$i53) + -256)|0;
     $949 = ($948>>>0)>(255);
     if ($949) {
      $$01$i53 = $948;
     } else {
      break;
     }
    }
    $950 = $944 & 255;
    $$0$lcssa$i55 = $950;
   } else {
    $$0$lcssa$i55 = $944;
   }
   (___fwritex($pad$i,$$0$lcssa$i55,$f)|0);
  }
  $951 = ($$p$5|0)>($929|0);
  if ($951) {
   $952 = (($$p$5) - ($929))|0;
   $953 = ($952>>>0)>(256);
   $954 = $953 ? 256 : $952;
   _memset(($pad$i|0),48,($954|0))|0;
   $955 = ($952>>>0)>(255);
   if ($955) {
    $$01$i38 = $952;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $956 = (($$01$i38) + -256)|0;
     $957 = ($956>>>0)>(255);
     if ($957) {
      $$01$i38 = $956;
     } else {
      break;
     }
    }
    $958 = $952 & 255;
    $$0$lcssa$i40 = $958;
   } else {
    $$0$lcssa$i40 = $952;
   }
   (___fwritex($pad$i,$$0$lcssa$i40,$f)|0);
  }
  (___fwritex($a$2,$929,$f)|0);
  $959 = ($933|0)==(8192);
  $or$cond$i = $959 & $935;
  if (!($or$cond$i)) {
   $1034 = $1042;$1035 = $1043;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $960 = (($w$2) - ($931))|0;
  $961 = ($960>>>0)>(256);
  $962 = $961 ? 256 : $960;
  _memset(($pad$i|0),32,($962|0))|0;
  $963 = ($960>>>0)>(255);
  if ($963) {
   $$01$i = $960;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $964 = (($$01$i) + -256)|0;
    $965 = ($964>>>0)>(255);
    if ($965) {
     $$01$i = $964;
    } else {
     break;
    }
   }
   $966 = $960 & 255;
   $$0$lcssa$i = $966;
  } else {
   $$0$lcssa$i = $960;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1034 = $1042;$1035 = $1043;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 352) {
  $967 = ($f|0)==(0|0);
  if (!($967)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $968 = ($l10n$0|0)==(0);
  if ($968) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$292 = 1;
  }
  while(1) {
   $969 = (($nl_type) + ($i$292<<2)|0);
   $970 = HEAP32[$969>>2]|0;
   $971 = ($970|0)==(0);
   if ($971) {
    $i$389 = $i$292;
    break;
   }
   $972 = (($nl_arg) + ($i$292<<3)|0);
   $973 = ($970>>>0)>(20);
   L534: do {
    if (!($973)) {
     do {
      switch ($970|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $974 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$972>>2] = $974;
       break L534;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $975 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $976 = ($975|0)<(0);
       $977 = $976 << 31 >> 31;
       $978 = $972;
       $979 = $978;
       HEAP32[$979>>2] = $975;
       $980 = (($978) + 4)|0;
       $981 = $980;
       HEAP32[$981>>2] = $977;
       break L534;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $982 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $983 = $972;
       $984 = $983;
       HEAP32[$984>>2] = $982;
       $985 = (($983) + 4)|0;
       $986 = $985;
       HEAP32[$986>>2] = 0;
       break L534;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $987 = $arglist_current44;
       $988 = $987;
       $989 = HEAP32[$988>>2]|0;
       $990 = (($987) + 4)|0;
       $991 = $990;
       $992 = HEAP32[$991>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $993 = $972;
       $994 = $993;
       HEAP32[$994>>2] = $989;
       $995 = (($993) + 4)|0;
       $996 = $995;
       HEAP32[$996>>2] = $992;
       break L534;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $997 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $998 = $997&65535;
       $999 = $998 << 16 >> 16;
       $1000 = ($999|0)<(0);
       $1001 = $1000 << 31 >> 31;
       $1002 = $972;
       $1003 = $1002;
       HEAP32[$1003>>2] = $999;
       $1004 = (($1002) + 4)|0;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1001;
       break L534;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1006 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1006 & 65535;
       $1007 = $972;
       $1008 = $1007;
       HEAP32[$1008>>2] = $$mask1$i;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = 0;
       break L534;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1012 = $1011&255;
       $1013 = $1012 << 24 >> 24;
       $1014 = ($1013|0)<(0);
       $1015 = $1014 << 31 >> 31;
       $1016 = $972;
       $1017 = $1016;
       HEAP32[$1017>>2] = $1013;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = $1015;
       break L534;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1020 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1020 & 255;
       $1021 = $972;
       $1022 = $1021;
       HEAP32[$1022>>2] = $$mask$i;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = 0;
       break L534;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1025 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$972>>3] = $1025;
       break L534;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1026 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$972>>3] = $1026;
       break L534;
       break;
      }
      default: {
       break L534;
      }
      }
     } while(0);
    }
   } while(0);
   $1027 = (($i$292) + 1)|0;
   $1028 = ($1027|0)<(10);
   if ($1028) {
    $i$292 = $1027;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1031 = (($nl_type) + ($i$389<<2)|0);
   $1032 = HEAP32[$1031>>2]|0;
   $1033 = ($1032|0)==(0);
   $1029 = (($i$389) + 1)|0;
   if (!($1033)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1030 = ($1029|0)<(10);
   if ($1030) {
    $i$389 = $1029;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < 20) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        return 0;
      }
      i = i+1|0;
    }
    _putchar(116);_putchar(111);_putchar(111);_putchar(32);_putchar(109);_putchar(97);_putchar(110);_putchar(121);_putchar(32);_putchar(115);_putchar(101);_putchar(116);_putchar(106);_putchar(109);_putchar(112);_putchar(115);_putchar(32);_putchar(105);_putchar(110);_putchar(32);_putchar(97);_putchar(32);_putchar(102);_putchar(117);_putchar(110);_putchar(99);_putchar(116);_putchar(105);_putchar(111);_putchar(110);_putchar(32);_putchar(99);_putchar(97);_putchar(108);_putchar(108);_putchar(44);_putchar(32);_putchar(98);_putchar(117);_putchar(105);_putchar(108);_putchar(100);_putchar(32);_putchar(119);_putchar(105);_putchar(116);_putchar(104);_putchar(32);_putchar(97);_putchar(32);_putchar(104);_putchar(105);_putchar(103);_putchar(104);_putchar(101);_putchar(114);_putchar(32);_putchar(118);_putchar(97);_putchar(108);_putchar(117);_putchar(101);_putchar(32);_putchar(102);_putchar(111);_putchar(114);_putchar(32);_putchar(77);_putchar(65);_putchar(88);_putchar(95);_putchar(83);_putchar(69);_putchar(84);_putchar(74);_putchar(77);_putchar(80);_putchar(83);_putchar(10);
    abort(0);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table) {
    id = id|0;
    table = table|0;
    var i = 0, curr = 0;
    while ((i|0) < 20) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&15](a1|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&15](a1|0,a2|0);
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&15](a1|0,a2|0,a3|0,a4|0)|0;
  }

function b0(p0) { p0 = p0|0; nullFunc_ii(0);return 0; }
  function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0; }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
  function b3(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,b0,_pmain,b0,b0,b0,b0,b0,b0,b0,b0,b0,_panic,b0,b0,b0];
  var FUNCTION_TABLE_iiii = [b1,_sn_write,b1,b1,b1,b1,b1,b1,b1,b1,_getF,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vii = [b2,b2,b2,b2,_f_Ccall,_f_parser,b2,b2,_f_luaopen,_callallgcTM,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_iiiii = [b3,b3,b3,_writer,b3,b3,_luaY_parser,_luaU_undump,b3,b3,b3,_l_alloc,b3,b3,b3,b3];

  return { _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _strcat: _strcat, _free: _free, _main: _main, _realloc: _realloc, _strncpy: _strncpy, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_iiiii: dynCall_iiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}




}
